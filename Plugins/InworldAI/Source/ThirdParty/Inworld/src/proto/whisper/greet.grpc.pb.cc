// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: greet.proto

#include "greet.pb.h"
#include "greet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace whisper {

static const char* Whisper_method_names[] = {
  "/whisper.Whisper/speech",
};

std::unique_ptr< Whisper::Stub> Whisper::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Whisper::Stub> stub(new Whisper::Stub(channel));
  return stub;
}

Whisper::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_speech_(Whisper_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::whisper::Packet, ::whisper::Packet>* Whisper::Stub::speechRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::whisper::Packet, ::whisper::Packet>::Create(channel_.get(), rpcmethod_speech_, context);
}

void Whisper::Stub::experimental_async::speech(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::whisper::Packet,::whisper::Packet>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::whisper::Packet,::whisper::Packet>::Create(stub_->channel_.get(), stub_->rpcmethod_speech_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::whisper::Packet, ::whisper::Packet>* Whisper::Stub::AsyncspeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::whisper::Packet, ::whisper::Packet>::Create(channel_.get(), cq, rpcmethod_speech_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::whisper::Packet, ::whisper::Packet>* Whisper::Stub::PrepareAsyncspeechRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::whisper::Packet, ::whisper::Packet>::Create(channel_.get(), cq, rpcmethod_speech_, context, false, nullptr);
}

Whisper::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Whisper_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Whisper::Service, ::whisper::Packet, ::whisper::Packet>(
          [](Whisper::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::whisper::Packet,
             ::whisper::Packet>* stream) {
               return service->speech(ctx, stream);
             }, this)));
}

Whisper::Service::~Service() {
}

::grpc::Status Whisper::Service::speech(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::whisper::Packet, ::whisper::Packet>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace whisper

