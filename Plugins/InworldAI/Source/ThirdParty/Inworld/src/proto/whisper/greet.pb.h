// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greet_2eproto;
namespace whisper {
class DataChunk;
class DataChunkDefaultTypeInternal;
extern DataChunkDefaultTypeInternal _DataChunk_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class TextEvent;
class TextEventDefaultTypeInternal;
extern TextEventDefaultTypeInternal _TextEvent_default_instance_;
}  // namespace whisper
PROTOBUF_NAMESPACE_OPEN
template<> ::whisper::DataChunk* Arena::CreateMaybeMessage<::whisper::DataChunk>(Arena*);
template<> ::whisper::Packet* Arena::CreateMaybeMessage<::whisper::Packet>(Arena*);
template<> ::whisper::TextEvent* Arena::CreateMaybeMessage<::whisper::TextEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace whisper {

enum ControlEvent : int {
  UNDEFINED = 0,
  AUDIO_START = 1,
  AUDIO_END = 2,
  ControlEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlEvent_IsValid(int value);
constexpr ControlEvent ControlEvent_MIN = UNDEFINED;
constexpr ControlEvent ControlEvent_MAX = AUDIO_END;
constexpr int ControlEvent_ARRAYSIZE = ControlEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlEvent_descriptor();
template<typename T>
inline const std::string& ControlEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlEvent_descriptor(), enum_t_value);
}
inline bool ControlEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlEvent>(
    ControlEvent_descriptor(), name, value);
}
// ===================================================================

class TextEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:whisper.TextEvent) */ {
 public:
  inline TextEvent() : TextEvent(nullptr) {}
  virtual ~TextEvent();

  TextEvent(const TextEvent& from);
  TextEvent(TextEvent&& from) noexcept
    : TextEvent() {
    *this = ::std::move(from);
  }

  inline TextEvent& operator=(const TextEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextEvent& operator=(TextEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextEvent& default_instance();

  static inline const TextEvent* internal_default_instance() {
    return reinterpret_cast<const TextEvent*>(
               &_TextEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextEvent& a, TextEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TextEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextEvent* New() const final {
    return CreateMaybeMessage<TextEvent>(nullptr);
  }

  TextEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextEvent& from);
  void MergeFrom(const TextEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "whisper.TextEvent";
  }
  protected:
  explicit TextEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_greet_2eproto);
    return ::descriptor_table_greet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kFinalFieldNumber = 2,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // bool final = 2;
  void clear_final();
  bool final() const;
  void set_final(bool value);
  private:
  bool _internal_final() const;
  void _internal_set_final(bool value);
  public:

  // @@protoc_insertion_point(class_scope:whisper.TextEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  bool final_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_greet_2eproto;
};
// -------------------------------------------------------------------

class DataChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:whisper.DataChunk) */ {
 public:
  inline DataChunk() : DataChunk(nullptr) {}
  virtual ~DataChunk();

  DataChunk(const DataChunk& from);
  DataChunk(DataChunk&& from) noexcept
    : DataChunk() {
    *this = ::std::move(from);
  }

  inline DataChunk& operator=(const DataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataChunk& operator=(DataChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataChunk& default_instance();

  static inline const DataChunk* internal_default_instance() {
    return reinterpret_cast<const DataChunk*>(
               &_DataChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataChunk& a, DataChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(DataChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataChunk* New() const final {
    return CreateMaybeMessage<DataChunk>(nullptr);
  }

  DataChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataChunk& from);
  void MergeFrom(const DataChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "whisper.DataChunk";
  }
  protected:
  explicit DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_greet_2eproto);
    return ::descriptor_table_greet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:whisper.DataChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_greet_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:whisper.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  enum PacketCase {
    kText = 1,
    kControl = 2,
    kData = 3,
    PACKET_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "whisper.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_greet_2eproto);
    return ::descriptor_table_greet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kControlFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // .whisper.TextEvent text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::whisper::TextEvent& text() const;
  ::whisper::TextEvent* release_text();
  ::whisper::TextEvent* mutable_text();
  void set_allocated_text(::whisper::TextEvent* text);
  private:
  const ::whisper::TextEvent& _internal_text() const;
  ::whisper::TextEvent* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::whisper::TextEvent* text);
  ::whisper::TextEvent* unsafe_arena_release_text();

  // .whisper.ControlEvent control = 2;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  ::whisper::ControlEvent control() const;
  void set_control(::whisper::ControlEvent value);
  private:
  ::whisper::ControlEvent _internal_control() const;
  void _internal_set_control(::whisper::ControlEvent value);
  public:

  // .whisper.DataChunk data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::whisper::DataChunk& data() const;
  ::whisper::DataChunk* release_data();
  ::whisper::DataChunk* mutable_data();
  void set_allocated_data(::whisper::DataChunk* data);
  private:
  const ::whisper::DataChunk& _internal_data() const;
  ::whisper::DataChunk* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::whisper::DataChunk* data);
  ::whisper::DataChunk* unsafe_arena_release_data();

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:whisper.Packet)
 private:
  class _Internal;
  void set_has_text();
  void set_has_control();
  void set_has_data();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PacketUnion {
    PacketUnion() {}
    ::whisper::TextEvent* text_;
    int control_;
    ::whisper::DataChunk* data_;
  } packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_greet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextEvent

// string text = 1;
inline void TextEvent::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& TextEvent::text() const {
  // @@protoc_insertion_point(field_get:whisper.TextEvent.text)
  return _internal_text();
}
inline void TextEvent::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:whisper.TextEvent.text)
}
inline std::string* TextEvent::mutable_text() {
  // @@protoc_insertion_point(field_mutable:whisper.TextEvent.text)
  return _internal_mutable_text();
}
inline const std::string& TextEvent::_internal_text() const {
  return text_.Get();
}
inline void TextEvent::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TextEvent::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:whisper.TextEvent.text)
}
inline void TextEvent::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:whisper.TextEvent.text)
}
inline void TextEvent::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:whisper.TextEvent.text)
}
inline std::string* TextEvent::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TextEvent::release_text() {
  // @@protoc_insertion_point(field_release:whisper.TextEvent.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextEvent::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:whisper.TextEvent.text)
}

// bool final = 2;
inline void TextEvent::clear_final() {
  final_ = false;
}
inline bool TextEvent::_internal_final() const {
  return final_;
}
inline bool TextEvent::final() const {
  // @@protoc_insertion_point(field_get:whisper.TextEvent.final)
  return _internal_final();
}
inline void TextEvent::_internal_set_final(bool value) {
  
  final_ = value;
}
inline void TextEvent::set_final(bool value) {
  _internal_set_final(value);
  // @@protoc_insertion_point(field_set:whisper.TextEvent.final)
}

// -------------------------------------------------------------------

// DataChunk

// string data = 1;
inline void DataChunk::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& DataChunk::data() const {
  // @@protoc_insertion_point(field_get:whisper.DataChunk.data)
  return _internal_data();
}
inline void DataChunk::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:whisper.DataChunk.data)
}
inline std::string* DataChunk::mutable_data() {
  // @@protoc_insertion_point(field_mutable:whisper.DataChunk.data)
  return _internal_mutable_data();
}
inline const std::string& DataChunk::_internal_data() const {
  return data_.Get();
}
inline void DataChunk::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DataChunk::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:whisper.DataChunk.data)
}
inline void DataChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:whisper.DataChunk.data)
}
inline void DataChunk::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:whisper.DataChunk.data)
}
inline std::string* DataChunk::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DataChunk::release_data() {
  // @@protoc_insertion_point(field_release:whisper.DataChunk.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:whisper.DataChunk.data)
}

// -------------------------------------------------------------------

// Packet

// .whisper.TextEvent text = 1;
inline bool Packet::_internal_has_text() const {
  return packet_case() == kText;
}
inline bool Packet::has_text() const {
  return _internal_has_text();
}
inline void Packet::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void Packet::clear_text() {
  if (_internal_has_text()) {
    if (GetArena() == nullptr) {
      delete packet_.text_;
    }
    clear_has_packet();
  }
}
inline ::whisper::TextEvent* Packet::release_text() {
  // @@protoc_insertion_point(field_release:whisper.Packet.text)
  if (_internal_has_text()) {
    clear_has_packet();
      ::whisper::TextEvent* temp = packet_.text_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::whisper::TextEvent& Packet::_internal_text() const {
  return _internal_has_text()
      ? *packet_.text_
      : reinterpret_cast< ::whisper::TextEvent&>(::whisper::_TextEvent_default_instance_);
}
inline const ::whisper::TextEvent& Packet::text() const {
  // @@protoc_insertion_point(field_get:whisper.Packet.text)
  return _internal_text();
}
inline ::whisper::TextEvent* Packet::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:whisper.Packet.text)
  if (_internal_has_text()) {
    clear_has_packet();
    ::whisper::TextEvent* temp = packet_.text_;
    packet_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_text(::whisper::TextEvent* text) {
  clear_packet();
  if (text) {
    set_has_text();
    packet_.text_ = text;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:whisper.Packet.text)
}
inline ::whisper::TextEvent* Packet::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_packet();
    set_has_text();
    packet_.text_ = CreateMaybeMessage< ::whisper::TextEvent >(GetArena());
  }
  return packet_.text_;
}
inline ::whisper::TextEvent* Packet::mutable_text() {
  // @@protoc_insertion_point(field_mutable:whisper.Packet.text)
  return _internal_mutable_text();
}

// .whisper.ControlEvent control = 2;
inline bool Packet::_internal_has_control() const {
  return packet_case() == kControl;
}
inline void Packet::set_has_control() {
  _oneof_case_[0] = kControl;
}
inline void Packet::clear_control() {
  if (_internal_has_control()) {
    packet_.control_ = 0;
    clear_has_packet();
  }
}
inline ::whisper::ControlEvent Packet::_internal_control() const {
  if (_internal_has_control()) {
    return static_cast< ::whisper::ControlEvent >(packet_.control_);
  }
  return static_cast< ::whisper::ControlEvent >(0);
}
inline ::whisper::ControlEvent Packet::control() const {
  // @@protoc_insertion_point(field_get:whisper.Packet.control)
  return _internal_control();
}
inline void Packet::_internal_set_control(::whisper::ControlEvent value) {
  if (!_internal_has_control()) {
    clear_packet();
    set_has_control();
  }
  packet_.control_ = value;
}
inline void Packet::set_control(::whisper::ControlEvent value) {
  // @@protoc_insertion_point(field_set:whisper.Packet.control)
  _internal_set_control(value);
}

// .whisper.DataChunk data = 3;
inline bool Packet::_internal_has_data() const {
  return packet_case() == kData;
}
inline bool Packet::has_data() const {
  return _internal_has_data();
}
inline void Packet::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Packet::clear_data() {
  if (_internal_has_data()) {
    if (GetArena() == nullptr) {
      delete packet_.data_;
    }
    clear_has_packet();
  }
}
inline ::whisper::DataChunk* Packet::release_data() {
  // @@protoc_insertion_point(field_release:whisper.Packet.data)
  if (_internal_has_data()) {
    clear_has_packet();
      ::whisper::DataChunk* temp = packet_.data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::whisper::DataChunk& Packet::_internal_data() const {
  return _internal_has_data()
      ? *packet_.data_
      : reinterpret_cast< ::whisper::DataChunk&>(::whisper::_DataChunk_default_instance_);
}
inline const ::whisper::DataChunk& Packet::data() const {
  // @@protoc_insertion_point(field_get:whisper.Packet.data)
  return _internal_data();
}
inline ::whisper::DataChunk* Packet::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:whisper.Packet.data)
  if (_internal_has_data()) {
    clear_has_packet();
    ::whisper::DataChunk* temp = packet_.data_;
    packet_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_data(::whisper::DataChunk* data) {
  clear_packet();
  if (data) {
    set_has_data();
    packet_.data_ = data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:whisper.Packet.data)
}
inline ::whisper::DataChunk* Packet::_internal_mutable_data() {
  if (!_internal_has_data()) {
    clear_packet();
    set_has_data();
    packet_.data_ = CreateMaybeMessage< ::whisper::DataChunk >(GetArena());
  }
  return packet_.data_;
}
inline ::whisper::DataChunk* Packet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:whisper.Packet.data)
  return _internal_mutable_data();
}

inline bool Packet::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void Packet::clear_has_packet() {
  _oneof_case_[0] = PACKET_NOT_SET;
}
inline Packet::PacketCase Packet::packet_case() const {
  return Packet::PacketCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace whisper

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::whisper::ControlEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::whisper::ControlEvent>() {
  return ::whisper::ControlEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greet_2eproto
