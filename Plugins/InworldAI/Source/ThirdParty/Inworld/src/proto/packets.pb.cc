#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Actor_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdditionalPhonemeInfo_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyResponse_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioChunk_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponses_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponsesEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomEvent_Parameter_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataChunk_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugInfoEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadScene_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadSceneOutputEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadSceneOutputEvent_Agent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyExactResponse_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MutationEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarratedAction_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketId_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegenerateResponse_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationInfo_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationInfo_RelationAttributes_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Routing_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextEvent_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextEvent_ModelInfo_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace ai {
namespace inworld {
namespace packets {
class ActorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Actor> _instance;
} _Actor_default_instance_;
class RoutingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Routing> _instance;
} _Routing_default_instance_;
class PacketIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PacketId> _instance;
} _PacketId_default_instance_;
class InworldPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InworldPacket> _instance;
} _InworldPacket_default_instance_;
class TextEvent_ModelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextEvent_ModelInfo> _instance;
} _TextEvent_ModelInfo_default_instance_;
class TextEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextEvent> _instance;
} _TextEvent_default_instance_;
class ControlEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlEvent> _instance;
} _ControlEvent_default_instance_;
class AudioChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioChunk> _instance;
} _AudioChunk_default_instance_;
class CustomEvent_ParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomEvent_Parameter> _instance;
} _CustomEvent_Parameter_default_instance_;
class CustomEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomEvent> _instance;
} _CustomEvent_default_instance_;
class CancelResponsesEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelResponsesEvent> _instance;
} _CancelResponsesEvent_default_instance_;
class EmotionEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmotionEvent> _instance;
} _EmotionEvent_default_instance_;
class DataChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataChunk> _instance;
} _DataChunk_default_instance_;
class AdditionalPhonemeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalPhonemeInfo> _instance;
} _AdditionalPhonemeInfo_default_instance_;
class ActionEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionEvent> _instance;
} _ActionEvent_default_instance_;
class NarratedActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NarratedAction> _instance;
} _NarratedAction_default_instance_;
class RelationInfo_RelationAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationInfo_RelationAttributes> _instance;
} _RelationInfo_RelationAttributes_default_instance_;
class RelationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationInfo> _instance;
} _RelationInfo_default_instance_;
class MutationEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutationEvent> _instance;
} _MutationEvent_default_instance_;
class CancelResponsesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelResponses> _instance;
} _CancelResponses_default_instance_;
class RegenerateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegenerateResponse> _instance;
} _RegenerateResponse_default_instance_;
class ApplyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplyResponse> _instance;
} _ApplyResponse_default_instance_;
class LoadSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadScene> _instance;
} _LoadScene_default_instance_;
class ModifyExactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyExactResponse> _instance;
} _ModifyExactResponse_default_instance_;
class LoadSceneOutputEvent_AgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneOutputEvent_Agent> _instance;
} _LoadSceneOutputEvent_Agent_default_instance_;
class LoadSceneOutputEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadSceneOutputEvent> _instance;
} _LoadSceneOutputEvent_default_instance_;
class DebugInfoEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugInfoEvent> _instance;
} _DebugInfoEvent_default_instance_;
}  // namespace packets
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_ActionEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ActionEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::ActionEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActionEvent_packets_2eproto}, {
      &scc_info_NarratedAction_packets_2eproto.base,}};

static void InitDefaultsscc_info_Actor_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Actor_default_instance_;
    new (ptr) ::ai::inworld::packets::Actor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Actor_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Actor_packets_2eproto}, {}};

static void InitDefaultsscc_info_AdditionalPhonemeInfo_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_AdditionalPhonemeInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::AdditionalPhonemeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdditionalPhonemeInfo_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdditionalPhonemeInfo_packets_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_ApplyResponse_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ApplyResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::ApplyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApplyResponse_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ApplyResponse_packets_2eproto}, {
      &scc_info_PacketId_packets_2eproto.base,}};

static void InitDefaultsscc_info_AudioChunk_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_AudioChunk_default_instance_;
    new (ptr) ::ai::inworld::packets::AudioChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioChunk_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioChunk_packets_2eproto}, {}};

static void InitDefaultsscc_info_CancelResponses_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CancelResponses_default_instance_;
    new (ptr) ::ai::inworld::packets::CancelResponses();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponses_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelResponses_packets_2eproto}, {}};

static void InitDefaultsscc_info_CancelResponsesEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CancelResponsesEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::CancelResponsesEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelResponsesEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelResponsesEvent_packets_2eproto}, {}};

static void InitDefaultsscc_info_ControlEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ControlEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::ControlEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControlEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ControlEvent_packets_2eproto}, {
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_CustomEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CustomEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::CustomEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomEvent_packets_2eproto}, {
      &scc_info_CustomEvent_Parameter_packets_2eproto.base,}};

static void InitDefaultsscc_info_CustomEvent_Parameter_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_CustomEvent_Parameter_default_instance_;
    new (ptr) ::ai::inworld::packets::CustomEvent_Parameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomEvent_Parameter_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomEvent_Parameter_packets_2eproto}, {}};

static void InitDefaultsscc_info_DataChunk_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_DataChunk_default_instance_;
    new (ptr) ::ai::inworld::packets::DataChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataChunk_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataChunk_packets_2eproto}, {
      &scc_info_AdditionalPhonemeInfo_packets_2eproto.base,}};

static void InitDefaultsscc_info_DebugInfoEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_DebugInfoEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::DebugInfoEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugInfoEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebugInfoEvent_packets_2eproto}, {
      &scc_info_RelationInfo_packets_2eproto.base,}};

static void InitDefaultsscc_info_EmotionEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_EmotionEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::EmotionEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmotionEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmotionEvent_packets_2eproto}, {}};

static void InitDefaultsscc_info_InworldPacket_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_InworldPacket_default_instance_;
    new (ptr) ::ai::inworld::packets::InworldPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_InworldPacket_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_InworldPacket_packets_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Routing_packets_2eproto.base,
      &scc_info_PacketId_packets_2eproto.base,
      &scc_info_TextEvent_packets_2eproto.base,
      &scc_info_ControlEvent_packets_2eproto.base,
      &scc_info_AudioChunk_packets_2eproto.base,
      &scc_info_CustomEvent_packets_2eproto.base,
      &scc_info_CancelResponsesEvent_packets_2eproto.base,
      &scc_info_EmotionEvent_packets_2eproto.base,
      &scc_info_DataChunk_packets_2eproto.base,
      &scc_info_ActionEvent_packets_2eproto.base,
      &scc_info_MutationEvent_packets_2eproto.base,
      &scc_info_LoadSceneOutputEvent_packets_2eproto.base,
      &scc_info_DebugInfoEvent_packets_2eproto.base,}};

static void InitDefaultsscc_info_LoadScene_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadScene_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadScene_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadScene_packets_2eproto}, {}};

static void InitDefaultsscc_info_LoadSceneOutputEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadSceneOutputEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadSceneOutputEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoadSceneOutputEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoadSceneOutputEvent_packets_2eproto}, {
      &scc_info_LoadSceneOutputEvent_Agent_packets_2eproto.base,}};

static void InitDefaultsscc_info_LoadSceneOutputEvent_Agent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_LoadSceneOutputEvent_Agent_default_instance_;
    new (ptr) ::ai::inworld::packets::LoadSceneOutputEvent_Agent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadSceneOutputEvent_Agent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadSceneOutputEvent_Agent_packets_2eproto}, {}};

static void InitDefaultsscc_info_ModifyExactResponse_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_ModifyExactResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::ModifyExactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyExactResponse_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModifyExactResponse_packets_2eproto}, {}};

static void InitDefaultsscc_info_MutationEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_MutationEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::MutationEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MutationEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MutationEvent_packets_2eproto}, {
      &scc_info_CancelResponses_packets_2eproto.base,
      &scc_info_RegenerateResponse_packets_2eproto.base,
      &scc_info_ApplyResponse_packets_2eproto.base,
      &scc_info_LoadScene_packets_2eproto.base,
      &scc_info_ModifyExactResponse_packets_2eproto.base,}};

static void InitDefaultsscc_info_NarratedAction_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_NarratedAction_default_instance_;
    new (ptr) ::ai::inworld::packets::NarratedAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NarratedAction_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NarratedAction_packets_2eproto}, {}};

static void InitDefaultsscc_info_PacketId_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_PacketId_default_instance_;
    new (ptr) ::ai::inworld::packets::PacketId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketId_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PacketId_packets_2eproto}, {}};

static void InitDefaultsscc_info_RegenerateResponse_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_RegenerateResponse_default_instance_;
    new (ptr) ::ai::inworld::packets::RegenerateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegenerateResponse_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegenerateResponse_packets_2eproto}, {}};

static void InitDefaultsscc_info_RelationInfo_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_RelationInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::RelationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelationInfo_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelationInfo_packets_2eproto}, {
      &scc_info_RelationInfo_RelationAttributes_packets_2eproto.base,}};

static void InitDefaultsscc_info_RelationInfo_RelationAttributes_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_RelationInfo_RelationAttributes_default_instance_;
    new (ptr) ::ai::inworld::packets::RelationInfo_RelationAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationInfo_RelationAttributes_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelationInfo_RelationAttributes_packets_2eproto}, {}};

static void InitDefaultsscc_info_Routing_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_Routing_default_instance_;
    new (ptr) ::ai::inworld::packets::Routing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Routing_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Routing_packets_2eproto}, {
      &scc_info_Actor_packets_2eproto.base,}};

static void InitDefaultsscc_info_TextEvent_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_TextEvent_default_instance_;
    new (ptr) ::ai::inworld::packets::TextEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextEvent_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TextEvent_packets_2eproto}, {
      &scc_info_TextEvent_ModelInfo_packets_2eproto.base,}};

static void InitDefaultsscc_info_TextEvent_ModelInfo_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::packets::_TextEvent_ModelInfo_default_instance_;
    new (ptr) ::ai::inworld::packets::TextEvent_ModelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextEvent_ModelInfo_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextEvent_ModelInfo_packets_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_packets_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_packets_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Actor, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, source_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::Routing, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, packet_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, utterance_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::PacketId, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, routing_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, packet_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::InworldPacket, packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent_ModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent_ModelInfo, service_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent_ModelInfo, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, text_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, source_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, final_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::TextEvent, model_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, action_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, description_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ControlEvent, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AudioChunk, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent_Parameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, playback_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CustomEvent, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponsesEvent, utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, joy_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, fear_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, surprise_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, behavior_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::EmotionEvent, strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, additional_phoneme_info_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, audioformat_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DataChunk, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, phoneme_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::AdditionalPhonemeInfo, start_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, playback_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ActionEvent, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::NarratedAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::NarratedAction, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, trust_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, respect_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, familiar_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, flirtatious_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo_RelationAttributes, attraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, relation_state_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RelationInfo, relation_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::MutationEvent, mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::CancelResponses, utterance_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RegenerateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::RegenerateResponse, interaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ApplyResponse, packet_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadScene, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, interaction_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::ModifyExactResponse, exact_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, agent_id_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, brain_name_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent_Agent, given_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::LoadSceneOutputEvent, agents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::packets::DebugInfoEvent, info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ai::inworld::packets::Actor)},
  { 7, -1, sizeof(::ai::inworld::packets::Routing)},
  { 14, -1, sizeof(::ai::inworld::packets::PacketId)},
  { 23, -1, sizeof(::ai::inworld::packets::InworldPacket)},
  { 43, -1, sizeof(::ai::inworld::packets::TextEvent_ModelInfo)},
  { 50, -1, sizeof(::ai::inworld::packets::TextEvent)},
  { 59, -1, sizeof(::ai::inworld::packets::ControlEvent)},
  { 67, -1, sizeof(::ai::inworld::packets::AudioChunk)},
  { 73, -1, sizeof(::ai::inworld::packets::CustomEvent_Parameter)},
  { 80, -1, sizeof(::ai::inworld::packets::CustomEvent)},
  { 88, -1, sizeof(::ai::inworld::packets::CancelResponsesEvent)},
  { 95, -1, sizeof(::ai::inworld::packets::EmotionEvent)},
  { 106, -1, sizeof(::ai::inworld::packets::DataChunk)},
  { 117, -1, sizeof(::ai::inworld::packets::AdditionalPhonemeInfo)},
  { 124, -1, sizeof(::ai::inworld::packets::ActionEvent)},
  { 132, -1, sizeof(::ai::inworld::packets::NarratedAction)},
  { 138, -1, sizeof(::ai::inworld::packets::RelationInfo_RelationAttributes)},
  { 148, -1, sizeof(::ai::inworld::packets::RelationInfo)},
  { 155, -1, sizeof(::ai::inworld::packets::MutationEvent)},
  { 166, -1, sizeof(::ai::inworld::packets::CancelResponses)},
  { 173, -1, sizeof(::ai::inworld::packets::RegenerateResponse)},
  { 179, -1, sizeof(::ai::inworld::packets::ApplyResponse)},
  { 185, -1, sizeof(::ai::inworld::packets::LoadScene)},
  { 191, -1, sizeof(::ai::inworld::packets::ModifyExactResponse)},
  { 198, -1, sizeof(::ai::inworld::packets::LoadSceneOutputEvent_Agent)},
  { 206, -1, sizeof(::ai::inworld::packets::LoadSceneOutputEvent)},
  { 212, -1, sizeof(::ai::inworld::packets::DebugInfoEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Actor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_Routing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_PacketId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_InworldPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_TextEvent_ModelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_TextEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ControlEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_AudioChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CustomEvent_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CustomEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CancelResponsesEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_EmotionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_DataChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_AdditionalPhonemeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ActionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_NarratedAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_RelationInfo_RelationAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_RelationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_MutationEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_CancelResponses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_RegenerateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ApplyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_ModifyExactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadSceneOutputEvent_Agent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_LoadSceneOutputEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::packets::_DebugInfoEvent_default_instance_),
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\022\022ai.inworld.packets\032\036goo"
  "gle/protobuf/duration.proto\032\034google/prot"
  "obuf/struct.proto\032\037google/protobuf/times"
  "tamp.proto\032\roptions.proto\"o\n\005Actor\022,\n\004ty"
  "pe\030\001 \001(\0162\036.ai.inworld.packets.Actor.Type"
  "\022\014\n\004name\030\002 \001(\t\"*\n\004Type\022\013\n\007UNKNOWN\020\000\022\n\n\006P"
  "LAYER\020\001\022\t\n\005AGENT\020\002\"_\n\007Routing\022)\n\006source\030"
  "\001 \001(\0132\031.ai.inworld.packets.Actor\022)\n\006targ"
  "et\030\002 \001(\0132\031.ai.inworld.packets.Actor\"c\n\010P"
  "acketId\022\021\n\tpacket_id\030\001 \001(\t\022\024\n\014utterance_"
  "id\030\002 \001(\t\022\026\n\016interaction_id\030\003 \001(\t\022\026\n\016corr"
  "elation_id\030\004 \001(\t\"\257\006\n\rInworldPacket\022-\n\tti"
  "mestamp\030\001 \001(\0132\032.google.protobuf.Timestam"
  "p\022,\n\007routing\030\006 \001(\0132\033.ai.inworld.packets."
  "Routing\022/\n\tpacket_id\030\t \001(\0132\034.ai.inworld."
  "packets.PacketId\022-\n\004text\030\002 \001(\0132\035.ai.inwo"
  "rld.packets.TextEventH\000\0223\n\007control\030\003 \001(\013"
  "2 .ai.inworld.packets.ControlEventH\000\0229\n\013"
  "audio_chunk\030\004 \001(\0132\036.ai.inworld.packets.A"
  "udioChunkB\002\030\001H\000\0221\n\006custom\030\010 \001(\0132\037.ai.inw"
  "orld.packets.CustomEventH\000\022G\n\017cancelResp"
  "onses\030\n \001(\0132(.ai.inworld.packets.CancelR"
  "esponsesEventB\002\030\001H\000\0223\n\007emotion\030\013 \001(\0132 .a"
  "i.inworld.packets.EmotionEventH\000\0223\n\ndata"
  "_chunk\030\014 \001(\0132\035.ai.inworld.packets.DataCh"
  "unkH\000\0221\n\006action\030\r \001(\0132\037.ai.inworld.packe"
  "ts.ActionEventH\000\0225\n\010mutation\030\017 \001(\0132!.ai."
  "inworld.packets.MutationEventH\000\022E\n\021load_"
  "scene_output\030\020 \001(\0132(.ai.inworld.packets."
  "LoadSceneOutputEventH\000\0228\n\ndebug_info\030\022 \001"
  "(\0132\".ai.inworld.packets.DebugInfoEventH\000"
  "B\010\n\006packetJ\004\010\005\020\006J\004\010\007\020\010J\004\010\016\020\017J\004\010\021\020\022\"\257\002\n\tT"
  "extEvent\022\014\n\004text\030\001 \001(\t\022=\n\013source_type\030\002 "
  "\001(\0162(.ai.inworld.packets.TextEvent.Sourc"
  "eType\022\r\n\005final\030\003 \001(\010\022A\n\nmodel_info\030\004 \001(\013"
  "2\'.ai.inworld.packets.TextEvent.ModelInf"
  "oB\004\210\210\'\001\032+\n\tModelInfo\022\017\n\007service\030\001 \001(\t\022\r\n"
  "\005model\030\002 \001(\t\"V\n\nSourceType\022\013\n\007UNKNOWN\020\000\022"
  "\022\n\016SPEECH_TO_TEXT\020\001\022\014\n\010TYPED_IN\020\002\022\r\n\tGEN"
  "ERATED\020\003\022\n\n\006FILLER\020\004\"\337\002\n\014ControlEvent\0227\n"
  "\006action\030\001 \001(\0162\'.ai.inworld.packets.Contr"
  "olEvent.Action\022\023\n\013description\030\002 \001(\t\022(\n\007p"
  "ayload\030\003 \001(\0132\027.google.protobuf.Struct\"\326\001"
  "\n\006Action\022\013\n\007UNKNOWN\020\000\022\027\n\023AUDIO_SESSION_S"
  "TART\020\001\022\025\n\021AUDIO_SESSION_END\020\002\022\023\n\017INTERAC"
  "TION_END\020\003\022\026\n\022TTS_PLAYBACK_START\020\004\022\024\n\020TT"
  "S_PLAYBACK_END\020\005\022\025\n\021TTS_PLAYBACK_MUTE\020\006\022"
  "\027\n\023TTS_PLAYBACK_UNMUTE\020\007\022\013\n\007WARNING\020\010\022\017\n"
  "\013SESSION_END\020\t\"\037\n\nAudioChunk\022\r\n\005chunk\030\001 "
  "\001(\014:\002\030\001\"\264\001\n\013CustomEvent\022\014\n\004name\030\001 \001(\t\022.\n"
  "\010playback\030\002 \001(\0162\034.ai.inworld.packets.Pla"
  "yback\022=\n\nparameters\030\003 \003(\0132).ai.inworld.p"
  "ackets.CustomEvent.Parameter\032(\n\tParamete"
  "r\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"H\n\024Cancel"
  "ResponsesEvent\022\026\n\016interaction_id\030\001 \001(\t\022\024"
  "\n\014utterance_id\030\002 \003(\t:\002\030\001\"\243\004\n\014EmotionEven"
  "t\022\013\n\003joy\030\001 \001(\002\022\014\n\004fear\030\002 \001(\002\022\r\n\005trust\030\003 "
  "\001(\002\022\020\n\010surprise\030\004 \001(\002\022<\n\010behavior\030\005 \001(\0162"
  "*.ai.inworld.packets.EmotionEvent.SpaffC"
  "ode\022;\n\010strength\030\006 \001(\0162).ai.inworld.packe"
  "ts.EmotionEvent.Strength\"\234\002\n\tSpaffCode\022\013"
  "\n\007NEUTRAL\020\000\022\013\n\007DISGUST\020\001\022\014\n\010CONTEMPT\020\002\022\020"
  "\n\014BELLIGERENCE\020\003\022\017\n\013DOMINEERING\020\004\022\r\n\tCRI"
  "TICISM\020\005\022\t\n\005ANGER\020\006\022\013\n\007TENSION\020\007\022\017\n\013TENS"
  "E_HUMOR\020\010\022\021\n\rDEFENSIVENESS\020\t\022\013\n\007WHINING\020"
  "\n\022\013\n\007SADNESS\020\013\022\020\n\014STONEWALLING\020\014\022\014\n\010INTE"
  "REST\020\r\022\016\n\nVALIDATION\020\016\022\r\n\tAFFECTION\020\017\022\t\n"
  "\005HUMOR\020\020\022\014\n\010SURPRISE\020\021\022\007\n\003JOY\020\022\"=\n\010Stren"
  "gth\022\017\n\013UNSPECIFIED\020\000\022\010\n\004WEAK\020\001\022\n\n\006STRONG"
  "\020\002\022\n\n\006NORMAL\020\003\"\251\003\n\tDataChunk\022\017\n\005chunk\030\001 "
  "\001(\014H\000\022\025\n\013duration_ms\030\003 \001(\003H\000\0224\n\004type\030\002 \001"
  "(\0162&.ai.inworld.packets.DataChunk.DataTy"
  "pe\022J\n\027additional_phoneme_info\030\004 \003(\0132).ai"
  ".inworld.packets.AdditionalPhonemeInfo\022>"
  "\n\013audioFormat\030\005 \001(\0162).ai.inworld.packets"
  ".DataChunk.AudioFormat\"D\n\010DataType\022\017\n\013UN"
  "SPECIFIED\020\000\022\t\n\005AUDIO\020\001\022\013\n\007SILENCE\020\003\022\t\n\005S"
  "TATE\020\004\"\004\010\002\020\002\"d\n\013AudioFormat\022\034\n\030UNSPECIFI"
  "ED_AUDIO_FORMAT\020\000\022\r\n\tAUDIO_MP3\020\001\022\023\n\017AUDI"
  "O_PCM_16000\020\002\022\023\n\017AUDIO_PCM_22050\020\003B\006\n\004da"
  "ta\"Y\n\025AdditionalPhonemeInfo\022\017\n\007phoneme\030\001"
  " \001(\t\022/\n\014start_offset\030\002 \001(\0132\031.google.prot"
  "obuf.Duration\"\206\001\n\013ActionEvent\022=\n\017narrate"
  "d_action\030\001 \001(\0132\".ai.inworld.packets.Narr"
  "atedActionH\000\022.\n\010playback\030\002 \001(\0162\034.ai.inwo"
  "rld.packets.PlaybackB\010\n\006action\"!\n\016Narrat"
  "edAction\022\017\n\007content\030\001 \001(\t\"\232\002\n\014RelationIn"
  "fo\022K\n\016relation_state\030\001 \001(\01323.ai.inworld."
  "packets.RelationInfo.RelationAttributes\022"
  "L\n\017relation_update\030\002 \001(\01323.ai.inworld.pa"
  "ckets.RelationInfo.RelationAttributes\032o\n"
  "\022RelationAttributes\022\r\n\005trust\030\001 \001(\005\022\017\n\007re"
  "spect\030\002 \001(\005\022\020\n\010familiar\030\003 \001(\005\022\023\n\013flirtat"
  "ious\030\004 \001(\005\022\022\n\nattraction\030\005 \001(\005\"\337\002\n\rMutat"
  "ionEvent\022\?\n\020cancel_responses\030\001 \001(\0132#.ai."
  "inworld.packets.CancelResponsesH\000\022E\n\023reg"
  "enerate_response\030\002 \001(\0132&.ai.inworld.pack"
  "ets.RegenerateResponseH\000\022;\n\016apply_respon"
  "se\030\003 \001(\0132!.ai.inworld.packets.ApplyRespo"
  "nseH\000\0223\n\nload_scene\030\004 \001(\0132\035.ai.inworld.p"
  "ackets.LoadSceneH\000\022H\n\025modify_exact_respo"
  "nse\030\005 \001(\0132\'.ai.inworld.packets.ModifyExa"
  "ctResponseH\000B\n\n\010mutation\"\?\n\017CancelRespon"
  "ses\022\026\n\016interaction_id\030\001 \001(\t\022\024\n\014utterance"
  "_id\030\002 \003(\t\",\n\022RegenerateResponse\022\026\n\016inter"
  "action_id\030\001 \001(\t\"@\n\rApplyResponse\022/\n\tpack"
  "et_id\030\001 \001(\0132\034.ai.inworld.packets.PacketI"
  "d\"\031\n\tLoadScene\022\014\n\004name\030\001 \001(\t\"A\n\023ModifyEx"
  "actResponse\022\026\n\016interaction_id\030\001 \001(\t\022\022\n\ne"
  "xact_text\030\002 \001(\t\"\231\001\n\024LoadSceneOutputEvent"
  "\022>\n\006agents\030\001 \003(\0132..ai.inworld.packets.Lo"
  "adSceneOutputEvent.Agent\032A\n\005Agent\022\020\n\010age"
  "nt_id\030\001 \001(\t\022\022\n\nbrain_name\030\002 \001(\t\022\022\n\ngiven"
  "_name\030\003 \001(\t\"N\n\016DebugInfoEvent\0224\n\010relatio"
  "n\030\001 \001(\0132 .ai.inworld.packets.RelationInf"
  "oH\000B\006\n\004info*P\n\010Playback\022\017\n\013UNSPECIFIED\020\000"
  "\022\017\n\013INTERACTION\020\001\022\023\n\017INTERACTION_END\020\002\022\r"
  "\n\tUTTERANCE\020\003B\212\001\n\022ai.inworld.packetsB\026In"
  "worldPacketsProtocolZMgithub.com/inworld"
  "-ai/inworld/serving/grpc-gateway/build/p"
  "roto/engine/v1alpha\252\002\014Inworld.Grpcb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_packets_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_options_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_packets_2eproto_sccs[27] = {
  &scc_info_ActionEvent_packets_2eproto.base,
  &scc_info_Actor_packets_2eproto.base,
  &scc_info_AdditionalPhonemeInfo_packets_2eproto.base,
  &scc_info_ApplyResponse_packets_2eproto.base,
  &scc_info_AudioChunk_packets_2eproto.base,
  &scc_info_CancelResponses_packets_2eproto.base,
  &scc_info_CancelResponsesEvent_packets_2eproto.base,
  &scc_info_ControlEvent_packets_2eproto.base,
  &scc_info_CustomEvent_packets_2eproto.base,
  &scc_info_CustomEvent_Parameter_packets_2eproto.base,
  &scc_info_DataChunk_packets_2eproto.base,
  &scc_info_DebugInfoEvent_packets_2eproto.base,
  &scc_info_EmotionEvent_packets_2eproto.base,
  &scc_info_InworldPacket_packets_2eproto.base,
  &scc_info_LoadScene_packets_2eproto.base,
  &scc_info_LoadSceneOutputEvent_packets_2eproto.base,
  &scc_info_LoadSceneOutputEvent_Agent_packets_2eproto.base,
  &scc_info_ModifyExactResponse_packets_2eproto.base,
  &scc_info_MutationEvent_packets_2eproto.base,
  &scc_info_NarratedAction_packets_2eproto.base,
  &scc_info_PacketId_packets_2eproto.base,
  &scc_info_RegenerateResponse_packets_2eproto.base,
  &scc_info_RelationInfo_packets_2eproto.base,
  &scc_info_RelationInfo_RelationAttributes_packets_2eproto.base,
  &scc_info_Routing_packets_2eproto.base,
  &scc_info_TextEvent_packets_2eproto.base,
  &scc_info_TextEvent_ModelInfo_packets_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_packets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto = {
  false, false, descriptor_table_protodef_packets_2eproto, "packets.proto", 4842,
  &descriptor_table_packets_2eproto_once, descriptor_table_packets_2eproto_sccs, descriptor_table_packets_2eproto_deps, 27, 4,
  schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
  file_level_metadata_packets_2eproto, 27, file_level_enum_descriptors_packets_2eproto, file_level_service_descriptors_packets_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_packets_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_packets_2eproto)), true);
namespace ai {
namespace inworld {
namespace packets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Actor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[0];
}
bool Actor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Actor_Type Actor::UNKNOWN;
constexpr Actor_Type Actor::PLAYER;
constexpr Actor_Type Actor::AGENT;
constexpr Actor_Type Actor::Type_MIN;
constexpr Actor_Type Actor::Type_MAX;
constexpr int Actor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextEvent_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[1];
}
bool TextEvent_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextEvent_SourceType TextEvent::UNKNOWN;
constexpr TextEvent_SourceType TextEvent::SPEECH_TO_TEXT;
constexpr TextEvent_SourceType TextEvent::TYPED_IN;
constexpr TextEvent_SourceType TextEvent::GENERATED;
constexpr TextEvent_SourceType TextEvent::FILLER;
constexpr TextEvent_SourceType TextEvent::SourceType_MIN;
constexpr TextEvent_SourceType TextEvent::SourceType_MAX;
constexpr int TextEvent::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlEvent_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[2];
}
bool ControlEvent_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ControlEvent_Action ControlEvent::UNKNOWN;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_START;
constexpr ControlEvent_Action ControlEvent::AUDIO_SESSION_END;
constexpr ControlEvent_Action ControlEvent::INTERACTION_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_START;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_END;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_MUTE;
constexpr ControlEvent_Action ControlEvent::TTS_PLAYBACK_UNMUTE;
constexpr ControlEvent_Action ControlEvent::WARNING;
constexpr ControlEvent_Action ControlEvent::SESSION_END;
constexpr ControlEvent_Action ControlEvent::Action_MIN;
constexpr ControlEvent_Action ControlEvent::Action_MAX;
constexpr int ControlEvent::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_SpaffCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[3];
}
bool EmotionEvent_SpaffCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmotionEvent_SpaffCode EmotionEvent::NEUTRAL;
constexpr EmotionEvent_SpaffCode EmotionEvent::DISGUST;
constexpr EmotionEvent_SpaffCode EmotionEvent::CONTEMPT;
constexpr EmotionEvent_SpaffCode EmotionEvent::BELLIGERENCE;
constexpr EmotionEvent_SpaffCode EmotionEvent::DOMINEERING;
constexpr EmotionEvent_SpaffCode EmotionEvent::CRITICISM;
constexpr EmotionEvent_SpaffCode EmotionEvent::ANGER;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSION;
constexpr EmotionEvent_SpaffCode EmotionEvent::TENSE_HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::DEFENSIVENESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::WHINING;
constexpr EmotionEvent_SpaffCode EmotionEvent::SADNESS;
constexpr EmotionEvent_SpaffCode EmotionEvent::STONEWALLING;
constexpr EmotionEvent_SpaffCode EmotionEvent::INTEREST;
constexpr EmotionEvent_SpaffCode EmotionEvent::VALIDATION;
constexpr EmotionEvent_SpaffCode EmotionEvent::AFFECTION;
constexpr EmotionEvent_SpaffCode EmotionEvent::HUMOR;
constexpr EmotionEvent_SpaffCode EmotionEvent::SURPRISE;
constexpr EmotionEvent_SpaffCode EmotionEvent::JOY;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MIN;
constexpr EmotionEvent_SpaffCode EmotionEvent::SpaffCode_MAX;
constexpr int EmotionEvent::SpaffCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmotionEvent_Strength_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[4];
}
bool EmotionEvent_Strength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmotionEvent_Strength EmotionEvent::UNSPECIFIED;
constexpr EmotionEvent_Strength EmotionEvent::WEAK;
constexpr EmotionEvent_Strength EmotionEvent::STRONG;
constexpr EmotionEvent_Strength EmotionEvent::NORMAL;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MIN;
constexpr EmotionEvent_Strength EmotionEvent::Strength_MAX;
constexpr int EmotionEvent::Strength_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChunk_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[5];
}
bool DataChunk_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataChunk_DataType DataChunk::UNSPECIFIED;
constexpr DataChunk_DataType DataChunk::AUDIO;
constexpr DataChunk_DataType DataChunk::SILENCE;
constexpr DataChunk_DataType DataChunk::STATE;
constexpr DataChunk_DataType DataChunk::DataType_MIN;
constexpr DataChunk_DataType DataChunk::DataType_MAX;
constexpr int DataChunk::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataChunk_AudioFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[6];
}
bool DataChunk_AudioFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DataChunk_AudioFormat DataChunk::UNSPECIFIED_AUDIO_FORMAT;
constexpr DataChunk_AudioFormat DataChunk::AUDIO_MP3;
constexpr DataChunk_AudioFormat DataChunk::AUDIO_PCM_16000;
constexpr DataChunk_AudioFormat DataChunk::AUDIO_PCM_22050;
constexpr DataChunk_AudioFormat DataChunk::AudioFormat_MIN;
constexpr DataChunk_AudioFormat DataChunk::AudioFormat_MAX;
constexpr int DataChunk::AudioFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Playback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return file_level_enum_descriptors_packets_2eproto[7];
}
bool Playback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Actor::_Internal {
 public:
};

Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Actor)
}

void Actor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Actor_packets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Actor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Actor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Actor::ArenaDtor(void* object) {
  Actor* _this = reinterpret_cast< Actor* >(object);
  (void)_this;
}
void Actor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Actor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Actor& Actor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Actor_packets_2eproto.base);
  return *internal_default_instance();
}


void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Actor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::Actor_Type>(val));
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.Actor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Actor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Actor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.Actor.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Actor)
  return target;
}

size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Actor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Actor.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Actor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Actor)
  GOOGLE_DCHECK_NE(&from, this);
  const Actor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Actor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Actor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Actor)
    MergeFrom(*source);
  }
}

void Actor::MergeFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Actor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Actor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Routing::_Internal {
 public:
  static const ::ai::inworld::packets::Actor& source(const Routing* msg);
  static const ::ai::inworld::packets::Actor& target(const Routing* msg);
};

const ::ai::inworld::packets::Actor&
Routing::_Internal::source(const Routing* msg) {
  return *msg->source_;
}
const ::ai::inworld::packets::Actor&
Routing::_Internal::target(const Routing* msg) {
  return *msg->target_;
}
Routing::Routing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.Routing)
}
Routing::Routing(const Routing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::ai::inworld::packets::Actor(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::ai::inworld::packets::Actor(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.Routing)
}

void Routing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Routing_packets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&source_)) + sizeof(target_));
}

Routing::~Routing() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.Routing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Routing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete target_;
}

void Routing::ArenaDtor(void* object) {
  Routing* _this = reinterpret_cast< Routing* >(object);
  (void)_this;
}
void Routing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Routing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Routing& Routing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Routing_packets_2eproto.base);
  return *internal_default_instance();
}


void Routing::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.Routing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.Actor source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Actor target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Routing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.Routing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::source(this), target, stream);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.Routing)
  return target;
}

size_t Routing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.Routing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.Actor source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .ai.inworld.packets.Actor target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Routing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.Routing)
  GOOGLE_DCHECK_NE(&from, this);
  const Routing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Routing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.Routing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.Routing)
    MergeFrom(*source);
  }
}

void Routing::MergeFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.Routing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    _internal_mutable_source()->::ai::inworld::packets::Actor::MergeFrom(from._internal_source());
  }
  if (from.has_target()) {
    _internal_mutable_target()->::ai::inworld::packets::Actor::MergeFrom(from._internal_target());
  }
}

void Routing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Routing::CopyFrom(const Routing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.Routing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routing::IsInitialized() const {
  return true;
}

void Routing::InternalSwap(Routing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Routing, target_)
      + sizeof(Routing::target_)
      - PROTOBUF_FIELD_OFFSET(Routing, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Routing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PacketId::_Internal {
 public:
};

PacketId::PacketId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.PacketId)
}
PacketId::PacketId(const PacketId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packet_id().empty()) {
    packet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packet_id(), 
      GetArena());
  }
  utterance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_utterance_id().empty()) {
    utterance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_utterance_id(), 
      GetArena());
  }
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_correlation_id().empty()) {
    correlation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_correlation_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.PacketId)
}

void PacketId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PacketId_packets_2eproto.base);
  packet_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utterance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PacketId::~PacketId() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.PacketId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packet_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  utterance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketId::ArenaDtor(void* object) {
  PacketId* _this = reinterpret_cast< PacketId* >(object);
  (void)_this;
}
void PacketId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PacketId& PacketId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PacketId_packets_2eproto.base);
  return *internal_default_instance();
}


void PacketId::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.PacketId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packet_id_.ClearToEmpty();
  utterance_id_.ClearToEmpty();
  interaction_id_.ClearToEmpty();
  correlation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_packet_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.packet_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_utterance_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.utterance_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string correlation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.PacketId.correlation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.PacketId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packet_id = 1;
  if (this->packet_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packet_id().data(), static_cast<int>(this->_internal_packet_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.packet_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packet_id(), target);
  }

  // string utterance_id = 2;
  if (this->utterance_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_utterance_id().data(), static_cast<int>(this->_internal_utterance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.utterance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_utterance_id(), target);
  }

  // string interaction_id = 3;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.interaction_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_interaction_id(), target);
  }

  // string correlation_id = 4;
  if (this->correlation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.PacketId.correlation_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.PacketId)
  return target;
}

size_t PacketId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.PacketId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packet_id = 1;
  if (this->packet_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packet_id());
  }

  // string utterance_id = 2;
  if (this->utterance_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_utterance_id());
  }

  // string interaction_id = 3;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string correlation_id = 4;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.PacketId)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.PacketId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.PacketId)
    MergeFrom(*source);
  }
}

void PacketId::MergeFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.PacketId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packet_id().size() > 0) {
    _internal_set_packet_id(from._internal_packet_id());
  }
  if (from.utterance_id().size() > 0) {
    _internal_set_utterance_id(from._internal_utterance_id());
  }
  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
  if (from.correlation_id().size() > 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
}

void PacketId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketId::CopyFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketId::IsInitialized() const {
  return true;
}

void PacketId::InternalSwap(PacketId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packet_id_.Swap(&other->packet_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  utterance_id_.Swap(&other->utterance_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  correlation_id_.Swap(&other->correlation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InworldPacket::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const InworldPacket* msg);
  static const ::ai::inworld::packets::Routing& routing(const InworldPacket* msg);
  static const ::ai::inworld::packets::PacketId& packet_id(const InworldPacket* msg);
  static const ::ai::inworld::packets::TextEvent& text(const InworldPacket* msg);
  static const ::ai::inworld::packets::ControlEvent& control(const InworldPacket* msg);
  static const ::ai::inworld::packets::AudioChunk& audio_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::CustomEvent& custom(const InworldPacket* msg);
  static const ::ai::inworld::packets::CancelResponsesEvent& cancelresponses(const InworldPacket* msg);
  static const ::ai::inworld::packets::EmotionEvent& emotion(const InworldPacket* msg);
  static const ::ai::inworld::packets::DataChunk& data_chunk(const InworldPacket* msg);
  static const ::ai::inworld::packets::ActionEvent& action(const InworldPacket* msg);
  static const ::ai::inworld::packets::MutationEvent& mutation(const InworldPacket* msg);
  static const ::ai::inworld::packets::LoadSceneOutputEvent& load_scene_output(const InworldPacket* msg);
  static const ::ai::inworld::packets::DebugInfoEvent& debug_info(const InworldPacket* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
InworldPacket::_Internal::timestamp(const InworldPacket* msg) {
  return *msg->timestamp_;
}
const ::ai::inworld::packets::Routing&
InworldPacket::_Internal::routing(const InworldPacket* msg) {
  return *msg->routing_;
}
const ::ai::inworld::packets::PacketId&
InworldPacket::_Internal::packet_id(const InworldPacket* msg) {
  return *msg->packet_id_;
}
const ::ai::inworld::packets::TextEvent&
InworldPacket::_Internal::text(const InworldPacket* msg) {
  return *msg->packet_.text_;
}
const ::ai::inworld::packets::ControlEvent&
InworldPacket::_Internal::control(const InworldPacket* msg) {
  return *msg->packet_.control_;
}
const ::ai::inworld::packets::AudioChunk&
InworldPacket::_Internal::audio_chunk(const InworldPacket* msg) {
  return *msg->packet_.audio_chunk_;
}
const ::ai::inworld::packets::CustomEvent&
InworldPacket::_Internal::custom(const InworldPacket* msg) {
  return *msg->packet_.custom_;
}
const ::ai::inworld::packets::CancelResponsesEvent&
InworldPacket::_Internal::cancelresponses(const InworldPacket* msg) {
  return *msg->packet_.cancelresponses_;
}
const ::ai::inworld::packets::EmotionEvent&
InworldPacket::_Internal::emotion(const InworldPacket* msg) {
  return *msg->packet_.emotion_;
}
const ::ai::inworld::packets::DataChunk&
InworldPacket::_Internal::data_chunk(const InworldPacket* msg) {
  return *msg->packet_.data_chunk_;
}
const ::ai::inworld::packets::ActionEvent&
InworldPacket::_Internal::action(const InworldPacket* msg) {
  return *msg->packet_.action_;
}
const ::ai::inworld::packets::MutationEvent&
InworldPacket::_Internal::mutation(const InworldPacket* msg) {
  return *msg->packet_.mutation_;
}
const ::ai::inworld::packets::LoadSceneOutputEvent&
InworldPacket::_Internal::load_scene_output(const InworldPacket* msg) {
  return *msg->packet_.load_scene_output_;
}
const ::ai::inworld::packets::DebugInfoEvent&
InworldPacket::_Internal::debug_info(const InworldPacket* msg) {
  return *msg->packet_.debug_info_;
}
void InworldPacket::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void InworldPacket::set_allocated_text(::ai::inworld::packets::TextEvent* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    packet_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.text)
}
void InworldPacket::set_allocated_control(::ai::inworld::packets::ControlEvent* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    set_has_control();
    packet_.control_ = control;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.control)
}
void InworldPacket::set_allocated_audio_chunk(::ai::inworld::packets::AudioChunk* audio_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (audio_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_chunk);
    if (message_arena != submessage_arena) {
      audio_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_chunk, submessage_arena);
    }
    set_has_audio_chunk();
    packet_.audio_chunk_ = audio_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.audio_chunk)
}
void InworldPacket::set_allocated_custom(::ai::inworld::packets::CustomEvent* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    packet_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.custom)
}
void InworldPacket::set_allocated_cancelresponses(::ai::inworld::packets::CancelResponsesEvent* cancelresponses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (cancelresponses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancelresponses);
    if (message_arena != submessage_arena) {
      cancelresponses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelresponses, submessage_arena);
    }
    set_has_cancelresponses();
    packet_.cancelresponses_ = cancelresponses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.cancelResponses)
}
void InworldPacket::set_allocated_emotion(::ai::inworld::packets::EmotionEvent* emotion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (emotion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emotion);
    if (message_arena != submessage_arena) {
      emotion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotion, submessage_arena);
    }
    set_has_emotion();
    packet_.emotion_ = emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.emotion)
}
void InworldPacket::set_allocated_data_chunk(::ai::inworld::packets::DataChunk* data_chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (data_chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_chunk);
    if (message_arena != submessage_arena) {
      data_chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_chunk, submessage_arena);
    }
    set_has_data_chunk();
    packet_.data_chunk_ = data_chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.data_chunk)
}
void InworldPacket::set_allocated_action(::ai::inworld::packets::ActionEvent* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    packet_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.action)
}
void InworldPacket::set_allocated_mutation(::ai::inworld::packets::MutationEvent* mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mutation);
    if (message_arena != submessage_arena) {
      mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation, submessage_arena);
    }
    set_has_mutation();
    packet_.mutation_ = mutation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.mutation)
}
void InworldPacket::set_allocated_load_scene_output(::ai::inworld::packets::LoadSceneOutputEvent* load_scene_output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (load_scene_output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_scene_output);
    if (message_arena != submessage_arena) {
      load_scene_output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_scene_output, submessage_arena);
    }
    set_has_load_scene_output();
    packet_.load_scene_output_ = load_scene_output;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.load_scene_output)
}
void InworldPacket::set_allocated_debug_info(::ai::inworld::packets::DebugInfoEvent* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(debug_info);
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    set_has_debug_info();
    packet_.debug_info_ = debug_info;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.InworldPacket.debug_info)
}
InworldPacket::InworldPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.InworldPacket)
}
InworldPacket::InworldPacket(const InworldPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_routing()) {
    routing_ = new ::ai::inworld::packets::Routing(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  if (from._internal_has_packet_id()) {
    packet_id_ = new ::ai::inworld::packets::PacketId(*from.packet_id_);
  } else {
    packet_id_ = nullptr;
  }
  clear_has_packet();
  switch (from.packet_case()) {
    case kText: {
      _internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(from._internal_text());
      break;
    }
    case kControl: {
      _internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(from._internal_control());
      break;
    }
    case kAudioChunk: {
      _internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(from._internal_audio_chunk());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(from._internal_data_chunk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::ai::inworld::packets::ActionEvent::MergeFrom(from._internal_action());
      break;
    }
    case kMutation: {
      _internal_mutable_mutation()->::ai::inworld::packets::MutationEvent::MergeFrom(from._internal_mutation());
      break;
    }
    case kLoadSceneOutput: {
      _internal_mutable_load_scene_output()->::ai::inworld::packets::LoadSceneOutputEvent::MergeFrom(from._internal_load_scene_output());
      break;
    }
    case kDebugInfo: {
      _internal_mutable_debug_info()->::ai::inworld::packets::DebugInfoEvent::MergeFrom(from._internal_debug_info());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.InworldPacket)
}

void InworldPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InworldPacket_packets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&packet_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(packet_id_));
  clear_has_packet();
}

InworldPacket::~InworldPacket() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.InworldPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InworldPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete routing_;
  if (this != internal_default_instance()) delete packet_id_;
  if (has_packet()) {
    clear_packet();
  }
}

void InworldPacket::ArenaDtor(void* object) {
  InworldPacket* _this = reinterpret_cast< InworldPacket* >(object);
  (void)_this;
}
void InworldPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InworldPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InworldPacket& InworldPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InworldPacket_packets_2eproto.base);
  return *internal_default_instance();
}


void InworldPacket::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.InworldPacket)
  switch (packet_case()) {
    case kText: {
      if (GetArena() == nullptr) {
        delete packet_.text_;
      }
      break;
    }
    case kControl: {
      if (GetArena() == nullptr) {
        delete packet_.control_;
      }
      break;
    }
    case kAudioChunk: {
      if (GetArena() == nullptr) {
        delete packet_.audio_chunk_;
      }
      break;
    }
    case kCustom: {
      if (GetArena() == nullptr) {
        delete packet_.custom_;
      }
      break;
    }
    case kCancelResponses: {
      if (GetArena() == nullptr) {
        delete packet_.cancelresponses_;
      }
      break;
    }
    case kEmotion: {
      if (GetArena() == nullptr) {
        delete packet_.emotion_;
      }
      break;
    }
    case kDataChunk: {
      if (GetArena() == nullptr) {
        delete packet_.data_chunk_;
      }
      break;
    }
    case kAction: {
      if (GetArena() == nullptr) {
        delete packet_.action_;
      }
      break;
    }
    case kMutation: {
      if (GetArena() == nullptr) {
        delete packet_.mutation_;
      }
      break;
    }
    case kLoadSceneOutput: {
      if (GetArena() == nullptr) {
        delete packet_.load_scene_output_;
      }
      break;
    }
    case kDebugInfo: {
      if (GetArena() == nullptr) {
        delete packet_.debug_info_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void InworldPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.InworldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && routing_ != nullptr) {
    delete routing_;
  }
  routing_ = nullptr;
  if (GetArena() == nullptr && packet_id_ != nullptr) {
    delete packet_id_;
  }
  packet_id_ = nullptr;
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InworldPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ControlEvent control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Routing routing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.CustomEvent custom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.PacketId packet_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelresponses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent emotion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk data_chunk = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ActionEvent action = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.MutationEvent mutation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_scene_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InworldPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.InworldPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .ai.inworld.packets.TextEvent text = 2;
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::text(this), target, stream);
  }

  // .ai.inworld.packets.ControlEvent control = 3;
  if (_internal_has_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::control(this), target, stream);
  }

  // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
  if (_internal_has_audio_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::audio_chunk(this), target, stream);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->has_routing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::routing(this), target, stream);
  }

  // .ai.inworld.packets.CustomEvent custom = 8;
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::custom(this), target, stream);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->has_packet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::packet_id(this), target, stream);
  }

  // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
  if (_internal_has_cancelresponses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cancelresponses(this), target, stream);
  }

  // .ai.inworld.packets.EmotionEvent emotion = 11;
  if (_internal_has_emotion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::emotion(this), target, stream);
  }

  // .ai.inworld.packets.DataChunk data_chunk = 12;
  if (_internal_has_data_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::data_chunk(this), target, stream);
  }

  // .ai.inworld.packets.ActionEvent action = 13;
  if (_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::action(this), target, stream);
  }

  // .ai.inworld.packets.MutationEvent mutation = 15;
  if (_internal_has_mutation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::mutation(this), target, stream);
  }

  // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16;
  if (_internal_has_load_scene_output()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::load_scene_output(this), target, stream);
  }

  // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
  if (_internal_has_debug_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::debug_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.InworldPacket)
  return target;
}

size_t InworldPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.InworldPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .ai.inworld.packets.Routing routing = 6;
  if (this->has_routing()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_);
  }

  // .ai.inworld.packets.PacketId packet_id = 9;
  if (this->has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_id_);
  }

  switch (packet_case()) {
    // .ai.inworld.packets.TextEvent text = 2;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.text_);
      break;
    }
    // .ai.inworld.packets.ControlEvent control = 3;
    case kControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.control_);
      break;
    }
    // .ai.inworld.packets.AudioChunk audio_chunk = 4 [deprecated = true];
    case kAudioChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.audio_chunk_);
      break;
    }
    // .ai.inworld.packets.CustomEvent custom = 8;
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.custom_);
      break;
    }
    // .ai.inworld.packets.CancelResponsesEvent cancelResponses = 10 [deprecated = true];
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.cancelresponses_);
      break;
    }
    // .ai.inworld.packets.EmotionEvent emotion = 11;
    case kEmotion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.emotion_);
      break;
    }
    // .ai.inworld.packets.DataChunk data_chunk = 12;
    case kDataChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.data_chunk_);
      break;
    }
    // .ai.inworld.packets.ActionEvent action = 13;
    case kAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.action_);
      break;
    }
    // .ai.inworld.packets.MutationEvent mutation = 15;
    case kMutation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.mutation_);
      break;
    }
    // .ai.inworld.packets.LoadSceneOutputEvent load_scene_output = 16;
    case kLoadSceneOutput: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.load_scene_output_);
      break;
    }
    // .ai.inworld.packets.DebugInfoEvent debug_info = 18;
    case kDebugInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.debug_info_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InworldPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.InworldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const InworldPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InworldPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.InworldPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.InworldPacket)
    MergeFrom(*source);
  }
}

void InworldPacket::MergeFrom(const InworldPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.InworldPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_routing()) {
    _internal_mutable_routing()->::ai::inworld::packets::Routing::MergeFrom(from._internal_routing());
  }
  if (from.has_packet_id()) {
    _internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(from._internal_packet_id());
  }
  switch (from.packet_case()) {
    case kText: {
      _internal_mutable_text()->::ai::inworld::packets::TextEvent::MergeFrom(from._internal_text());
      break;
    }
    case kControl: {
      _internal_mutable_control()->::ai::inworld::packets::ControlEvent::MergeFrom(from._internal_control());
      break;
    }
    case kAudioChunk: {
      _internal_mutable_audio_chunk()->::ai::inworld::packets::AudioChunk::MergeFrom(from._internal_audio_chunk());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::ai::inworld::packets::CustomEvent::MergeFrom(from._internal_custom());
      break;
    }
    case kCancelResponses: {
      _internal_mutable_cancelresponses()->::ai::inworld::packets::CancelResponsesEvent::MergeFrom(from._internal_cancelresponses());
      break;
    }
    case kEmotion: {
      _internal_mutable_emotion()->::ai::inworld::packets::EmotionEvent::MergeFrom(from._internal_emotion());
      break;
    }
    case kDataChunk: {
      _internal_mutable_data_chunk()->::ai::inworld::packets::DataChunk::MergeFrom(from._internal_data_chunk());
      break;
    }
    case kAction: {
      _internal_mutable_action()->::ai::inworld::packets::ActionEvent::MergeFrom(from._internal_action());
      break;
    }
    case kMutation: {
      _internal_mutable_mutation()->::ai::inworld::packets::MutationEvent::MergeFrom(from._internal_mutation());
      break;
    }
    case kLoadSceneOutput: {
      _internal_mutable_load_scene_output()->::ai::inworld::packets::LoadSceneOutputEvent::MergeFrom(from._internal_load_scene_output());
      break;
    }
    case kDebugInfo: {
      _internal_mutable_debug_info()->::ai::inworld::packets::DebugInfoEvent::MergeFrom(from._internal_debug_info());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void InworldPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.InworldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InworldPacket::CopyFrom(const InworldPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.InworldPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InworldPacket::IsInitialized() const {
  return true;
}

void InworldPacket::InternalSwap(InworldPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InworldPacket, packet_id_)
      + sizeof(InworldPacket::packet_id_)
      - PROTOBUF_FIELD_OFFSET(InworldPacket, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InworldPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextEvent_ModelInfo::_Internal {
 public:
};

TextEvent_ModelInfo::TextEvent_ModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.TextEvent.ModelInfo)
}
TextEvent_ModelInfo::TextEvent_ModelInfo(const TextEvent_ModelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service().empty()) {
    service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service(), 
      GetArena());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.TextEvent.ModelInfo)
}

void TextEvent_ModelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextEvent_ModelInfo_packets_2eproto.base);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextEvent_ModelInfo::~TextEvent_ModelInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.TextEvent.ModelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextEvent_ModelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextEvent_ModelInfo::ArenaDtor(void* object) {
  TextEvent_ModelInfo* _this = reinterpret_cast< TextEvent_ModelInfo* >(object);
  (void)_this;
}
void TextEvent_ModelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEvent_ModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextEvent_ModelInfo& TextEvent_ModelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextEvent_ModelInfo_packets_2eproto.base);
  return *internal_default_instance();
}


void TextEvent_ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.TextEvent.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmpty();
  model_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEvent_ModelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.TextEvent.ModelInfo.service"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.TextEvent.ModelInfo.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextEvent_ModelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.TextEvent.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.ModelInfo.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.ModelInfo.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.TextEvent.ModelInfo)
  return target;
}

size_t TextEvent_ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.TextEvent.ModelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextEvent_ModelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TextEvent_ModelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextEvent_ModelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.TextEvent.ModelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.TextEvent.ModelInfo)
    MergeFrom(*source);
  }
}

void TextEvent_ModelInfo::MergeFrom(const TextEvent_ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {
    _internal_set_service(from._internal_service());
  }
  if (from.model().size() > 0) {
    _internal_set_model(from._internal_model());
  }
}

void TextEvent_ModelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextEvent_ModelInfo::CopyFrom(const TextEvent_ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.TextEvent.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent_ModelInfo::IsInitialized() const {
  return true;
}

void TextEvent_ModelInfo::InternalSwap(TextEvent_ModelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEvent_ModelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TextEvent::_Internal {
 public:
  static const ::ai::inworld::packets::TextEvent_ModelInfo& model_info(const TextEvent* msg);
};

const ::ai::inworld::packets::TextEvent_ModelInfo&
TextEvent::_Internal::model_info(const TextEvent* msg) {
  return *msg->model_info_;
}
TextEvent::TextEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.TextEvent)
}
TextEvent::TextEvent(const TextEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_model_info()) {
    model_info_ = new ::ai::inworld::packets::TextEvent_ModelInfo(*from.model_info_);
  } else {
    model_info_ = nullptr;
  }
  ::memcpy(&source_type_, &from.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(final_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.TextEvent)
}

void TextEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextEvent_packets_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&model_info_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&model_info_)) + sizeof(final_));
}

TextEvent::~TextEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.TextEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_info_;
}

void TextEvent::ArenaDtor(void* object) {
  TextEvent* _this = reinterpret_cast< TextEvent* >(object);
  (void)_this;
}
void TextEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextEvent& TextEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void TextEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.TextEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty();
  if (GetArena() == nullptr && model_info_ != nullptr) {
    delete model_info_;
  }
  model_info_ = nullptr;
  ::memset(&source_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_) -
      reinterpret_cast<char*>(&source_type_)) + sizeof(final_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.TextEvent.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::ai::inworld::packets::TextEvent_SourceType>(val));
        } else goto handle_unusual;
        continue;
      // bool final = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.TextEvent.ModelInfo model_info = 4 [(.ai.inworld.options.field_mode) = HIDDEN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.TextEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.TextEvent.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source_type(), target);
  }

  // bool final = 3;
  if (this->final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_final(), target);
  }

  // .ai.inworld.packets.TextEvent.ModelInfo model_info = 4 [(.ai.inworld.options.field_mode) = HIDDEN];
  if (this->has_model_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.TextEvent)
  return target;
}

size_t TextEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.TextEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .ai.inworld.packets.TextEvent.ModelInfo model_info = 4 [(.ai.inworld.options.field_mode) = HIDDEN];
  if (this->has_model_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_info_);
  }

  // .ai.inworld.packets.TextEvent.SourceType source_type = 2;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  // bool final = 3;
  if (this->final() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.TextEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TextEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.TextEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.TextEvent)
    MergeFrom(*source);
  }
}

void TextEvent::MergeFrom(const TextEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.TextEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.has_model_info()) {
    _internal_mutable_model_info()->::ai::inworld::packets::TextEvent_ModelInfo::MergeFrom(from._internal_model_info());
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (from.final() != 0) {
    _internal_set_final(from._internal_final());
  }
}

void TextEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.TextEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextEvent::CopyFrom(const TextEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.TextEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextEvent::IsInitialized() const {
  return true;
}

void TextEvent::InternalSwap(TextEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextEvent, final_)
      + sizeof(TextEvent::final_)
      - PROTOBUF_FIELD_OFFSET(TextEvent, model_info_)>(
          reinterpret_cast<char*>(&model_info_),
          reinterpret_cast<char*>(&other->model_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ControlEvent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& payload(const ControlEvent* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ControlEvent::_Internal::payload(const ControlEvent* msg) {
  return *msg->payload_;
}
void ControlEvent::clear_payload() {
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
ControlEvent::ControlEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ControlEvent)
}
ControlEvent::ControlEvent(const ControlEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ControlEvent)
}

void ControlEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlEvent_packets_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&payload_)) + sizeof(action_));
}

ControlEvent::~ControlEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ControlEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
}

void ControlEvent::ArenaDtor(void* object) {
  ControlEvent* _this = reinterpret_cast< ControlEvent* >(object);
  (void)_this;
}
void ControlEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlEvent& ControlEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void ControlEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ControlEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.ControlEvent.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::ai::inworld::packets::ControlEvent_Action>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.ControlEvent.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ControlEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ControlEvent.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Struct payload = 3;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payload(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ControlEvent)
  return target;
}

size_t ControlEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ControlEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Struct payload = 3;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .ai.inworld.packets.ControlEvent.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ControlEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ControlEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ControlEvent)
    MergeFrom(*source);
  }
}

void ControlEvent::MergeFrom(const ControlEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ControlEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_payload());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void ControlEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlEvent::CopyFrom(const ControlEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ControlEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlEvent::IsInitialized() const {
  return true;
}

void ControlEvent::InternalSwap(ControlEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlEvent, action_)
      + sizeof(ControlEvent::action_)
      - PROTOBUF_FIELD_OFFSET(ControlEvent, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chunk().empty()) {
    chunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chunk(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AudioChunk)
}

void AudioChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioChunk_packets_2eproto.base);
  chunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AudioChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioChunk::ArenaDtor(void* object) {
  AudioChunk* _this = reinterpret_cast< AudioChunk* >(object);
  (void)_this;
}
void AudioChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioChunk& AudioChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioChunk_packets_2eproto.base);
  return *internal_default_instance();
}


void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AudioChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AudioChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AudioChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (this->chunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.AudioChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.AudioChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.AudioChunk)
    MergeFrom(*source);
  }
}

void AudioChunk::MergeFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AudioChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk().size() > 0) {
    _internal_set_chunk(from._internal_chunk());
  }
}

void AudioChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunk_.Swap(&other->chunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomEvent_Parameter::_Internal {
 public:
};

CustomEvent_Parameter::CustomEvent_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent.Parameter)
}
CustomEvent_Parameter::CustomEvent_Parameter(const CustomEvent_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent.Parameter)
}

void CustomEvent_Parameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomEvent_Parameter_packets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomEvent_Parameter::~CustomEvent_Parameter() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent.Parameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomEvent_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomEvent_Parameter::ArenaDtor(void* object) {
  CustomEvent_Parameter* _this = reinterpret_cast< CustomEvent_Parameter* >(object);
  (void)_this;
}
void CustomEvent_Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomEvent_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomEvent_Parameter& CustomEvent_Parameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomEvent_Parameter_packets_2eproto.base);
  return *internal_default_instance();
}


void CustomEvent_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent_Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.Parameter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.Parameter.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomEvent_Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.Parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.Parameter.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent.Parameter)
  return target;
}

size_t CustomEvent_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomEvent_Parameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CustomEvent.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomEvent_Parameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomEvent_Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CustomEvent.Parameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CustomEvent.Parameter)
    MergeFrom(*source);
  }
}

void CustomEvent_Parameter::MergeFrom(const CustomEvent_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void CustomEvent_Parameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CustomEvent.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomEvent_Parameter::CopyFrom(const CustomEvent_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent_Parameter::IsInitialized() const {
  return true;
}

void CustomEvent_Parameter::InternalSwap(CustomEvent_Parameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent_Parameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomEvent::_Internal {
 public:
};

CustomEvent::CustomEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CustomEvent)
}
CustomEvent::CustomEvent(const CustomEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  playback_ = from.playback_;
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CustomEvent)
}

void CustomEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomEvent_packets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playback_ = 0;
}

CustomEvent::~CustomEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CustomEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomEvent::ArenaDtor(void* object) {
  CustomEvent* _this = reinterpret_cast< CustomEvent* >(object);
  (void)_this;
}
void CustomEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomEvent& CustomEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void CustomEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CustomEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  name_.ClearToEmpty();
  playback_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CustomEvent.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CustomEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CustomEvent.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CustomEvent)
  return target;
}

size_t CustomEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CustomEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.CustomEvent.Parameter parameters = 3;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playback());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CustomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CustomEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CustomEvent)
    MergeFrom(*source);
  }
}

void CustomEvent::MergeFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CustomEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.playback() != 0) {
    _internal_set_playback(from._internal_playback());
  }
}

void CustomEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomEvent::CopyFrom(const CustomEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CustomEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomEvent::IsInitialized() const {
  return true;
}

void CustomEvent::InternalSwap(CustomEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(playback_, other->playback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelResponsesEvent::_Internal {
 public:
};

CancelResponsesEvent::CancelResponsesEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  utterance_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponsesEvent)
}
CancelResponsesEvent::CancelResponsesEvent(const CancelResponsesEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utterance_id_(from.utterance_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponsesEvent)
}

void CancelResponsesEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelResponsesEvent_packets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelResponsesEvent::~CancelResponsesEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponsesEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelResponsesEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelResponsesEvent::ArenaDtor(void* object) {
  CancelResponsesEvent* _this = reinterpret_cast< CancelResponsesEvent* >(object);
  (void)_this;
}
void CancelResponsesEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponsesEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponsesEvent& CancelResponsesEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelResponsesEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void CancelResponsesEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponsesEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterance_id_.Clear();
  interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponsesEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponsesEvent.utterance_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponsesEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponsesEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponsesEvent.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponsesEvent)
  return target;
}

size_t CancelResponsesEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponsesEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(utterance_id_.size());
  for (int i = 0, n = utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponsesEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CancelResponsesEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponsesEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelResponsesEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CancelResponsesEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CancelResponsesEvent)
    MergeFrom(*source);
  }
}

void CancelResponsesEvent::MergeFrom(const CancelResponsesEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponsesEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utterance_id_.MergeFrom(from.utterance_id_);
  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
}

void CancelResponsesEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CancelResponsesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponsesEvent::CopyFrom(const CancelResponsesEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponsesEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponsesEvent::IsInitialized() const {
  return true;
}

void CancelResponsesEvent::InternalSwap(CancelResponsesEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  utterance_id_.InternalSwap(&other->utterance_id_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponsesEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EmotionEvent::_Internal {
 public:
};

EmotionEvent::EmotionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.EmotionEvent)
}
EmotionEvent::EmotionEvent(const EmotionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&joy_, &from.joy_,
    static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
    reinterpret_cast<char*>(&joy_)) + sizeof(strength_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.EmotionEvent)
}

void EmotionEvent::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&joy_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&joy_)) + sizeof(strength_));
}

EmotionEvent::~EmotionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.EmotionEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmotionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmotionEvent::ArenaDtor(void* object) {
  EmotionEvent* _this = reinterpret_cast< EmotionEvent* >(object);
  (void)_this;
}
void EmotionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmotionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmotionEvent& EmotionEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmotionEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void EmotionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.EmotionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strength_) -
      reinterpret_cast<char*>(&joy_)) + sizeof(strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmotionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float joy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          joy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float trust = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          trust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float surprise = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          surprise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::ai::inworld::packets::EmotionEvent_SpaffCode>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_strength(static_cast<::ai::inworld::packets::EmotionEvent_Strength>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmotionEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.EmotionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float joy = 1;
  if (!(this->joy() <= 0 && this->joy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_joy(), target);
  }

  // float fear = 2;
  if (!(this->fear() <= 0 && this->fear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fear(), target);
  }

  // float trust = 3;
  if (!(this->trust() <= 0 && this->trust() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_trust(), target);
  }

  // float surprise = 4;
  if (!(this->surprise() <= 0 && this->surprise() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_surprise(), target);
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_behavior(), target);
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.EmotionEvent)
  return target;
}

size_t EmotionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.EmotionEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float joy = 1;
  if (!(this->joy() <= 0 && this->joy() >= 0)) {
    total_size += 1 + 4;
  }

  // float fear = 2;
  if (!(this->fear() <= 0 && this->fear() >= 0)) {
    total_size += 1 + 4;
  }

  // float trust = 3;
  if (!(this->trust() <= 0 && this->trust() >= 0)) {
    total_size += 1 + 4;
  }

  // float surprise = 4;
  if (!(this->surprise() <= 0 && this->surprise() >= 0)) {
    total_size += 1 + 4;
  }

  // .ai.inworld.packets.EmotionEvent.SpaffCode behavior = 5;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // .ai.inworld.packets.EmotionEvent.Strength strength = 6;
  if (this->strength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_strength());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmotionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.EmotionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const EmotionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmotionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.EmotionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.EmotionEvent)
    MergeFrom(*source);
  }
}

void EmotionEvent::MergeFrom(const EmotionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.EmotionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.joy() <= 0 && from.joy() >= 0)) {
    _internal_set_joy(from._internal_joy());
  }
  if (!(from.fear() <= 0 && from.fear() >= 0)) {
    _internal_set_fear(from._internal_fear());
  }
  if (!(from.trust() <= 0 && from.trust() >= 0)) {
    _internal_set_trust(from._internal_trust());
  }
  if (!(from.surprise() <= 0 && from.surprise() >= 0)) {
    _internal_set_surprise(from._internal_surprise());
  }
  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  if (from.strength() != 0) {
    _internal_set_strength(from._internal_strength());
  }
}

void EmotionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.EmotionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmotionEvent::CopyFrom(const EmotionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.EmotionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmotionEvent::IsInitialized() const {
  return true;
}

void EmotionEvent::InternalSwap(EmotionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmotionEvent, strength_)
      + sizeof(EmotionEvent::strength_)
      - PROTOBUF_FIELD_OFFSET(EmotionEvent, joy_)>(
          reinterpret_cast<char*>(&joy_),
          reinterpret_cast<char*>(&other->joy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmotionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataChunk::_Internal {
 public:
};

DataChunk::DataChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_phoneme_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DataChunk)
}
DataChunk::DataChunk(const DataChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_phoneme_info_(from.additional_phoneme_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&audioformat_) -
    reinterpret_cast<char*>(&type_)) + sizeof(audioformat_));
  clear_has_data();
  switch (from.data_case()) {
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DataChunk)
}

void DataChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataChunk_packets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&audioformat_) -
      reinterpret_cast<char*>(&type_)) + sizeof(audioformat_));
  clear_has_data();
}

DataChunk::~DataChunk() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DataChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void DataChunk::ArenaDtor(void* object) {
  DataChunk* _this = reinterpret_cast< DataChunk* >(object);
  (void)_this;
}
void DataChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataChunk& DataChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataChunk_packets_2eproto.base);
  return *internal_default_instance();
}


void DataChunk::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DataChunk)
  switch (data_case()) {
    case kChunk: {
      data_.chunk_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kDurationMs: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void DataChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DataChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_phoneme_info_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audioformat_) -
      reinterpret_cast<char*>(&type_)) + sizeof(audioformat_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ai::inworld::packets::DataChunk_DataType>(val));
        } else goto handle_unusual;
        continue;
      // int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_duration_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_phoneme_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.DataChunk.AudioFormat audioFormat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_audioformat(static_cast<::ai::inworld::packets::DataChunk_AudioFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DataChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (_internal_has_chunk()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int64 duration_ms = 3;
  if (_internal_has_duration_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_ms(), target);
  }

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_phoneme_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_additional_phoneme_info(i), target, stream);
  }

  // .ai.inworld.packets.DataChunk.AudioFormat audioFormat = 5;
  if (this->audioformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_audioformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DataChunk)
  return target;
}

size_t DataChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DataChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.AdditionalPhonemeInfo additional_phoneme_info = 4;
  total_size += 1UL * this->_internal_additional_phoneme_info_size();
  for (const auto& msg : this->additional_phoneme_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ai.inworld.packets.DataChunk.DataType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .ai.inworld.packets.DataChunk.AudioFormat audioFormat = 5;
  if (this->audioformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audioformat());
  }

  switch (data_case()) {
    // bytes chunk = 1;
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk());
      break;
    }
    // int64 duration_ms = 3;
    case kDurationMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.DataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const DataChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.DataChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.DataChunk)
    MergeFrom(*source);
  }
}

void DataChunk::MergeFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DataChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_phoneme_info_.MergeFrom(from.additional_phoneme_info_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.audioformat() != 0) {
    _internal_set_audioformat(from._internal_audioformat());
  }
  switch (from.data_case()) {
    case kChunk: {
      _internal_set_chunk(from._internal_chunk());
      break;
    }
    case kDurationMs: {
      _internal_set_duration_ms(from._internal_duration_ms());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void DataChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataChunk::CopyFrom(const DataChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DataChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChunk::IsInitialized() const {
  return true;
}

void DataChunk::InternalSwap(DataChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  additional_phoneme_info_.InternalSwap(&other->additional_phoneme_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataChunk, audioformat_)
      + sizeof(DataChunk::audioformat_)
      - PROTOBUF_FIELD_OFFSET(DataChunk, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdditionalPhonemeInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& start_offset(const AdditionalPhonemeInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
AdditionalPhonemeInfo::_Internal::start_offset(const AdditionalPhonemeInfo* msg) {
  return *msg->start_offset_;
}
void AdditionalPhonemeInfo::clear_start_offset() {
  if (GetArena() == nullptr && start_offset_ != nullptr) {
    delete start_offset_;
  }
  start_offset_ = nullptr;
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}
AdditionalPhonemeInfo::AdditionalPhonemeInfo(const AdditionalPhonemeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phoneme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phoneme().empty()) {
    phoneme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phoneme(), 
      GetArena());
  }
  if (from._internal_has_start_offset()) {
    start_offset_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.start_offset_);
  } else {
    start_offset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.AdditionalPhonemeInfo)
}

void AdditionalPhonemeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalPhonemeInfo_packets_2eproto.base);
  phoneme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_offset_ = nullptr;
}

AdditionalPhonemeInfo::~AdditionalPhonemeInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.AdditionalPhonemeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalPhonemeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phoneme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_offset_;
}

void AdditionalPhonemeInfo::ArenaDtor(void* object) {
  AdditionalPhonemeInfo* _this = reinterpret_cast< AdditionalPhonemeInfo* >(object);
  (void)_this;
}
void AdditionalPhonemeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalPhonemeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalPhonemeInfo& AdditionalPhonemeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalPhonemeInfo_packets_2eproto.base);
  return *internal_default_instance();
}


void AdditionalPhonemeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.AdditionalPhonemeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phoneme_.ClearToEmpty();
  if (GetArena() == nullptr && start_offset_ != nullptr) {
    delete start_offset_;
  }
  start_offset_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalPhonemeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string phoneme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_phoneme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.AdditionalPhonemeInfo.phoneme"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration start_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalPhonemeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.AdditionalPhonemeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phoneme = 1;
  if (this->phoneme().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phoneme().data(), static_cast<int>(this->_internal_phoneme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.AdditionalPhonemeInfo.phoneme");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phoneme(), target);
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->has_start_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.AdditionalPhonemeInfo)
  return target;
}

size_t AdditionalPhonemeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.AdditionalPhonemeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phoneme = 1;
  if (this->phoneme().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phoneme());
  }

  // .google.protobuf.Duration start_offset = 2;
  if (this->has_start_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_offset_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalPhonemeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalPhonemeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalPhonemeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.AdditionalPhonemeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.AdditionalPhonemeInfo)
    MergeFrom(*source);
  }
}

void AdditionalPhonemeInfo::MergeFrom(const AdditionalPhonemeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phoneme().size() > 0) {
    _internal_set_phoneme(from._internal_phoneme());
  }
  if (from.has_start_offset()) {
    _internal_mutable_start_offset()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_start_offset());
  }
}

void AdditionalPhonemeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalPhonemeInfo::CopyFrom(const AdditionalPhonemeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.AdditionalPhonemeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalPhonemeInfo::IsInitialized() const {
  return true;
}

void AdditionalPhonemeInfo::InternalSwap(AdditionalPhonemeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phoneme_.Swap(&other->phoneme_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(start_offset_, other->start_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalPhonemeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActionEvent::_Internal {
 public:
  static const ::ai::inworld::packets::NarratedAction& narrated_action(const ActionEvent* msg);
};

const ::ai::inworld::packets::NarratedAction&
ActionEvent::_Internal::narrated_action(const ActionEvent* msg) {
  return *msg->action_.narrated_action_;
}
void ActionEvent::set_allocated_narrated_action(::ai::inworld::packets::NarratedAction* narrated_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_action();
  if (narrated_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(narrated_action);
    if (message_arena != submessage_arena) {
      narrated_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, narrated_action, submessage_arena);
    }
    set_has_narrated_action();
    action_.narrated_action_ = narrated_action;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.ActionEvent.narrated_action)
}
ActionEvent::ActionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ActionEvent)
}
ActionEvent::ActionEvent(const ActionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playback_ = from.playback_;
  clear_has_action();
  switch (from.action_case()) {
    case kNarratedAction: {
      _internal_mutable_narrated_action()->::ai::inworld::packets::NarratedAction::MergeFrom(from._internal_narrated_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ActionEvent)
}

void ActionEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionEvent_packets_2eproto.base);
  playback_ = 0;
  clear_has_action();
}

ActionEvent::~ActionEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ActionEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_action()) {
    clear_action();
  }
}

void ActionEvent::ArenaDtor(void* object) {
  ActionEvent* _this = reinterpret_cast< ActionEvent* >(object);
  (void)_this;
}
void ActionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionEvent& ActionEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void ActionEvent::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.ActionEvent)
  switch (action_case()) {
    case kNarratedAction: {
      if (GetArena() == nullptr) {
        delete action_.narrated_action_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ActionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playback_ = 0;
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.NarratedAction narrated_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_narrated_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.Playback playback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playback(static_cast<::ai::inworld::packets::Playback>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ActionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.NarratedAction narrated_action = 1;
  if (_internal_has_narrated_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::narrated_action(this), target, stream);
  }

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ActionEvent)
  return target;
}

size_t ActionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ActionEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.Playback playback = 2;
  if (this->playback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_playback());
  }

  switch (action_case()) {
    // .ai.inworld.packets.NarratedAction narrated_action = 1;
    case kNarratedAction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.narrated_action_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ActionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ActionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ActionEvent)
    MergeFrom(*source);
  }
}

void ActionEvent::MergeFrom(const ActionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ActionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playback() != 0) {
    _internal_set_playback(from._internal_playback());
  }
  switch (from.action_case()) {
    case kNarratedAction: {
      _internal_mutable_narrated_action()->::ai::inworld::packets::NarratedAction::MergeFrom(from._internal_narrated_action());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ActionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ActionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionEvent::CopyFrom(const ActionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ActionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionEvent::IsInitialized() const {
  return true;
}

void ActionEvent::InternalSwap(ActionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(playback_, other->playback_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NarratedAction::_Internal {
 public:
};

NarratedAction::NarratedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.NarratedAction)
}
NarratedAction::NarratedAction(const NarratedAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.NarratedAction)
}

void NarratedAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NarratedAction_packets_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NarratedAction::~NarratedAction() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.NarratedAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NarratedAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NarratedAction::ArenaDtor(void* object) {
  NarratedAction* _this = reinterpret_cast< NarratedAction* >(object);
  (void)_this;
}
void NarratedAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NarratedAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NarratedAction& NarratedAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NarratedAction_packets_2eproto.base);
  return *internal_default_instance();
}


void NarratedAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.NarratedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NarratedAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.NarratedAction.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NarratedAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.NarratedAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.NarratedAction.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.NarratedAction)
  return target;
}

size_t NarratedAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.NarratedAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NarratedAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.NarratedAction)
  GOOGLE_DCHECK_NE(&from, this);
  const NarratedAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NarratedAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.NarratedAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.NarratedAction)
    MergeFrom(*source);
  }
}

void NarratedAction::MergeFrom(const NarratedAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.NarratedAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void NarratedAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.NarratedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NarratedAction::CopyFrom(const NarratedAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.NarratedAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NarratedAction::IsInitialized() const {
  return true;
}

void NarratedAction::InternalSwap(NarratedAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NarratedAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelationInfo_RelationAttributes::_Internal {
 public:
};

RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RelationInfo.RelationAttributes)
}
RelationInfo_RelationAttributes::RelationInfo_RelationAttributes(const RelationInfo_RelationAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trust_, &from.trust_,
    static_cast<size_t>(reinterpret_cast<char*>(&attraction_) -
    reinterpret_cast<char*>(&trust_)) + sizeof(attraction_));
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RelationInfo.RelationAttributes)
}

void RelationInfo_RelationAttributes::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&trust_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&attraction_) -
      reinterpret_cast<char*>(&trust_)) + sizeof(attraction_));
}

RelationInfo_RelationAttributes::~RelationInfo_RelationAttributes() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RelationInfo.RelationAttributes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationInfo_RelationAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RelationInfo_RelationAttributes::ArenaDtor(void* object) {
  RelationInfo_RelationAttributes* _this = reinterpret_cast< RelationInfo_RelationAttributes* >(object);
  (void)_this;
}
void RelationInfo_RelationAttributes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationInfo_RelationAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationInfo_RelationAttributes& RelationInfo_RelationAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationInfo_RelationAttributes_packets_2eproto.base);
  return *internal_default_instance();
}


void RelationInfo_RelationAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trust_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attraction_) -
      reinterpret_cast<char*>(&trust_)) + sizeof(attraction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfo_RelationAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 trust = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trust_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 respect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          respect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 familiar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          familiar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flirtatious = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flirtatious_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          attraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationInfo_RelationAttributes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trust = 1;
  if (this->trust() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_trust(), target);
  }

  // int32 respect = 2;
  if (this->respect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_respect(), target);
  }

  // int32 familiar = 3;
  if (this->familiar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_familiar(), target);
  }

  // int32 flirtatious = 4;
  if (this->flirtatious() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flirtatious(), target);
  }

  // int32 attraction = 5;
  if (this->attraction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_attraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RelationInfo.RelationAttributes)
  return target;
}

size_t RelationInfo_RelationAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trust = 1;
  if (this->trust() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trust());
  }

  // int32 respect = 2;
  if (this->respect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_respect());
  }

  // int32 familiar = 3;
  if (this->familiar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_familiar());
  }

  // int32 flirtatious = 4;
  if (this->flirtatious() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flirtatious());
  }

  // int32 attraction = 5;
  if (this->attraction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attraction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationInfo_RelationAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationInfo_RelationAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationInfo_RelationAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.RelationInfo.RelationAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.RelationInfo.RelationAttributes)
    MergeFrom(*source);
  }
}

void RelationInfo_RelationAttributes::MergeFrom(const RelationInfo_RelationAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trust() != 0) {
    _internal_set_trust(from._internal_trust());
  }
  if (from.respect() != 0) {
    _internal_set_respect(from._internal_respect());
  }
  if (from.familiar() != 0) {
    _internal_set_familiar(from._internal_familiar());
  }
  if (from.flirtatious() != 0) {
    _internal_set_flirtatious(from._internal_flirtatious());
  }
  if (from.attraction() != 0) {
    _internal_set_attraction(from._internal_attraction());
  }
}

void RelationInfo_RelationAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationInfo_RelationAttributes::CopyFrom(const RelationInfo_RelationAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RelationInfo.RelationAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo_RelationAttributes::IsInitialized() const {
  return true;
}

void RelationInfo_RelationAttributes::InternalSwap(RelationInfo_RelationAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfo_RelationAttributes, attraction_)
      + sizeof(RelationInfo_RelationAttributes::attraction_)
      - PROTOBUF_FIELD_OFFSET(RelationInfo_RelationAttributes, trust_)>(
          reinterpret_cast<char*>(&trust_),
          reinterpret_cast<char*>(&other->trust_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfo_RelationAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RelationInfo::_Internal {
 public:
  static const ::ai::inworld::packets::RelationInfo_RelationAttributes& relation_state(const RelationInfo* msg);
  static const ::ai::inworld::packets::RelationInfo_RelationAttributes& relation_update(const RelationInfo* msg);
};

const ::ai::inworld::packets::RelationInfo_RelationAttributes&
RelationInfo::_Internal::relation_state(const RelationInfo* msg) {
  return *msg->relation_state_;
}
const ::ai::inworld::packets::RelationInfo_RelationAttributes&
RelationInfo::_Internal::relation_update(const RelationInfo* msg) {
  return *msg->relation_update_;
}
RelationInfo::RelationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RelationInfo)
}
RelationInfo::RelationInfo(const RelationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relation_state()) {
    relation_state_ = new ::ai::inworld::packets::RelationInfo_RelationAttributes(*from.relation_state_);
  } else {
    relation_state_ = nullptr;
  }
  if (from._internal_has_relation_update()) {
    relation_update_ = new ::ai::inworld::packets::RelationInfo_RelationAttributes(*from.relation_update_);
  } else {
    relation_update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RelationInfo)
}

void RelationInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelationInfo_packets_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&relation_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&relation_update_) -
      reinterpret_cast<char*>(&relation_state_)) + sizeof(relation_update_));
}

RelationInfo::~RelationInfo() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RelationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete relation_state_;
  if (this != internal_default_instance()) delete relation_update_;
}

void RelationInfo::ArenaDtor(void* object) {
  RelationInfo* _this = reinterpret_cast< RelationInfo* >(object);
  (void)_this;
}
void RelationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationInfo& RelationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationInfo_packets_2eproto.base);
  return *internal_default_instance();
}


void RelationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RelationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && relation_state_ != nullptr) {
    delete relation_state_;
  }
  relation_state_ = nullptr;
  if (GetArena() == nullptr && relation_update_ != nullptr) {
    delete relation_update_;
  }
  relation_update_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RelationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
  if (this->has_relation_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relation_state(this), target, stream);
  }

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
  if (this->has_relation_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relation_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RelationInfo)
  return target;
}

size_t RelationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RelationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_state = 1;
  if (this->has_relation_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_state_);
  }

  // .ai.inworld.packets.RelationInfo.RelationAttributes relation_update = 2;
  if (this->has_relation_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_update_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.RelationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.RelationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.RelationInfo)
    MergeFrom(*source);
  }
}

void RelationInfo::MergeFrom(const RelationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RelationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relation_state()) {
    _internal_mutable_relation_state()->::ai::inworld::packets::RelationInfo_RelationAttributes::MergeFrom(from._internal_relation_state());
  }
  if (from.has_relation_update()) {
    _internal_mutable_relation_update()->::ai::inworld::packets::RelationInfo_RelationAttributes::MergeFrom(from._internal_relation_update());
  }
}

void RelationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.RelationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationInfo::CopyFrom(const RelationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RelationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationInfo::IsInitialized() const {
  return true;
}

void RelationInfo::InternalSwap(RelationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationInfo, relation_update_)
      + sizeof(RelationInfo::relation_update_)
      - PROTOBUF_FIELD_OFFSET(RelationInfo, relation_state_)>(
          reinterpret_cast<char*>(&relation_state_),
          reinterpret_cast<char*>(&other->relation_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MutationEvent::_Internal {
 public:
  static const ::ai::inworld::packets::CancelResponses& cancel_responses(const MutationEvent* msg);
  static const ::ai::inworld::packets::RegenerateResponse& regenerate_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::ApplyResponse& apply_response(const MutationEvent* msg);
  static const ::ai::inworld::packets::LoadScene& load_scene(const MutationEvent* msg);
  static const ::ai::inworld::packets::ModifyExactResponse& modify_exact_response(const MutationEvent* msg);
};

const ::ai::inworld::packets::CancelResponses&
MutationEvent::_Internal::cancel_responses(const MutationEvent* msg) {
  return *msg->mutation_.cancel_responses_;
}
const ::ai::inworld::packets::RegenerateResponse&
MutationEvent::_Internal::regenerate_response(const MutationEvent* msg) {
  return *msg->mutation_.regenerate_response_;
}
const ::ai::inworld::packets::ApplyResponse&
MutationEvent::_Internal::apply_response(const MutationEvent* msg) {
  return *msg->mutation_.apply_response_;
}
const ::ai::inworld::packets::LoadScene&
MutationEvent::_Internal::load_scene(const MutationEvent* msg) {
  return *msg->mutation_.load_scene_;
}
const ::ai::inworld::packets::ModifyExactResponse&
MutationEvent::_Internal::modify_exact_response(const MutationEvent* msg) {
  return *msg->mutation_.modify_exact_response_;
}
void MutationEvent::set_allocated_cancel_responses(::ai::inworld::packets::CancelResponses* cancel_responses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (cancel_responses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_responses);
    if (message_arena != submessage_arena) {
      cancel_responses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_responses, submessage_arena);
    }
    set_has_cancel_responses();
    mutation_.cancel_responses_ = cancel_responses;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.cancel_responses)
}
void MutationEvent::set_allocated_regenerate_response(::ai::inworld::packets::RegenerateResponse* regenerate_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (regenerate_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regenerate_response);
    if (message_arena != submessage_arena) {
      regenerate_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regenerate_response, submessage_arena);
    }
    set_has_regenerate_response();
    mutation_.regenerate_response_ = regenerate_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.regenerate_response)
}
void MutationEvent::set_allocated_apply_response(::ai::inworld::packets::ApplyResponse* apply_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (apply_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apply_response);
    if (message_arena != submessage_arena) {
      apply_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_response, submessage_arena);
    }
    set_has_apply_response();
    mutation_.apply_response_ = apply_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.apply_response)
}
void MutationEvent::set_allocated_load_scene(::ai::inworld::packets::LoadScene* load_scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (load_scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_scene);
    if (message_arena != submessage_arena) {
      load_scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_scene, submessage_arena);
    }
    set_has_load_scene();
    mutation_.load_scene_ = load_scene;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.load_scene)
}
void MutationEvent::set_allocated_modify_exact_response(::ai::inworld::packets::ModifyExactResponse* modify_exact_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_mutation();
  if (modify_exact_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modify_exact_response);
    if (message_arena != submessage_arena) {
      modify_exact_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify_exact_response, submessage_arena);
    }
    set_has_modify_exact_response();
    mutation_.modify_exact_response_ = modify_exact_response;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.MutationEvent.modify_exact_response)
}
MutationEvent::MutationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.MutationEvent)
}
MutationEvent::MutationEvent(const MutationEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mutation();
  switch (from.mutation_case()) {
    case kCancelResponses: {
      _internal_mutable_cancel_responses()->::ai::inworld::packets::CancelResponses::MergeFrom(from._internal_cancel_responses());
      break;
    }
    case kRegenerateResponse: {
      _internal_mutable_regenerate_response()->::ai::inworld::packets::RegenerateResponse::MergeFrom(from._internal_regenerate_response());
      break;
    }
    case kApplyResponse: {
      _internal_mutable_apply_response()->::ai::inworld::packets::ApplyResponse::MergeFrom(from._internal_apply_response());
      break;
    }
    case kLoadScene: {
      _internal_mutable_load_scene()->::ai::inworld::packets::LoadScene::MergeFrom(from._internal_load_scene());
      break;
    }
    case kModifyExactResponse: {
      _internal_mutable_modify_exact_response()->::ai::inworld::packets::ModifyExactResponse::MergeFrom(from._internal_modify_exact_response());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.MutationEvent)
}

void MutationEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutationEvent_packets_2eproto.base);
  clear_has_mutation();
}

MutationEvent::~MutationEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.MutationEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutationEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_mutation()) {
    clear_mutation();
  }
}

void MutationEvent::ArenaDtor(void* object) {
  MutationEvent* _this = reinterpret_cast< MutationEvent* >(object);
  (void)_this;
}
void MutationEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutationEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutationEvent& MutationEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutationEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void MutationEvent::clear_mutation() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.MutationEvent)
  switch (mutation_case()) {
    case kCancelResponses: {
      if (GetArena() == nullptr) {
        delete mutation_.cancel_responses_;
      }
      break;
    }
    case kRegenerateResponse: {
      if (GetArena() == nullptr) {
        delete mutation_.regenerate_response_;
      }
      break;
    }
    case kApplyResponse: {
      if (GetArena() == nullptr) {
        delete mutation_.apply_response_;
      }
      break;
    }
    case kLoadScene: {
      if (GetArena() == nullptr) {
        delete mutation_.load_scene_;
      }
      break;
    }
    case kModifyExactResponse: {
      if (GetArena() == nullptr) {
        delete mutation_.modify_exact_response_;
      }
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MUTATION_NOT_SET;
}


void MutationEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.MutationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mutation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutationEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.CancelResponses cancel_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_responses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_regenerate_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ApplyResponse apply_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.LoadScene load_scene = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_scene(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_modify_exact_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutationEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.MutationEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.CancelResponses cancel_responses = 1;
  if (_internal_has_cancel_responses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cancel_responses(this), target, stream);
  }

  // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
  if (_internal_has_regenerate_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::regenerate_response(this), target, stream);
  }

  // .ai.inworld.packets.ApplyResponse apply_response = 3;
  if (_internal_has_apply_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::apply_response(this), target, stream);
  }

  // .ai.inworld.packets.LoadScene load_scene = 4;
  if (_internal_has_load_scene()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::load_scene(this), target, stream);
  }

  // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
  if (_internal_has_modify_exact_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::modify_exact_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.MutationEvent)
  return target;
}

size_t MutationEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.MutationEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mutation_case()) {
    // .ai.inworld.packets.CancelResponses cancel_responses = 1;
    case kCancelResponses: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.cancel_responses_);
      break;
    }
    // .ai.inworld.packets.RegenerateResponse regenerate_response = 2;
    case kRegenerateResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.regenerate_response_);
      break;
    }
    // .ai.inworld.packets.ApplyResponse apply_response = 3;
    case kApplyResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.apply_response_);
      break;
    }
    // .ai.inworld.packets.LoadScene load_scene = 4;
    case kLoadScene: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.load_scene_);
      break;
    }
    // .ai.inworld.packets.ModifyExactResponse modify_exact_response = 5;
    case kModifyExactResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mutation_.modify_exact_response_);
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutationEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.MutationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MutationEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutationEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.MutationEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.MutationEvent)
    MergeFrom(*source);
  }
}

void MutationEvent::MergeFrom(const MutationEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.MutationEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mutation_case()) {
    case kCancelResponses: {
      _internal_mutable_cancel_responses()->::ai::inworld::packets::CancelResponses::MergeFrom(from._internal_cancel_responses());
      break;
    }
    case kRegenerateResponse: {
      _internal_mutable_regenerate_response()->::ai::inworld::packets::RegenerateResponse::MergeFrom(from._internal_regenerate_response());
      break;
    }
    case kApplyResponse: {
      _internal_mutable_apply_response()->::ai::inworld::packets::ApplyResponse::MergeFrom(from._internal_apply_response());
      break;
    }
    case kLoadScene: {
      _internal_mutable_load_scene()->::ai::inworld::packets::LoadScene::MergeFrom(from._internal_load_scene());
      break;
    }
    case kModifyExactResponse: {
      _internal_mutable_modify_exact_response()->::ai::inworld::packets::ModifyExactResponse::MergeFrom(from._internal_modify_exact_response());
      break;
    }
    case MUTATION_NOT_SET: {
      break;
    }
  }
}

void MutationEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.MutationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutationEvent::CopyFrom(const MutationEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.MutationEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutationEvent::IsInitialized() const {
  return true;
}

void MutationEvent::InternalSwap(MutationEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(mutation_, other->mutation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutationEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelResponses::_Internal {
 public:
};

CancelResponses::CancelResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  utterance_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.CancelResponses)
}
CancelResponses::CancelResponses(const CancelResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      utterance_id_(from.utterance_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.CancelResponses)
}

void CancelResponses::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelResponses_packets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelResponses::~CancelResponses() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.CancelResponses)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelResponses::ArenaDtor(void* object) {
  CancelResponses* _this = reinterpret_cast< CancelResponses* >(object);
  (void)_this;
}
void CancelResponses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelResponses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelResponses& CancelResponses::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelResponses_packets_2eproto.base);
  return *internal_default_instance();
}


void CancelResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.CancelResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utterance_id_.Clear();
  interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponses.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string utterance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_utterance_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.CancelResponses.utterance_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelResponses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.CancelResponses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponses.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // repeated string utterance_id = 2;
  for (int i = 0, n = this->_internal_utterance_id_size(); i < n; i++) {
    const auto& s = this->_internal_utterance_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.CancelResponses.utterance_id");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.CancelResponses)
  return target;
}

size_t CancelResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.CancelResponses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string utterance_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(utterance_id_.size());
  for (int i = 0, n = utterance_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      utterance_id_.Get(i));
  }

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelResponses::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.CancelResponses)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelResponses* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelResponses>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.CancelResponses)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.CancelResponses)
    MergeFrom(*source);
  }
}

void CancelResponses::MergeFrom(const CancelResponses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.CancelResponses)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utterance_id_.MergeFrom(from.utterance_id_);
  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
}

void CancelResponses::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.CancelResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelResponses::CopyFrom(const CancelResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.CancelResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponses::IsInitialized() const {
  return true;
}

void CancelResponses::InternalSwap(CancelResponses* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  utterance_id_.InternalSwap(&other->utterance_id_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponses::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RegenerateResponse::_Internal {
 public:
};

RegenerateResponse::RegenerateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.RegenerateResponse)
}
RegenerateResponse::RegenerateResponse(const RegenerateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.RegenerateResponse)
}

void RegenerateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegenerateResponse_packets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegenerateResponse::~RegenerateResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.RegenerateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegenerateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegenerateResponse::ArenaDtor(void* object) {
  RegenerateResponse* _this = reinterpret_cast< RegenerateResponse* >(object);
  (void)_this;
}
void RegenerateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegenerateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegenerateResponse& RegenerateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegenerateResponse_packets_2eproto.base);
  return *internal_default_instance();
}


void RegenerateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.RegenerateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interaction_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegenerateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.RegenerateResponse.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegenerateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.RegenerateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.RegenerateResponse.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.RegenerateResponse)
  return target;
}

size_t RegenerateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.RegenerateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegenerateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.RegenerateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegenerateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegenerateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.RegenerateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.RegenerateResponse)
    MergeFrom(*source);
  }
}

void RegenerateResponse::MergeFrom(const RegenerateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.RegenerateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
}

void RegenerateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.RegenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegenerateResponse::CopyFrom(const RegenerateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.RegenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegenerateResponse::IsInitialized() const {
  return true;
}

void RegenerateResponse::InternalSwap(RegenerateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegenerateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ApplyResponse::_Internal {
 public:
  static const ::ai::inworld::packets::PacketId& packet_id(const ApplyResponse* msg);
};

const ::ai::inworld::packets::PacketId&
ApplyResponse::_Internal::packet_id(const ApplyResponse* msg) {
  return *msg->packet_id_;
}
ApplyResponse::ApplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ApplyResponse)
}
ApplyResponse::ApplyResponse(const ApplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_id()) {
    packet_id_ = new ::ai::inworld::packets::PacketId(*from.packet_id_);
  } else {
    packet_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ApplyResponse)
}

void ApplyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApplyResponse_packets_2eproto.base);
  packet_id_ = nullptr;
}

ApplyResponse::~ApplyResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ApplyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete packet_id_;
}

void ApplyResponse::ArenaDtor(void* object) {
  ApplyResponse* _this = reinterpret_cast< ApplyResponse* >(object);
  (void)_this;
}
void ApplyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplyResponse& ApplyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplyResponse_packets_2eproto.base);
  return *internal_default_instance();
}


void ApplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ApplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && packet_id_ != nullptr) {
    delete packet_id_;
  }
  packet_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.PacketId packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ApplyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId packet_id = 1;
  if (this->has_packet_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::packet_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ApplyResponse)
  return target;
}

size_t ApplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ApplyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ai.inworld.packets.PacketId packet_id = 1;
  if (this->has_packet_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ApplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ApplyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ApplyResponse)
    MergeFrom(*source);
  }
}

void ApplyResponse::MergeFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ApplyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packet_id()) {
    _internal_mutable_packet_id()->::ai::inworld::packets::PacketId::MergeFrom(from._internal_packet_id());
  }
}

void ApplyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ApplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyResponse::CopyFrom(const ApplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ApplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyResponse::IsInitialized() const {
  return true;
}

void ApplyResponse::InternalSwap(ApplyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(packet_id_, other->packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadScene::_Internal {
 public:
};

LoadScene::LoadScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadScene)
}
LoadScene::LoadScene(const LoadScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadScene)
}

void LoadScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadScene_packets_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadScene::~LoadScene() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadScene::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadScene::ArenaDtor(void* object) {
  LoadScene* _this = reinterpret_cast< LoadScene* >(object);
  (void)_this;
}
void LoadScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadScene& LoadScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadScene_packets_2eproto.base);
  return *internal_default_instance();
}


void LoadScene::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadScene.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadScene.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadScene)
  return target;
}

size_t LoadScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadScene)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadScene)
    MergeFrom(*source);
  }
}

void LoadScene::MergeFrom(const LoadScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void LoadScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadScene::CopyFrom(const LoadScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadScene::IsInitialized() const {
  return true;
}

void LoadScene::InternalSwap(LoadScene* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ModifyExactResponse::_Internal {
 public:
};

ModifyExactResponse::ModifyExactResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.ModifyExactResponse)
}
ModifyExactResponse::ModifyExactResponse(const ModifyExactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interaction_id().empty()) {
    interaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interaction_id(), 
      GetArena());
  }
  exact_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exact_text().empty()) {
    exact_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exact_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.ModifyExactResponse)
}

void ModifyExactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyExactResponse_packets_2eproto.base);
  interaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exact_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModifyExactResponse::~ModifyExactResponse() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.ModifyExactResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyExactResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  interaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exact_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModifyExactResponse::ArenaDtor(void* object) {
  ModifyExactResponse* _this = reinterpret_cast< ModifyExactResponse* >(object);
  (void)_this;
}
void ModifyExactResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyExactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyExactResponse& ModifyExactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyExactResponse_packets_2eproto.base);
  return *internal_default_instance();
}


void ModifyExactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.ModifyExactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interaction_id_.ClearToEmpty();
  exact_text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyExactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string interaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_interaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.ModifyExactResponse.interaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exact_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exact_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.ModifyExactResponse.exact_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyExactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.ModifyExactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interaction_id().data(), static_cast<int>(this->_internal_interaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ModifyExactResponse.interaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interaction_id(), target);
  }

  // string exact_text = 2;
  if (this->exact_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exact_text().data(), static_cast<int>(this->_internal_exact_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.ModifyExactResponse.exact_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exact_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.ModifyExactResponse)
  return target;
}

size_t ModifyExactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.ModifyExactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string interaction_id = 1;
  if (this->interaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interaction_id());
  }

  // string exact_text = 2;
  if (this->exact_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exact_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyExactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.ModifyExactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyExactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyExactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.ModifyExactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.ModifyExactResponse)
    MergeFrom(*source);
  }
}

void ModifyExactResponse::MergeFrom(const ModifyExactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.ModifyExactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interaction_id().size() > 0) {
    _internal_set_interaction_id(from._internal_interaction_id());
  }
  if (from.exact_text().size() > 0) {
    _internal_set_exact_text(from._internal_exact_text());
  }
}

void ModifyExactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.ModifyExactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyExactResponse::CopyFrom(const ModifyExactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.ModifyExactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyExactResponse::IsInitialized() const {
  return true;
}

void ModifyExactResponse::InternalSwap(ModifyExactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interaction_id_.Swap(&other->interaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exact_text_.Swap(&other->exact_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyExactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneOutputEvent_Agent::_Internal {
 public:
};

LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
}
LoadSceneOutputEvent_Agent::LoadSceneOutputEvent_Agent(const LoadSceneOutputEvent_Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent_id(), 
      GetArena());
  }
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brain_name().empty()) {
    brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brain_name(), 
      GetArena());
  }
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_given_name().empty()) {
    given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_given_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
}

void LoadSceneOutputEvent_Agent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneOutputEvent_Agent_packets_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoadSceneOutputEvent_Agent::~LoadSceneOutputEvent_Agent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneOutputEvent_Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brain_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  given_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoadSceneOutputEvent_Agent::ArenaDtor(void* object) {
  LoadSceneOutputEvent_Agent* _this = reinterpret_cast< LoadSceneOutputEvent_Agent* >(object);
  (void)_this;
}
void LoadSceneOutputEvent_Agent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneOutputEvent_Agent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneOutputEvent_Agent& LoadSceneOutputEvent_Agent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneOutputEvent_Agent_packets_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneOutputEvent_Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_id_.ClearToEmpty();
  brain_name_.ClearToEmpty();
  given_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneOutputEvent_Agent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brain_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_brain_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.brain_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string given_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_given_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.packets.LoadSceneOutputEvent.Agent.given_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneOutputEvent_Agent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brain_name().data(), static_cast<int>(this->_internal_brain_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.brain_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_brain_name(), target);
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_given_name().data(), static_cast<int>(this->_internal_given_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.packets.LoadSceneOutputEvent.Agent.given_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_given_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  return target;
}

size_t LoadSceneOutputEvent_Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_id = 1;
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string brain_name = 2;
  if (this->brain_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brain_name());
  }

  // string given_name = 3;
  if (this->given_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_given_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneOutputEvent_Agent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneOutputEvent_Agent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneOutputEvent_Agent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadSceneOutputEvent.Agent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadSceneOutputEvent.Agent)
    MergeFrom(*source);
  }
}

void LoadSceneOutputEvent_Agent::MergeFrom(const LoadSceneOutputEvent_Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.brain_name().size() > 0) {
    _internal_set_brain_name(from._internal_brain_name());
  }
  if (from.given_name().size() > 0) {
    _internal_set_given_name(from._internal_given_name());
  }
}

void LoadSceneOutputEvent_Agent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneOutputEvent_Agent::CopyFrom(const LoadSceneOutputEvent_Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneOutputEvent_Agent::IsInitialized() const {
  return true;
}

void LoadSceneOutputEvent_Agent::InternalSwap(LoadSceneOutputEvent_Agent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  brain_name_.Swap(&other->brain_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  given_name_.Swap(&other->given_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneOutputEvent_Agent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoadSceneOutputEvent::_Internal {
 public:
};

LoadSceneOutputEvent::LoadSceneOutputEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.LoadSceneOutputEvent)
}
LoadSceneOutputEvent::LoadSceneOutputEvent(const LoadSceneOutputEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.LoadSceneOutputEvent)
}

void LoadSceneOutputEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadSceneOutputEvent_packets_2eproto.base);
}

LoadSceneOutputEvent::~LoadSceneOutputEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.LoadSceneOutputEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadSceneOutputEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadSceneOutputEvent::ArenaDtor(void* object) {
  LoadSceneOutputEvent* _this = reinterpret_cast< LoadSceneOutputEvent* >(object);
  (void)_this;
}
void LoadSceneOutputEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadSceneOutputEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadSceneOutputEvent& LoadSceneOutputEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadSceneOutputEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void LoadSceneOutputEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.LoadSceneOutputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadSceneOutputEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadSceneOutputEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.LoadSceneOutputEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.LoadSceneOutputEvent)
  return target;
}

size_t LoadSceneOutputEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.LoadSceneOutputEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ai.inworld.packets.LoadSceneOutputEvent.Agent agents = 1;
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadSceneOutputEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadSceneOutputEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadSceneOutputEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.LoadSceneOutputEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.LoadSceneOutputEvent)
    MergeFrom(*source);
  }
}

void LoadSceneOutputEvent::MergeFrom(const LoadSceneOutputEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
}

void LoadSceneOutputEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadSceneOutputEvent::CopyFrom(const LoadSceneOutputEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.LoadSceneOutputEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadSceneOutputEvent::IsInitialized() const {
  return true;
}

void LoadSceneOutputEvent::InternalSwap(LoadSceneOutputEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadSceneOutputEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DebugInfoEvent::_Internal {
 public:
  static const ::ai::inworld::packets::RelationInfo& relation(const DebugInfoEvent* msg);
};

const ::ai::inworld::packets::RelationInfo&
DebugInfoEvent::_Internal::relation(const DebugInfoEvent* msg) {
  return *msg->info_.relation_;
}
void DebugInfoEvent::set_allocated_relation(::ai::inworld::packets::RelationInfo* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_info();
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relation);
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    set_has_relation();
    info_.relation_ = relation;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.packets.DebugInfoEvent.relation)
}
DebugInfoEvent::DebugInfoEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.packets.DebugInfoEvent)
}
DebugInfoEvent::DebugInfoEvent(const DebugInfoEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_info();
  switch (from.info_case()) {
    case kRelation: {
      _internal_mutable_relation()->::ai::inworld::packets::RelationInfo::MergeFrom(from._internal_relation());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.packets.DebugInfoEvent)
}

void DebugInfoEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugInfoEvent_packets_2eproto.base);
  clear_has_info();
}

DebugInfoEvent::~DebugInfoEvent() {
  // @@protoc_insertion_point(destructor:ai.inworld.packets.DebugInfoEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugInfoEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_info()) {
    clear_info();
  }
}

void DebugInfoEvent::ArenaDtor(void* object) {
  DebugInfoEvent* _this = reinterpret_cast< DebugInfoEvent* >(object);
  (void)_this;
}
void DebugInfoEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugInfoEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugInfoEvent& DebugInfoEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugInfoEvent_packets_2eproto.base);
  return *internal_default_instance();
}


void DebugInfoEvent::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.packets.DebugInfoEvent)
  switch (info_case()) {
    case kRelation: {
      if (GetArena() == nullptr) {
        delete info_.relation_;
      }
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void DebugInfoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.packets.DebugInfoEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_info();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugInfoEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ai.inworld.packets.RelationInfo relation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugInfoEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.packets.DebugInfoEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ai.inworld.packets.RelationInfo relation = 1;
  if (_internal_has_relation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::relation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.packets.DebugInfoEvent)
  return target;
}

size_t DebugInfoEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.packets.DebugInfoEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (info_case()) {
    // .ai.inworld.packets.RelationInfo relation = 1;
    case kRelation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_.relation_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugInfoEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.packets.DebugInfoEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugInfoEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugInfoEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.packets.DebugInfoEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.packets.DebugInfoEvent)
    MergeFrom(*source);
  }
}

void DebugInfoEvent::MergeFrom(const DebugInfoEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.packets.DebugInfoEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.info_case()) {
    case kRelation: {
      _internal_mutable_relation()->::ai::inworld::packets::RelationInfo::MergeFrom(from._internal_relation());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
}

void DebugInfoEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.packets.DebugInfoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugInfoEvent::CopyFrom(const DebugInfoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.packets.DebugInfoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugInfoEvent::IsInitialized() const {
  return true;
}

void DebugInfoEvent::InternalSwap(DebugInfoEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(info_, other->info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugInfoEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packets
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Actor* Arena::CreateMaybeMessage< ::ai::inworld::packets::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Actor >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::Routing* Arena::CreateMaybeMessage< ::ai::inworld::packets::Routing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::Routing >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::PacketId* Arena::CreateMaybeMessage< ::ai::inworld::packets::PacketId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::PacketId >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::InworldPacket* Arena::CreateMaybeMessage< ::ai::inworld::packets::InworldPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::InworldPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::TextEvent_ModelInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::TextEvent_ModelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::TextEvent_ModelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::TextEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::TextEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::TextEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ControlEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::ControlEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ControlEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AudioChunk* Arena::CreateMaybeMessage< ::ai::inworld::packets::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent_Parameter* Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CustomEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::CustomEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CustomEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponsesEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponsesEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponsesEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::EmotionEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::EmotionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::EmotionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DataChunk* Arena::CreateMaybeMessage< ::ai::inworld::packets::DataChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DataChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::AdditionalPhonemeInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::AdditionalPhonemeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::AdditionalPhonemeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ActionEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::ActionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ActionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::NarratedAction* Arena::CreateMaybeMessage< ::ai::inworld::packets::NarratedAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::NarratedAction >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RelationInfo_RelationAttributes* Arena::CreateMaybeMessage< ::ai::inworld::packets::RelationInfo_RelationAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RelationInfo_RelationAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RelationInfo* Arena::CreateMaybeMessage< ::ai::inworld::packets::RelationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RelationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::MutationEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::MutationEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::MutationEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::CancelResponses* Arena::CreateMaybeMessage< ::ai::inworld::packets::CancelResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::CancelResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::RegenerateResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::RegenerateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::RegenerateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ApplyResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::ApplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ApplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadScene* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadScene >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::ModifyExactResponse* Arena::CreateMaybeMessage< ::ai::inworld::packets::ModifyExactResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::ModifyExactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadSceneOutputEvent_Agent* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadSceneOutputEvent_Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadSceneOutputEvent_Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::LoadSceneOutputEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::LoadSceneOutputEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::LoadSceneOutputEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::packets::DebugInfoEvent* Arena::CreateMaybeMessage< ::ai::inworld::packets::DebugInfoEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::packets::DebugInfoEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
