// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world-engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_2dengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_2dengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "packets.pb.h"
#include "voices.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_2dengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_2dengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2dengine_2eproto;
namespace ai {
namespace inworld {
namespace engine {
class AccessToken;
class AccessTokenDefaultTypeInternal;
extern AccessTokenDefaultTypeInternal _AccessToken_default_instance_;
class ActorRelations;
class ActorRelationsDefaultTypeInternal;
extern ActorRelationsDefaultTypeInternal _ActorRelations_default_instance_;
class ActorRelations_Relation;
class ActorRelations_RelationDefaultTypeInternal;
extern ActorRelations_RelationDefaultTypeInternal _ActorRelations_Relation_default_instance_;
class AudioSettings;
class AudioSettingsDefaultTypeInternal;
extern AudioSettingsDefaultTypeInternal _AudioSettings_default_instance_;
class CapabilitiesRequest;
class CapabilitiesRequestDefaultTypeInternal;
extern CapabilitiesRequestDefaultTypeInternal _CapabilitiesRequest_default_instance_;
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class CreateWorldRequest;
class CreateWorldRequestDefaultTypeInternal;
extern CreateWorldRequestDefaultTypeInternal _CreateWorldRequest_default_instance_;
class CreateWorldRequest_ClientRequest;
class CreateWorldRequest_ClientRequestDefaultTypeInternal;
extern CreateWorldRequest_ClientRequestDefaultTypeInternal _CreateWorldRequest_ClientRequest_default_instance_;
class CreateWorldRequest_CreateAgentRequest;
class CreateWorldRequest_CreateAgentRequestDefaultTypeInternal;
extern CreateWorldRequest_CreateAgentRequestDefaultTypeInternal _CreateWorldRequest_CreateAgentRequest_default_instance_;
class CreateWorldResponse;
class CreateWorldResponseDefaultTypeInternal;
extern CreateWorldResponseDefaultTypeInternal _CreateWorldResponse_default_instance_;
class CreateWorldResponse_Agent;
class CreateWorldResponse_AgentDefaultTypeInternal;
extern CreateWorldResponse_AgentDefaultTypeInternal _CreateWorldResponse_Agent_default_instance_;
class GenerateTokenRequest;
class GenerateTokenRequestDefaultTypeInternal;
extern GenerateTokenRequestDefaultTypeInternal _GenerateTokenRequest_default_instance_;
class ListBaseVoicesRequest;
class ListBaseVoicesRequestDefaultTypeInternal;
extern ListBaseVoicesRequestDefaultTypeInternal _ListBaseVoicesRequest_default_instance_;
class ListBaseVoicesResponce;
class ListBaseVoicesResponceDefaultTypeInternal;
extern ListBaseVoicesResponceDefaultTypeInternal _ListBaseVoicesResponce_default_instance_;
class ListBaseVoicesResponce_BaseVoice;
class ListBaseVoicesResponce_BaseVoiceDefaultTypeInternal;
extern ListBaseVoicesResponce_BaseVoiceDefaultTypeInternal _ListBaseVoicesResponce_BaseVoice_default_instance_;
class LoadSceneRequest;
class LoadSceneRequestDefaultTypeInternal;
extern LoadSceneRequestDefaultTypeInternal _LoadSceneRequest_default_instance_;
class LoadSceneResponse;
class LoadSceneResponseDefaultTypeInternal;
extern LoadSceneResponseDefaultTypeInternal _LoadSceneResponse_default_instance_;
class LoadSceneResponse_Agent;
class LoadSceneResponse_AgentDefaultTypeInternal;
extern LoadSceneResponse_AgentDefaultTypeInternal _LoadSceneResponse_Agent_default_instance_;
class LoadSceneResponse_Agent_CharacterAssets;
class LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal;
extern LoadSceneResponse_Agent_CharacterAssetsDefaultTypeInternal _LoadSceneResponse_Agent_CharacterAssets_default_instance_;
class LogErrorRequest;
class LogErrorRequestDefaultTypeInternal;
extern LogErrorRequestDefaultTypeInternal _LogErrorRequest_default_instance_;
class PreviousDialog;
class PreviousDialogDefaultTypeInternal;
extern PreviousDialogDefaultTypeInternal _PreviousDialog_default_instance_;
class PreviousDialog_Phrase;
class PreviousDialog_PhraseDefaultTypeInternal;
extern PreviousDialog_PhraseDefaultTypeInternal _PreviousDialog_Phrase_default_instance_;
class PreviousState;
class PreviousStateDefaultTypeInternal;
extern PreviousStateDefaultTypeInternal _PreviousState_default_instance_;
class PreviousState_StateHolder;
class PreviousState_StateHolderDefaultTypeInternal;
extern PreviousState_StateHolderDefaultTypeInternal _PreviousState_StateHolder_default_instance_;
class SessionContinuation;
class SessionContinuationDefaultTypeInternal;
extern SessionContinuationDefaultTypeInternal _SessionContinuation_default_instance_;
class SessionContinuation_ContinuationInfo;
class SessionContinuation_ContinuationInfoDefaultTypeInternal;
extern SessionContinuation_ContinuationInfoDefaultTypeInternal _SessionContinuation_ContinuationInfo_default_instance_;
class UserRequest;
class UserRequestDefaultTypeInternal;
extern UserRequestDefaultTypeInternal _UserRequest_default_instance_;
class UserSettings;
class UserSettingsDefaultTypeInternal;
extern UserSettingsDefaultTypeInternal _UserSettings_default_instance_;
class UserSettings_PlayerProfile;
class UserSettings_PlayerProfileDefaultTypeInternal;
extern UserSettings_PlayerProfileDefaultTypeInternal _UserSettings_PlayerProfile_default_instance_;
class UserSettings_PlayerProfile_PlayerField;
class UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal;
extern UserSettings_PlayerProfile_PlayerFieldDefaultTypeInternal _UserSettings_PlayerProfile_PlayerField_default_instance_;
class VoicePreviewRequest;
class VoicePreviewRequestDefaultTypeInternal;
extern VoicePreviewRequestDefaultTypeInternal _VoicePreviewRequest_default_instance_;
class VoicePreviewResponse;
class VoicePreviewResponseDefaultTypeInternal;
extern VoicePreviewResponseDefaultTypeInternal _VoicePreviewResponse_default_instance_;
}  // namespace engine
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::engine::AccessToken* Arena::CreateMaybeMessage<::ai::inworld::engine::AccessToken>(Arena*);
template<> ::ai::inworld::engine::ActorRelations* Arena::CreateMaybeMessage<::ai::inworld::engine::ActorRelations>(Arena*);
template<> ::ai::inworld::engine::ActorRelations_Relation* Arena::CreateMaybeMessage<::ai::inworld::engine::ActorRelations_Relation>(Arena*);
template<> ::ai::inworld::engine::AudioSettings* Arena::CreateMaybeMessage<::ai::inworld::engine::AudioSettings>(Arena*);
template<> ::ai::inworld::engine::CapabilitiesRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(Arena*);
template<> ::ai::inworld::engine::ClientRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::ClientRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldRequest_ClientRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest_ClientRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest>(Arena*);
template<> ::ai::inworld::engine::CreateWorldResponse* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldResponse>(Arena*);
template<> ::ai::inworld::engine::CreateWorldResponse_Agent* Arena::CreateMaybeMessage<::ai::inworld::engine::CreateWorldResponse_Agent>(Arena*);
template<> ::ai::inworld::engine::GenerateTokenRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::GenerateTokenRequest>(Arena*);
template<> ::ai::inworld::engine::ListBaseVoicesRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::ListBaseVoicesRequest>(Arena*);
template<> ::ai::inworld::engine::ListBaseVoicesResponce* Arena::CreateMaybeMessage<::ai::inworld::engine::ListBaseVoicesResponce>(Arena*);
template<> ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* Arena::CreateMaybeMessage<::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice>(Arena*);
template<> ::ai::inworld::engine::LoadSceneRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneRequest>(Arena*);
template<> ::ai::inworld::engine::LoadSceneResponse* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse>(Arena*);
template<> ::ai::inworld::engine::LoadSceneResponse_Agent* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent>(Arena*);
template<> ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* Arena::CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets>(Arena*);
template<> ::ai::inworld::engine::LogErrorRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::LogErrorRequest>(Arena*);
template<> ::ai::inworld::engine::PreviousDialog* Arena::CreateMaybeMessage<::ai::inworld::engine::PreviousDialog>(Arena*);
template<> ::ai::inworld::engine::PreviousDialog_Phrase* Arena::CreateMaybeMessage<::ai::inworld::engine::PreviousDialog_Phrase>(Arena*);
template<> ::ai::inworld::engine::PreviousState* Arena::CreateMaybeMessage<::ai::inworld::engine::PreviousState>(Arena*);
template<> ::ai::inworld::engine::PreviousState_StateHolder* Arena::CreateMaybeMessage<::ai::inworld::engine::PreviousState_StateHolder>(Arena*);
template<> ::ai::inworld::engine::SessionContinuation* Arena::CreateMaybeMessage<::ai::inworld::engine::SessionContinuation>(Arena*);
template<> ::ai::inworld::engine::SessionContinuation_ContinuationInfo* Arena::CreateMaybeMessage<::ai::inworld::engine::SessionContinuation_ContinuationInfo>(Arena*);
template<> ::ai::inworld::engine::UserRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::UserRequest>(Arena*);
template<> ::ai::inworld::engine::UserSettings* Arena::CreateMaybeMessage<::ai::inworld::engine::UserSettings>(Arena*);
template<> ::ai::inworld::engine::UserSettings_PlayerProfile* Arena::CreateMaybeMessage<::ai::inworld::engine::UserSettings_PlayerProfile>(Arena*);
template<> ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* Arena::CreateMaybeMessage<::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField>(Arena*);
template<> ::ai::inworld::engine::VoicePreviewRequest* Arena::CreateMaybeMessage<::ai::inworld::engine::VoicePreviewRequest>(Arena*);
template<> ::ai::inworld::engine::VoicePreviewResponse* Arena::CreateMaybeMessage<::ai::inworld::engine::VoicePreviewResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace engine {

enum PreviousDialog_DialogParticipant : int {
  PreviousDialog_DialogParticipant_UNKNOWN = 0,
  PreviousDialog_DialogParticipant_PLAYER = 1,
  PreviousDialog_DialogParticipant_CHARACTER = 2,
  PreviousDialog_DialogParticipant_PreviousDialog_DialogParticipant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PreviousDialog_DialogParticipant_PreviousDialog_DialogParticipant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PreviousDialog_DialogParticipant_IsValid(int value);
constexpr PreviousDialog_DialogParticipant PreviousDialog_DialogParticipant_DialogParticipant_MIN = PreviousDialog_DialogParticipant_UNKNOWN;
constexpr PreviousDialog_DialogParticipant PreviousDialog_DialogParticipant_DialogParticipant_MAX = PreviousDialog_DialogParticipant_CHARACTER;
constexpr int PreviousDialog_DialogParticipant_DialogParticipant_ARRAYSIZE = PreviousDialog_DialogParticipant_DialogParticipant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PreviousDialog_DialogParticipant_descriptor();
template<typename T>
inline const std::string& PreviousDialog_DialogParticipant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PreviousDialog_DialogParticipant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PreviousDialog_DialogParticipant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PreviousDialog_DialogParticipant_descriptor(), enum_t_value);
}
inline bool PreviousDialog_DialogParticipant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PreviousDialog_DialogParticipant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PreviousDialog_DialogParticipant>(
    PreviousDialog_DialogParticipant_descriptor(), name, value);
}
enum VoicePreset : int {
  VOICE_PRESET_UNSPECIFIED = 0,
  VOICE_PRESET_FEMALE_1 = 1,
  VOICE_PRESET_FEMALE_2 = 2,
  VOICE_PRESET_FEMALE_3 = 3,
  VOICE_PRESET_FEMALE_4 = 4,
  VOICE_PRESET_FEMALE_5 = 5,
  VOICE_PRESET_MALE_1 = 6,
  VOICE_PRESET_MALE_2 = 7,
  VOICE_PRESET_MALE_3 = 8,
  VOICE_PRESET_MALE_4 = 9,
  VOICE_PRESET_MALE_5 = 10,
  INWORLD_VOICE_PRESET_MALE_1 = 11,
  INWORLD_VOICE_PRESET_MALE_2 = 12,
  INWORLD_VOICE_PRESET_FEMALE_1 = 13,
  INWORLD_VOICE_PRESET_FEMALE_2 = 14,
  INWORLD_VOICE_PRESET_MALE_3 = 15,
  INWORLD_VOICE_PRESET_MALE_4 = 16,
  INWORLD_VOICE_PRESET_MALE_5 = 17,
  INWORLD_VOICE_PRESET_FEMALE_3 = 18,
  INWORLD_VOICE_PRESET_FEMALE_4 = 19,
  INWORLD_VOICE_PRESET_ROBOT_MALE_1 = 20,
  INWORLD_VOICE_PRESET_ROBOT_MALE_2 = 21,
  INWORLD_VOICE_PRESET_ROBOT_MALE_3 = 22,
  INWORLD_VOICE_PRESET_ROBOT_MALE_4 = 23,
  INWORLD_VOICE_PRESET_ROBOT_MALE_5 = 24,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_1 = 25,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_2 = 26,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_3 = 27,
  INWORLD_VOICE_PRESET_ROBOT_FEMALE_4 = 28,
  INWORLD_VOICE_PRESET_SPIKE = 29,
  INWORLD_VOICE_PRESET_TWILIGHT = 30,
  INWORLD_VOICE_PRESET_FLUTTERSHY = 31,
  INWORLD_VOICE_PRESET_ROBOT_SPIKE = 32,
  INWORLD_VOICE_PRESET_ROBOT_TWILIGHT = 33,
  INWORLD_VOICE_PRESET_ROBOT_FLUTTERSHY = 34,
  VoicePreset_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VoicePreset_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VoicePreset_IsValid(int value);
constexpr VoicePreset VoicePreset_MIN = VOICE_PRESET_UNSPECIFIED;
constexpr VoicePreset VoicePreset_MAX = INWORLD_VOICE_PRESET_ROBOT_FLUTTERSHY;
constexpr int VoicePreset_ARRAYSIZE = VoicePreset_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoicePreset_descriptor();
template<typename T>
inline const std::string& VoicePreset_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoicePreset>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoicePreset_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoicePreset_descriptor(), enum_t_value);
}
inline bool VoicePreset_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoicePreset* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoicePreset>(
    VoicePreset_descriptor(), name, value);
}
// ===================================================================

class CapabilitiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CapabilitiesRequest) */ {
 public:
  inline CapabilitiesRequest() : CapabilitiesRequest(nullptr) {}
  virtual ~CapabilitiesRequest();

  CapabilitiesRequest(const CapabilitiesRequest& from);
  CapabilitiesRequest(CapabilitiesRequest&& from) noexcept
    : CapabilitiesRequest() {
    *this = ::std::move(from);
  }

  inline CapabilitiesRequest& operator=(const CapabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesRequest& operator=(CapabilitiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CapabilitiesRequest& default_instance();

  static inline const CapabilitiesRequest* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesRequest*>(
               &_CapabilitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CapabilitiesRequest& a, CapabilitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapabilitiesRequest* New() const final {
    return CreateMaybeMessage<CapabilitiesRequest>(nullptr);
  }

  CapabilitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapabilitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CapabilitiesRequest& from);
  void MergeFrom(const CapabilitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CapabilitiesRequest";
  }
  protected:
  explicit CapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kTextFieldNumber = 2,
    kGesturesFieldNumber = 3,
    kInterruptionsFieldNumber = 4,
    kTriggersFieldNumber = 5,
    kEmotionsFieldNumber = 6,
    kTurnBasedSttFieldNumber = 8,
    kEmotionStreamingFieldNumber = 9,
    kSilenceEventsFieldNumber = 10,
    kPhonemeInfoFieldNumber = 11,
    kContinuationFieldNumber = 12,
    kSessionCancellationFieldNumber = 13,
    kNarratedActionsFieldNumber = 14,
    kRegenerateResponseFieldNumber = 15,
    kLoadSceneInSessionFieldNumber = 16,
    kRelationsFieldNumber = 17,
    kDebugInfoFieldNumber = 18,
    kTtsMp3FieldNumber = 19,
  };
  // bool audio = 1;
  void clear_audio();
  bool audio() const;
  void set_audio(bool value);
  private:
  bool _internal_audio() const;
  void _internal_set_audio(bool value);
  public:

  // bool text = 2;
  void clear_text();
  bool text() const;
  void set_text(bool value);
  private:
  bool _internal_text() const;
  void _internal_set_text(bool value);
  public:

  // bool gestures = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_gestures();
  PROTOBUF_DEPRECATED bool gestures() const;
  PROTOBUF_DEPRECATED void set_gestures(bool value);
  private:
  bool _internal_gestures() const;
  void _internal_set_gestures(bool value);
  public:

  // bool interruptions = 4;
  void clear_interruptions();
  bool interruptions() const;
  void set_interruptions(bool value);
  private:
  bool _internal_interruptions() const;
  void _internal_set_interruptions(bool value);
  public:

  // bool triggers = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_triggers();
  PROTOBUF_DEPRECATED bool triggers() const;
  PROTOBUF_DEPRECATED void set_triggers(bool value);
  private:
  bool _internal_triggers() const;
  void _internal_set_triggers(bool value);
  public:

  // bool emotions = 6;
  void clear_emotions();
  bool emotions() const;
  void set_emotions(bool value);
  private:
  bool _internal_emotions() const;
  void _internal_set_emotions(bool value);
  public:

  // bool turn_based_stt = 8;
  void clear_turn_based_stt();
  bool turn_based_stt() const;
  void set_turn_based_stt(bool value);
  private:
  bool _internal_turn_based_stt() const;
  void _internal_set_turn_based_stt(bool value);
  public:

  // bool emotion_streaming = 9;
  void clear_emotion_streaming();
  bool emotion_streaming() const;
  void set_emotion_streaming(bool value);
  private:
  bool _internal_emotion_streaming() const;
  void _internal_set_emotion_streaming(bool value);
  public:

  // bool silence_events = 10;
  void clear_silence_events();
  bool silence_events() const;
  void set_silence_events(bool value);
  private:
  bool _internal_silence_events() const;
  void _internal_set_silence_events(bool value);
  public:

  // bool phoneme_info = 11;
  void clear_phoneme_info();
  bool phoneme_info() const;
  void set_phoneme_info(bool value);
  private:
  bool _internal_phoneme_info() const;
  void _internal_set_phoneme_info(bool value);
  public:

  // bool continuation = 12;
  void clear_continuation();
  bool continuation() const;
  void set_continuation(bool value);
  private:
  bool _internal_continuation() const;
  void _internal_set_continuation(bool value);
  public:

  // bool session_cancellation = 13;
  void clear_session_cancellation();
  bool session_cancellation() const;
  void set_session_cancellation(bool value);
  private:
  bool _internal_session_cancellation() const;
  void _internal_set_session_cancellation(bool value);
  public:

  // bool narrated_actions = 14;
  void clear_narrated_actions();
  bool narrated_actions() const;
  void set_narrated_actions(bool value);
  private:
  bool _internal_narrated_actions() const;
  void _internal_set_narrated_actions(bool value);
  public:

  // bool regenerate_response = 15;
  void clear_regenerate_response();
  bool regenerate_response() const;
  void set_regenerate_response(bool value);
  private:
  bool _internal_regenerate_response() const;
  void _internal_set_regenerate_response(bool value);
  public:

  // bool load_scene_in_session = 16;
  void clear_load_scene_in_session();
  bool load_scene_in_session() const;
  void set_load_scene_in_session(bool value);
  private:
  bool _internal_load_scene_in_session() const;
  void _internal_set_load_scene_in_session(bool value);
  public:

  // bool relations = 17;
  void clear_relations();
  bool relations() const;
  void set_relations(bool value);
  private:
  bool _internal_relations() const;
  void _internal_set_relations(bool value);
  public:

  // bool debug_info = 18;
  void clear_debug_info();
  bool debug_info() const;
  void set_debug_info(bool value);
  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);
  public:

  // bool tts_mp3 = 19;
  void clear_tts_mp3();
  bool tts_mp3() const;
  void set_tts_mp3(bool value);
  private:
  bool _internal_tts_mp3() const;
  void _internal_set_tts_mp3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CapabilitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool audio_;
  bool text_;
  bool gestures_;
  bool interruptions_;
  bool triggers_;
  bool emotions_;
  bool turn_based_stt_;
  bool emotion_streaming_;
  bool silence_events_;
  bool phoneme_info_;
  bool continuation_;
  bool session_cancellation_;
  bool narrated_actions_;
  bool regenerate_response_;
  bool load_scene_in_session_;
  bool relations_;
  bool debug_info_;
  bool tts_mp3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class UserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserRequest) */ {
 public:
  inline UserRequest() : UserRequest(nullptr) {}
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);
  UserRequest(UserRequest&& from) noexcept
    : UserRequest() {
    *this = ::std::move(from);
  }

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRequest& operator=(UserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserRequest& default_instance();

  static inline const UserRequest* internal_default_instance() {
    return reinterpret_cast<const UserRequest*>(
               &_UserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRequest& a, UserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserRequest* New() const final {
    return CreateMaybeMessage<UserRequest>(nullptr);
  }

  UserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.UserRequest";
  }
  protected:
  explicit UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {}
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientRequest& default_instance();

  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const final {
    return CreateMaybeMessage<ClientRequest>(nullptr);
  }

  ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ClientRequest";
  }
  protected:
  explicit ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldRequest_CreateAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest) */ {
 public:
  inline CreateWorldRequest_CreateAgentRequest() : CreateWorldRequest_CreateAgentRequest(nullptr) {}
  virtual ~CreateWorldRequest_CreateAgentRequest();

  CreateWorldRequest_CreateAgentRequest(const CreateWorldRequest_CreateAgentRequest& from);
  CreateWorldRequest_CreateAgentRequest(CreateWorldRequest_CreateAgentRequest&& from) noexcept
    : CreateWorldRequest_CreateAgentRequest() {
    *this = ::std::move(from);
  }

  inline CreateWorldRequest_CreateAgentRequest& operator=(const CreateWorldRequest_CreateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldRequest_CreateAgentRequest& operator=(CreateWorldRequest_CreateAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorldRequest_CreateAgentRequest& default_instance();

  static inline const CreateWorldRequest_CreateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWorldRequest_CreateAgentRequest*>(
               &_CreateWorldRequest_CreateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateWorldRequest_CreateAgentRequest& a, CreateWorldRequest_CreateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldRequest_CreateAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldRequest_CreateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorldRequest_CreateAgentRequest* New() const final {
    return CreateMaybeMessage<CreateWorldRequest_CreateAgentRequest>(nullptr);
  }

  CreateWorldRequest_CreateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorldRequest_CreateAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorldRequest_CreateAgentRequest& from);
  void MergeFrom(const CreateWorldRequest_CreateAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldRequest_CreateAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldRequest.CreateAgentRequest";
  }
  protected:
  explicit CreateWorldRequest_CreateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrainNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kVoicePresetFieldNumber = 3,
  };
  // string brain_name = 1;
  void clear_brain_name();
  const std::string& brain_name() const;
  void set_brain_name(const std::string& value);
  void set_brain_name(std::string&& value);
  void set_brain_name(const char* value);
  void set_brain_name(const char* value, size_t size);
  std::string* mutable_brain_name();
  std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .ai.inworld.engine.VoicePreset voice_preset = 3;
  void clear_voice_preset();
  ::ai::inworld::engine::VoicePreset voice_preset() const;
  void set_voice_preset(::ai::inworld::engine::VoicePreset value);
  private:
  ::ai::inworld::engine::VoicePreset _internal_voice_preset() const;
  void _internal_set_voice_preset(::ai::inworld::engine::VoicePreset value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  int voice_preset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldRequest_ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldRequest.ClientRequest) */ {
 public:
  inline CreateWorldRequest_ClientRequest() : CreateWorldRequest_ClientRequest(nullptr) {}
  virtual ~CreateWorldRequest_ClientRequest();

  CreateWorldRequest_ClientRequest(const CreateWorldRequest_ClientRequest& from);
  CreateWorldRequest_ClientRequest(CreateWorldRequest_ClientRequest&& from) noexcept
    : CreateWorldRequest_ClientRequest() {
    *this = ::std::move(from);
  }

  inline CreateWorldRequest_ClientRequest& operator=(const CreateWorldRequest_ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldRequest_ClientRequest& operator=(CreateWorldRequest_ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorldRequest_ClientRequest& default_instance();

  static inline const CreateWorldRequest_ClientRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWorldRequest_ClientRequest*>(
               &_CreateWorldRequest_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateWorldRequest_ClientRequest& a, CreateWorldRequest_ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldRequest_ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldRequest_ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorldRequest_ClientRequest* New() const final {
    return CreateMaybeMessage<CreateWorldRequest_ClientRequest>(nullptr);
  }

  CreateWorldRequest_ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorldRequest_ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorldRequest_ClientRequest& from);
  void MergeFrom(const CreateWorldRequest_ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldRequest_ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldRequest.ClientRequest";
  }
  protected:
  explicit CreateWorldRequest_ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldRequest.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldRequest) */ {
 public:
  inline CreateWorldRequest() : CreateWorldRequest(nullptr) {}
  virtual ~CreateWorldRequest();

  CreateWorldRequest(const CreateWorldRequest& from);
  CreateWorldRequest(CreateWorldRequest&& from) noexcept
    : CreateWorldRequest() {
    *this = ::std::move(from);
  }

  inline CreateWorldRequest& operator=(const CreateWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldRequest& operator=(CreateWorldRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorldRequest& default_instance();

  static inline const CreateWorldRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWorldRequest*>(
               &_CreateWorldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateWorldRequest& a, CreateWorldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorldRequest* New() const final {
    return CreateMaybeMessage<CreateWorldRequest>(nullptr);
  }

  CreateWorldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorldRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorldRequest& from);
  void MergeFrom(const CreateWorldRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldRequest";
  }
  protected:
  explicit CreateWorldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateWorldRequest_CreateAgentRequest CreateAgentRequest;
  typedef CreateWorldRequest_ClientRequest ClientRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kCreateAgentRequestsFieldNumber = 2,
    kProtoWorldNameFieldNumber = 1,
    kCapabilitiesFieldNumber = 3,
    kUserFieldNumber = 4,
    kClientFieldNumber = 5,
  };
  // repeated .ai.inworld.engine.CreateWorldRequest.CreateAgentRequest create_agent_requests = 2;
  int create_agent_requests_size() const;
  private:
  int _internal_create_agent_requests_size() const;
  public:
  void clear_create_agent_requests();
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* mutable_create_agent_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >*
      mutable_create_agent_requests();
  private:
  const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& _internal_create_agent_requests(int index) const;
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* _internal_add_create_agent_requests();
  public:
  const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& create_agent_requests(int index) const;
  ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* add_create_agent_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >&
      create_agent_requests() const;

  // string proto_world_name = 1;
  void clear_proto_world_name();
  const std::string& proto_world_name() const;
  void set_proto_world_name(const std::string& value);
  void set_proto_world_name(std::string&& value);
  void set_proto_world_name(const char* value);
  void set_proto_world_name(const char* value, size_t size);
  std::string* mutable_proto_world_name();
  std::string* release_proto_world_name();
  void set_allocated_proto_world_name(std::string* proto_world_name);
  private:
  const std::string& _internal_proto_world_name() const;
  void _internal_set_proto_world_name(const std::string& value);
  std::string* _internal_mutable_proto_world_name();
  public:

  // .ai.inworld.engine.CapabilitiesRequest capabilities = 3;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::ai::inworld::engine::CapabilitiesRequest& capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* release_capabilities();
  ::ai::inworld::engine::CapabilitiesRequest* mutable_capabilities();
  void set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities);
  private:
  const ::ai::inworld::engine::CapabilitiesRequest& _internal_capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* _internal_mutable_capabilities();
  public:
  void unsafe_arena_set_allocated_capabilities(
      ::ai::inworld::engine::CapabilitiesRequest* capabilities);
  ::ai::inworld::engine::CapabilitiesRequest* unsafe_arena_release_capabilities();

  // .ai.inworld.engine.UserRequest user = 4;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::ai::inworld::engine::UserRequest& user() const;
  ::ai::inworld::engine::UserRequest* release_user();
  ::ai::inworld::engine::UserRequest* mutable_user();
  void set_allocated_user(::ai::inworld::engine::UserRequest* user);
  private:
  const ::ai::inworld::engine::UserRequest& _internal_user() const;
  ::ai::inworld::engine::UserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::ai::inworld::engine::UserRequest* user);
  ::ai::inworld::engine::UserRequest* unsafe_arena_release_user();

  // .ai.inworld.engine.CreateWorldRequest.ClientRequest client = 5;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& client() const;
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* release_client();
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* mutable_client();
  void set_allocated_client(::ai::inworld::engine::CreateWorldRequest_ClientRequest* client);
  private:
  const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& _internal_client() const;
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ai::inworld::engine::CreateWorldRequest_ClientRequest* client);
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* unsafe_arena_release_client();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest > create_agent_requests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_world_name_;
  ::ai::inworld::engine::CapabilitiesRequest* capabilities_;
  ::ai::inworld::engine::UserRequest* user_;
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* client_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldResponse_Agent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldResponse.Agent) */ {
 public:
  inline CreateWorldResponse_Agent() : CreateWorldResponse_Agent(nullptr) {}
  virtual ~CreateWorldResponse_Agent();

  CreateWorldResponse_Agent(const CreateWorldResponse_Agent& from);
  CreateWorldResponse_Agent(CreateWorldResponse_Agent&& from) noexcept
    : CreateWorldResponse_Agent() {
    *this = ::std::move(from);
  }

  inline CreateWorldResponse_Agent& operator=(const CreateWorldResponse_Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldResponse_Agent& operator=(CreateWorldResponse_Agent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorldResponse_Agent& default_instance();

  static inline const CreateWorldResponse_Agent* internal_default_instance() {
    return reinterpret_cast<const CreateWorldResponse_Agent*>(
               &_CreateWorldResponse_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateWorldResponse_Agent& a, CreateWorldResponse_Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldResponse_Agent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldResponse_Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorldResponse_Agent* New() const final {
    return CreateMaybeMessage<CreateWorldResponse_Agent>(nullptr);
  }

  CreateWorldResponse_Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorldResponse_Agent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorldResponse_Agent& from);
  void MergeFrom(const CreateWorldResponse_Agent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldResponse_Agent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldResponse.Agent";
  }
  protected:
  explicit CreateWorldResponse_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kBrainNameFieldNumber = 2,
  };
  // string agent_id = 1;
  void clear_agent_id();
  const std::string& agent_id() const;
  void set_agent_id(const std::string& value);
  void set_agent_id(std::string&& value);
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  std::string* mutable_agent_id();
  std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string brain_name = 2;
  void clear_brain_name();
  const std::string& brain_name() const;
  void set_brain_name(const std::string& value);
  void set_brain_name(std::string&& value);
  void set_brain_name(const char* value);
  void set_brain_name(const char* value, size_t size);
  std::string* mutable_brain_name();
  std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldResponse.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class CreateWorldResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.CreateWorldResponse) */ {
 public:
  inline CreateWorldResponse() : CreateWorldResponse(nullptr) {}
  virtual ~CreateWorldResponse();

  CreateWorldResponse(const CreateWorldResponse& from);
  CreateWorldResponse(CreateWorldResponse&& from) noexcept
    : CreateWorldResponse() {
    *this = ::std::move(from);
  }

  inline CreateWorldResponse& operator=(const CreateWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWorldResponse& operator=(CreateWorldResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateWorldResponse& default_instance();

  static inline const CreateWorldResponse* internal_default_instance() {
    return reinterpret_cast<const CreateWorldResponse*>(
               &_CreateWorldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateWorldResponse& a, CreateWorldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWorldResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWorldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateWorldResponse* New() const final {
    return CreateMaybeMessage<CreateWorldResponse>(nullptr);
  }

  CreateWorldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateWorldResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateWorldResponse& from);
  void MergeFrom(const CreateWorldResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWorldResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.CreateWorldResponse";
  }
  protected:
  explicit CreateWorldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CreateWorldResponse_Agent Agent;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kKeyFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.CreateWorldResponse.Agent agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::ai::inworld::engine::CreateWorldResponse_Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >*
      mutable_agents();
  private:
  const ::ai::inworld::engine::CreateWorldResponse_Agent& _internal_agents(int index) const;
  ::ai::inworld::engine::CreateWorldResponse_Agent* _internal_add_agents();
  public:
  const ::ai::inworld::engine::CreateWorldResponse_Agent& agents(int index) const;
  ::ai::inworld::engine::CreateWorldResponse_Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >&
      agents() const;

  // string key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.CreateWorldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent > agents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneRequest) */ {
 public:
  inline LoadSceneRequest() : LoadSceneRequest(nullptr) {}
  virtual ~LoadSceneRequest();

  LoadSceneRequest(const LoadSceneRequest& from);
  LoadSceneRequest(LoadSceneRequest&& from) noexcept
    : LoadSceneRequest() {
    *this = ::std::move(from);
  }

  inline LoadSceneRequest& operator=(const LoadSceneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneRequest& operator=(LoadSceneRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSceneRequest& default_instance();

  static inline const LoadSceneRequest* internal_default_instance() {
    return reinterpret_cast<const LoadSceneRequest*>(
               &_LoadSceneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoadSceneRequest& a, LoadSceneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSceneRequest* New() const final {
    return CreateMaybeMessage<LoadSceneRequest>(nullptr);
  }

  LoadSceneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSceneRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSceneRequest& from);
  void MergeFrom(const LoadSceneRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneRequest";
  }
  protected:
  explicit LoadSceneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCapabilitiesFieldNumber = 2,
    kUserFieldNumber = 3,
    kClientFieldNumber = 4,
    kAudioSettingsFieldNumber = 5,
    kUserSettingsFieldNumber = 6,
    kSessionContinuationFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::ai::inworld::engine::CapabilitiesRequest& capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* release_capabilities();
  ::ai::inworld::engine::CapabilitiesRequest* mutable_capabilities();
  void set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities);
  private:
  const ::ai::inworld::engine::CapabilitiesRequest& _internal_capabilities() const;
  ::ai::inworld::engine::CapabilitiesRequest* _internal_mutable_capabilities();
  public:
  void unsafe_arena_set_allocated_capabilities(
      ::ai::inworld::engine::CapabilitiesRequest* capabilities);
  ::ai::inworld::engine::CapabilitiesRequest* unsafe_arena_release_capabilities();

  // .ai.inworld.engine.UserRequest user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::ai::inworld::engine::UserRequest& user() const;
  ::ai::inworld::engine::UserRequest* release_user();
  ::ai::inworld::engine::UserRequest* mutable_user();
  void set_allocated_user(::ai::inworld::engine::UserRequest* user);
  private:
  const ::ai::inworld::engine::UserRequest& _internal_user() const;
  ::ai::inworld::engine::UserRequest* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::ai::inworld::engine::UserRequest* user);
  ::ai::inworld::engine::UserRequest* unsafe_arena_release_user();

  // .ai.inworld.engine.ClientRequest client = 4;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ai::inworld::engine::ClientRequest& client() const;
  ::ai::inworld::engine::ClientRequest* release_client();
  ::ai::inworld::engine::ClientRequest* mutable_client();
  void set_allocated_client(::ai::inworld::engine::ClientRequest* client);
  private:
  const ::ai::inworld::engine::ClientRequest& _internal_client() const;
  ::ai::inworld::engine::ClientRequest* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::ai::inworld::engine::ClientRequest* client);
  ::ai::inworld::engine::ClientRequest* unsafe_arena_release_client();

  // .ai.inworld.engine.AudioSettings audio_settings = 5;
  bool has_audio_settings() const;
  private:
  bool _internal_has_audio_settings() const;
  public:
  void clear_audio_settings();
  const ::ai::inworld::engine::AudioSettings& audio_settings() const;
  ::ai::inworld::engine::AudioSettings* release_audio_settings();
  ::ai::inworld::engine::AudioSettings* mutable_audio_settings();
  void set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* audio_settings);
  private:
  const ::ai::inworld::engine::AudioSettings& _internal_audio_settings() const;
  ::ai::inworld::engine::AudioSettings* _internal_mutable_audio_settings();
  public:
  void unsafe_arena_set_allocated_audio_settings(
      ::ai::inworld::engine::AudioSettings* audio_settings);
  ::ai::inworld::engine::AudioSettings* unsafe_arena_release_audio_settings();

  // .ai.inworld.engine.UserSettings user_settings = 6;
  bool has_user_settings() const;
  private:
  bool _internal_has_user_settings() const;
  public:
  void clear_user_settings();
  const ::ai::inworld::engine::UserSettings& user_settings() const;
  ::ai::inworld::engine::UserSettings* release_user_settings();
  ::ai::inworld::engine::UserSettings* mutable_user_settings();
  void set_allocated_user_settings(::ai::inworld::engine::UserSettings* user_settings);
  private:
  const ::ai::inworld::engine::UserSettings& _internal_user_settings() const;
  ::ai::inworld::engine::UserSettings* _internal_mutable_user_settings();
  public:
  void unsafe_arena_set_allocated_user_settings(
      ::ai::inworld::engine::UserSettings* user_settings);
  ::ai::inworld::engine::UserSettings* unsafe_arena_release_user_settings();

  // .ai.inworld.engine.SessionContinuation session_continuation = 7;
  bool has_session_continuation() const;
  private:
  bool _internal_has_session_continuation() const;
  public:
  void clear_session_continuation();
  const ::ai::inworld::engine::SessionContinuation& session_continuation() const;
  ::ai::inworld::engine::SessionContinuation* release_session_continuation();
  ::ai::inworld::engine::SessionContinuation* mutable_session_continuation();
  void set_allocated_session_continuation(::ai::inworld::engine::SessionContinuation* session_continuation);
  private:
  const ::ai::inworld::engine::SessionContinuation& _internal_session_continuation() const;
  ::ai::inworld::engine::SessionContinuation* _internal_mutable_session_continuation();
  public:
  void unsafe_arena_set_allocated_session_continuation(
      ::ai::inworld::engine::SessionContinuation* session_continuation);
  ::ai::inworld::engine::SessionContinuation* unsafe_arena_release_session_continuation();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::ai::inworld::engine::CapabilitiesRequest* capabilities_;
  ::ai::inworld::engine::UserRequest* user_;
  ::ai::inworld::engine::ClientRequest* client_;
  ::ai::inworld::engine::AudioSettings* audio_settings_;
  ::ai::inworld::engine::UserSettings* user_settings_;
  ::ai::inworld::engine::SessionContinuation* session_continuation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class AudioSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.AudioSettings) */ {
 public:
  inline AudioSettings() : AudioSettings(nullptr) {}
  virtual ~AudioSettings();

  AudioSettings(const AudioSettings& from);
  AudioSettings(AudioSettings&& from) noexcept
    : AudioSettings() {
    *this = ::std::move(from);
  }

  inline AudioSettings& operator=(const AudioSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioSettings& operator=(AudioSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioSettings& default_instance();

  static inline const AudioSettings* internal_default_instance() {
    return reinterpret_cast<const AudioSettings*>(
               &_AudioSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AudioSettings& a, AudioSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioSettings* New() const final {
    return CreateMaybeMessage<AudioSettings>(nullptr);
  }

  AudioSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioSettings& from);
  void MergeFrom(const AudioSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.AudioSettings";
  }
  protected:
  explicit AudioSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSttSampleRateHertzFieldNumber = 1,
    kTtsSampleRateHertzFieldNumber = 2,
  };
  // uint32 stt_sample_rate_hertz = 1;
  void clear_stt_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::uint32 stt_sample_rate_hertz() const;
  void set_stt_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stt_sample_rate_hertz() const;
  void _internal_set_stt_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tts_sample_rate_hertz = 2;
  void clear_tts_sample_rate_hertz();
  ::PROTOBUF_NAMESPACE_ID::uint32 tts_sample_rate_hertz() const;
  void set_tts_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tts_sample_rate_hertz() const;
  void _internal_set_tts_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.AudioSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stt_sample_rate_hertz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tts_sample_rate_hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class UserSettings_PlayerProfile_PlayerField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField) */ {
 public:
  inline UserSettings_PlayerProfile_PlayerField() : UserSettings_PlayerProfile_PlayerField(nullptr) {}
  virtual ~UserSettings_PlayerProfile_PlayerField();

  UserSettings_PlayerProfile_PlayerField(const UserSettings_PlayerProfile_PlayerField& from);
  UserSettings_PlayerProfile_PlayerField(UserSettings_PlayerProfile_PlayerField&& from) noexcept
    : UserSettings_PlayerProfile_PlayerField() {
    *this = ::std::move(from);
  }

  inline UserSettings_PlayerProfile_PlayerField& operator=(const UserSettings_PlayerProfile_PlayerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSettings_PlayerProfile_PlayerField& operator=(UserSettings_PlayerProfile_PlayerField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSettings_PlayerProfile_PlayerField& default_instance();

  static inline const UserSettings_PlayerProfile_PlayerField* internal_default_instance() {
    return reinterpret_cast<const UserSettings_PlayerProfile_PlayerField*>(
               &_UserSettings_PlayerProfile_PlayerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserSettings_PlayerProfile_PlayerField& a, UserSettings_PlayerProfile_PlayerField& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSettings_PlayerProfile_PlayerField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSettings_PlayerProfile_PlayerField* New() const final {
    return CreateMaybeMessage<UserSettings_PlayerProfile_PlayerField>(nullptr);
  }

  UserSettings_PlayerProfile_PlayerField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSettings_PlayerProfile_PlayerField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSettings_PlayerProfile_PlayerField& from);
  void MergeFrom(const UserSettings_PlayerProfile_PlayerField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSettings_PlayerProfile_PlayerField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.UserSettings.PlayerProfile.PlayerField";
  }
  protected:
  explicit UserSettings_PlayerProfile_PlayerField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIdFieldNumber = 1,
    kFieldValueFieldNumber = 2,
  };
  // string field_id = 1;
  void clear_field_id();
  const std::string& field_id() const;
  void set_field_id(const std::string& value);
  void set_field_id(std::string&& value);
  void set_field_id(const char* value);
  void set_field_id(const char* value, size_t size);
  std::string* mutable_field_id();
  std::string* release_field_id();
  void set_allocated_field_id(std::string* field_id);
  private:
  const std::string& _internal_field_id() const;
  void _internal_set_field_id(const std::string& value);
  std::string* _internal_mutable_field_id();
  public:

  // string field_value = 2;
  void clear_field_value();
  const std::string& field_value() const;
  void set_field_value(const std::string& value);
  void set_field_value(std::string&& value);
  void set_field_value(const char* value);
  void set_field_value(const char* value, size_t size);
  std::string* mutable_field_value();
  std::string* release_field_value();
  void set_allocated_field_value(std::string* field_value);
  private:
  const std::string& _internal_field_value() const;
  void _internal_set_field_value(const std::string& value);
  std::string* _internal_mutable_field_value();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class UserSettings_PlayerProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserSettings.PlayerProfile) */ {
 public:
  inline UserSettings_PlayerProfile() : UserSettings_PlayerProfile(nullptr) {}
  virtual ~UserSettings_PlayerProfile();

  UserSettings_PlayerProfile(const UserSettings_PlayerProfile& from);
  UserSettings_PlayerProfile(UserSettings_PlayerProfile&& from) noexcept
    : UserSettings_PlayerProfile() {
    *this = ::std::move(from);
  }

  inline UserSettings_PlayerProfile& operator=(const UserSettings_PlayerProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSettings_PlayerProfile& operator=(UserSettings_PlayerProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSettings_PlayerProfile& default_instance();

  static inline const UserSettings_PlayerProfile* internal_default_instance() {
    return reinterpret_cast<const UserSettings_PlayerProfile*>(
               &_UserSettings_PlayerProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserSettings_PlayerProfile& a, UserSettings_PlayerProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSettings_PlayerProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSettings_PlayerProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSettings_PlayerProfile* New() const final {
    return CreateMaybeMessage<UserSettings_PlayerProfile>(nullptr);
  }

  UserSettings_PlayerProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSettings_PlayerProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSettings_PlayerProfile& from);
  void MergeFrom(const UserSettings_PlayerProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSettings_PlayerProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.UserSettings.PlayerProfile";
  }
  protected:
  explicit UserSettings_PlayerProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserSettings_PlayerProfile_PlayerField PlayerField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >*
      mutable_fields();
  private:
  const ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField& _internal_fields(int index) const;
  ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* _internal_add_fields();
  public:
  const ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField& fields(int index) const;
  ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >&
      fields() const;

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserSettings.PlayerProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class UserSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.UserSettings) */ {
 public:
  inline UserSettings() : UserSettings(nullptr) {}
  virtual ~UserSettings();

  UserSettings(const UserSettings& from);
  UserSettings(UserSettings&& from) noexcept
    : UserSettings() {
    *this = ::std::move(from);
  }

  inline UserSettings& operator=(const UserSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSettings& operator=(UserSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSettings& default_instance();

  static inline const UserSettings* internal_default_instance() {
    return reinterpret_cast<const UserSettings*>(
               &_UserSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserSettings& a, UserSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSettings* New() const final {
    return CreateMaybeMessage<UserSettings>(nullptr);
  }

  UserSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSettings& from);
  void MergeFrom(const UserSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.UserSettings";
  }
  protected:
  explicit UserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserSettings_PlayerProfile PlayerProfile;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerProfileFieldNumber = 2,
    kViewTranscriptConsentFieldNumber = 1,
  };
  // .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
  bool has_player_profile() const;
  private:
  bool _internal_has_player_profile() const;
  public:
  void clear_player_profile();
  const ::ai::inworld::engine::UserSettings_PlayerProfile& player_profile() const;
  ::ai::inworld::engine::UserSettings_PlayerProfile* release_player_profile();
  ::ai::inworld::engine::UserSettings_PlayerProfile* mutable_player_profile();
  void set_allocated_player_profile(::ai::inworld::engine::UserSettings_PlayerProfile* player_profile);
  private:
  const ::ai::inworld::engine::UserSettings_PlayerProfile& _internal_player_profile() const;
  ::ai::inworld::engine::UserSettings_PlayerProfile* _internal_mutable_player_profile();
  public:
  void unsafe_arena_set_allocated_player_profile(
      ::ai::inworld::engine::UserSettings_PlayerProfile* player_profile);
  ::ai::inworld::engine::UserSettings_PlayerProfile* unsafe_arena_release_player_profile();

  // bool view_transcript_consent = 1;
  void clear_view_transcript_consent();
  bool view_transcript_consent() const;
  void set_view_transcript_consent(bool value);
  private:
  bool _internal_view_transcript_consent() const;
  void _internal_set_view_transcript_consent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.UserSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::engine::UserSettings_PlayerProfile* player_profile_;
  bool view_transcript_consent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class SessionContinuation_ContinuationInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.SessionContinuation.ContinuationInfo) */ {
 public:
  inline SessionContinuation_ContinuationInfo() : SessionContinuation_ContinuationInfo(nullptr) {}
  virtual ~SessionContinuation_ContinuationInfo();

  SessionContinuation_ContinuationInfo(const SessionContinuation_ContinuationInfo& from);
  SessionContinuation_ContinuationInfo(SessionContinuation_ContinuationInfo&& from) noexcept
    : SessionContinuation_ContinuationInfo() {
    *this = ::std::move(from);
  }

  inline SessionContinuation_ContinuationInfo& operator=(const SessionContinuation_ContinuationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionContinuation_ContinuationInfo& operator=(SessionContinuation_ContinuationInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionContinuation_ContinuationInfo& default_instance();

  static inline const SessionContinuation_ContinuationInfo* internal_default_instance() {
    return reinterpret_cast<const SessionContinuation_ContinuationInfo*>(
               &_SessionContinuation_ContinuationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SessionContinuation_ContinuationInfo& a, SessionContinuation_ContinuationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionContinuation_ContinuationInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionContinuation_ContinuationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionContinuation_ContinuationInfo* New() const final {
    return CreateMaybeMessage<SessionContinuation_ContinuationInfo>(nullptr);
  }

  SessionContinuation_ContinuationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionContinuation_ContinuationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionContinuation_ContinuationInfo& from);
  void MergeFrom(const SessionContinuation_ContinuationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionContinuation_ContinuationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.SessionContinuation.ContinuationInfo";
  }
  protected:
  explicit SessionContinuation_ContinuationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMillisPassedFieldNumber = 1,
  };
  // int64 millis_passed = 1;
  void clear_millis_passed();
  ::PROTOBUF_NAMESPACE_ID::int64 millis_passed() const;
  void set_millis_passed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_millis_passed() const;
  void _internal_set_millis_passed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.SessionContinuation.ContinuationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 millis_passed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class SessionContinuation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.SessionContinuation) */ {
 public:
  inline SessionContinuation() : SessionContinuation(nullptr) {}
  virtual ~SessionContinuation();

  SessionContinuation(const SessionContinuation& from);
  SessionContinuation(SessionContinuation&& from) noexcept
    : SessionContinuation() {
    *this = ::std::move(from);
  }

  inline SessionContinuation& operator=(const SessionContinuation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionContinuation& operator=(SessionContinuation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionContinuation& default_instance();

  static inline const SessionContinuation* internal_default_instance() {
    return reinterpret_cast<const SessionContinuation*>(
               &_SessionContinuation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SessionContinuation& a, SessionContinuation& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionContinuation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionContinuation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionContinuation* New() const final {
    return CreateMaybeMessage<SessionContinuation>(nullptr);
  }

  SessionContinuation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionContinuation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionContinuation& from);
  void MergeFrom(const SessionContinuation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionContinuation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.SessionContinuation";
  }
  protected:
  explicit SessionContinuation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SessionContinuation_ContinuationInfo ContinuationInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousStateFieldNumber = 3,
    kContinuationInfoFieldNumber = 1,
    kPreviousDialogFieldNumber = 2,
  };
  // bytes previous_state = 3;
  void clear_previous_state();
  const std::string& previous_state() const;
  void set_previous_state(const std::string& value);
  void set_previous_state(std::string&& value);
  void set_previous_state(const char* value);
  void set_previous_state(const void* value, size_t size);
  std::string* mutable_previous_state();
  std::string* release_previous_state();
  void set_allocated_previous_state(std::string* previous_state);
  private:
  const std::string& _internal_previous_state() const;
  void _internal_set_previous_state(const std::string& value);
  std::string* _internal_mutable_previous_state();
  public:

  // .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
  bool has_continuation_info() const;
  private:
  bool _internal_has_continuation_info() const;
  public:
  void clear_continuation_info();
  const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& continuation_info() const;
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* release_continuation_info();
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* mutable_continuation_info();
  void set_allocated_continuation_info(::ai::inworld::engine::SessionContinuation_ContinuationInfo* continuation_info);
  private:
  const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& _internal_continuation_info() const;
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* _internal_mutable_continuation_info();
  public:
  void unsafe_arena_set_allocated_continuation_info(
      ::ai::inworld::engine::SessionContinuation_ContinuationInfo* continuation_info);
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* unsafe_arena_release_continuation_info();

  // .ai.inworld.engine.PreviousDialog previous_dialog = 2;
  bool has_previous_dialog() const;
  private:
  bool _internal_has_previous_dialog() const;
  public:
  void clear_previous_dialog();
  const ::ai::inworld::engine::PreviousDialog& previous_dialog() const;
  ::ai::inworld::engine::PreviousDialog* release_previous_dialog();
  ::ai::inworld::engine::PreviousDialog* mutable_previous_dialog();
  void set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* previous_dialog);
  private:
  const ::ai::inworld::engine::PreviousDialog& _internal_previous_dialog() const;
  ::ai::inworld::engine::PreviousDialog* _internal_mutable_previous_dialog();
  public:
  void unsafe_arena_set_allocated_previous_dialog(
      ::ai::inworld::engine::PreviousDialog* previous_dialog);
  ::ai::inworld::engine::PreviousDialog* unsafe_arena_release_previous_dialog();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.SessionContinuation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_state_;
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* continuation_info_;
  ::ai::inworld::engine::PreviousDialog* previous_dialog_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class PreviousDialog_Phrase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousDialog.Phrase) */ {
 public:
  inline PreviousDialog_Phrase() : PreviousDialog_Phrase(nullptr) {}
  virtual ~PreviousDialog_Phrase();

  PreviousDialog_Phrase(const PreviousDialog_Phrase& from);
  PreviousDialog_Phrase(PreviousDialog_Phrase&& from) noexcept
    : PreviousDialog_Phrase() {
    *this = ::std::move(from);
  }

  inline PreviousDialog_Phrase& operator=(const PreviousDialog_Phrase& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousDialog_Phrase& operator=(PreviousDialog_Phrase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviousDialog_Phrase& default_instance();

  static inline const PreviousDialog_Phrase* internal_default_instance() {
    return reinterpret_cast<const PreviousDialog_Phrase*>(
               &_PreviousDialog_Phrase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PreviousDialog_Phrase& a, PreviousDialog_Phrase& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousDialog_Phrase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousDialog_Phrase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviousDialog_Phrase* New() const final {
    return CreateMaybeMessage<PreviousDialog_Phrase>(nullptr);
  }

  PreviousDialog_Phrase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviousDialog_Phrase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviousDialog_Phrase& from);
  void MergeFrom(const PreviousDialog_Phrase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviousDialog_Phrase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.PreviousDialog.Phrase";
  }
  protected:
  explicit PreviousDialog_Phrase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseFieldNumber = 2,
    kTalkerFieldNumber = 1,
  };
  // string phrase = 2;
  void clear_phrase();
  const std::string& phrase() const;
  void set_phrase(const std::string& value);
  void set_phrase(std::string&& value);
  void set_phrase(const char* value);
  void set_phrase(const char* value, size_t size);
  std::string* mutable_phrase();
  std::string* release_phrase();
  void set_allocated_phrase(std::string* phrase);
  private:
  const std::string& _internal_phrase() const;
  void _internal_set_phrase(const std::string& value);
  std::string* _internal_mutable_phrase();
  public:

  // .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
  void clear_talker();
  ::ai::inworld::engine::PreviousDialog_DialogParticipant talker() const;
  void set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value);
  private:
  ::ai::inworld::engine::PreviousDialog_DialogParticipant _internal_talker() const;
  void _internal_set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousDialog.Phrase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phrase_;
  int talker_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class PreviousDialog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousDialog) */ {
 public:
  inline PreviousDialog() : PreviousDialog(nullptr) {}
  virtual ~PreviousDialog();

  PreviousDialog(const PreviousDialog& from);
  PreviousDialog(PreviousDialog&& from) noexcept
    : PreviousDialog() {
    *this = ::std::move(from);
  }

  inline PreviousDialog& operator=(const PreviousDialog& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousDialog& operator=(PreviousDialog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviousDialog& default_instance();

  static inline const PreviousDialog* internal_default_instance() {
    return reinterpret_cast<const PreviousDialog*>(
               &_PreviousDialog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PreviousDialog& a, PreviousDialog& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousDialog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousDialog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviousDialog* New() const final {
    return CreateMaybeMessage<PreviousDialog>(nullptr);
  }

  PreviousDialog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviousDialog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviousDialog& from);
  void MergeFrom(const PreviousDialog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviousDialog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.PreviousDialog";
  }
  protected:
  explicit PreviousDialog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PreviousDialog_Phrase Phrase;

  typedef PreviousDialog_DialogParticipant DialogParticipant;
  static constexpr DialogParticipant UNKNOWN =
    PreviousDialog_DialogParticipant_UNKNOWN;
  static constexpr DialogParticipant PLAYER =
    PreviousDialog_DialogParticipant_PLAYER;
  static constexpr DialogParticipant CHARACTER =
    PreviousDialog_DialogParticipant_CHARACTER;
  static inline bool DialogParticipant_IsValid(int value) {
    return PreviousDialog_DialogParticipant_IsValid(value);
  }
  static constexpr DialogParticipant DialogParticipant_MIN =
    PreviousDialog_DialogParticipant_DialogParticipant_MIN;
  static constexpr DialogParticipant DialogParticipant_MAX =
    PreviousDialog_DialogParticipant_DialogParticipant_MAX;
  static constexpr int DialogParticipant_ARRAYSIZE =
    PreviousDialog_DialogParticipant_DialogParticipant_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DialogParticipant_descriptor() {
    return PreviousDialog_DialogParticipant_descriptor();
  }
  template<typename T>
  static inline const std::string& DialogParticipant_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DialogParticipant>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DialogParticipant_Name.");
    return PreviousDialog_DialogParticipant_Name(enum_t_value);
  }
  static inline bool DialogParticipant_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DialogParticipant* value) {
    return PreviousDialog_DialogParticipant_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPhrasesFieldNumber = 1,
  };
  // repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
  int phrases_size() const;
  private:
  int _internal_phrases_size() const;
  public:
  void clear_phrases();
  ::ai::inworld::engine::PreviousDialog_Phrase* mutable_phrases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase >*
      mutable_phrases();
  private:
  const ::ai::inworld::engine::PreviousDialog_Phrase& _internal_phrases(int index) const;
  ::ai::inworld::engine::PreviousDialog_Phrase* _internal_add_phrases();
  public:
  const ::ai::inworld::engine::PreviousDialog_Phrase& phrases(int index) const;
  ::ai::inworld::engine::PreviousDialog_Phrase* add_phrases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase >&
      phrases() const;

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousDialog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase > phrases_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class PreviousState_StateHolder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousState.StateHolder) */ {
 public:
  inline PreviousState_StateHolder() : PreviousState_StateHolder(nullptr) {}
  virtual ~PreviousState_StateHolder();

  PreviousState_StateHolder(const PreviousState_StateHolder& from);
  PreviousState_StateHolder(PreviousState_StateHolder&& from) noexcept
    : PreviousState_StateHolder() {
    *this = ::std::move(from);
  }

  inline PreviousState_StateHolder& operator=(const PreviousState_StateHolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousState_StateHolder& operator=(PreviousState_StateHolder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviousState_StateHolder& default_instance();

  static inline const PreviousState_StateHolder* internal_default_instance() {
    return reinterpret_cast<const PreviousState_StateHolder*>(
               &_PreviousState_StateHolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PreviousState_StateHolder& a, PreviousState_StateHolder& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousState_StateHolder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousState_StateHolder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviousState_StateHolder* New() const final {
    return CreateMaybeMessage<PreviousState_StateHolder>(nullptr);
  }

  PreviousState_StateHolder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviousState_StateHolder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviousState_StateHolder& from);
  void MergeFrom(const PreviousState_StateHolder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviousState_StateHolder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.PreviousState.StateHolder";
  }
  protected:
  explicit PreviousState_StateHolder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketsFieldNumber = 4,
    kRelationsToActorsFieldNumber = 5,
    kBrainNameFieldNumber = 1,
    kStateFieldNumber = 2,
    kPreviousDialogFieldNumber = 3,
  };
  // repeated .ai.inworld.packets.InworldPacket packets = 4;
  int packets_size() const;
  private:
  int _internal_packets_size() const;
  public:
  void clear_packets();
  ::ai::inworld::packets::InworldPacket* mutable_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::InworldPacket >*
      mutable_packets();
  private:
  const ::ai::inworld::packets::InworldPacket& _internal_packets(int index) const;
  ::ai::inworld::packets::InworldPacket* _internal_add_packets();
  public:
  const ::ai::inworld::packets::InworldPacket& packets(int index) const;
  ::ai::inworld::packets::InworldPacket* add_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::InworldPacket >&
      packets() const;

  // repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
  int relations_to_actors_size() const;
  private:
  int _internal_relations_to_actors_size() const;
  public:
  void clear_relations_to_actors();
  ::ai::inworld::engine::ActorRelations* mutable_relations_to_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations >*
      mutable_relations_to_actors();
  private:
  const ::ai::inworld::engine::ActorRelations& _internal_relations_to_actors(int index) const;
  ::ai::inworld::engine::ActorRelations* _internal_add_relations_to_actors();
  public:
  const ::ai::inworld::engine::ActorRelations& relations_to_actors(int index) const;
  ::ai::inworld::engine::ActorRelations* add_relations_to_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations >&
      relations_to_actors() const;

  // string brain_name = 1;
  void clear_brain_name();
  const std::string& brain_name() const;
  void set_brain_name(const std::string& value);
  void set_brain_name(std::string&& value);
  void set_brain_name(const char* value);
  void set_brain_name(const char* value, size_t size);
  std::string* mutable_brain_name();
  std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // bytes state = 2;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_previous_dialog() const;
  private:
  bool _internal_has_previous_dialog() const;
  public:
  PROTOBUF_DEPRECATED void clear_previous_dialog();
  PROTOBUF_DEPRECATED const ::ai::inworld::engine::PreviousDialog& previous_dialog() const;
  PROTOBUF_DEPRECATED ::ai::inworld::engine::PreviousDialog* release_previous_dialog();
  PROTOBUF_DEPRECATED ::ai::inworld::engine::PreviousDialog* mutable_previous_dialog();
  PROTOBUF_DEPRECATED void set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* previous_dialog);
  private:
  const ::ai::inworld::engine::PreviousDialog& _internal_previous_dialog() const;
  ::ai::inworld::engine::PreviousDialog* _internal_mutable_previous_dialog();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_previous_dialog(
      ::ai::inworld::engine::PreviousDialog* previous_dialog);
  PROTOBUF_DEPRECATED ::ai::inworld::engine::PreviousDialog* unsafe_arena_release_previous_dialog();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousState.StateHolder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::InworldPacket > packets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations > relations_to_actors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::ai::inworld::engine::PreviousDialog* previous_dialog_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class PreviousState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.PreviousState) */ {
 public:
  inline PreviousState() : PreviousState(nullptr) {}
  virtual ~PreviousState();

  PreviousState(const PreviousState& from);
  PreviousState(PreviousState&& from) noexcept
    : PreviousState() {
    *this = ::std::move(from);
  }

  inline PreviousState& operator=(const PreviousState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviousState& operator=(PreviousState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviousState& default_instance();

  static inline const PreviousState* internal_default_instance() {
    return reinterpret_cast<const PreviousState*>(
               &_PreviousState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PreviousState& a, PreviousState& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviousState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviousState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviousState* New() const final {
    return CreateMaybeMessage<PreviousState>(nullptr);
  }

  PreviousState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviousState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviousState& from);
  void MergeFrom(const PreviousState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviousState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.PreviousState";
  }
  protected:
  explicit PreviousState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PreviousState_StateHolder StateHolder;

  // accessors -------------------------------------------------------

  enum : int {
    kStateHoldersFieldNumber = 1,
  };
  // repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
  int state_holders_size() const;
  private:
  int _internal_state_holders_size() const;
  public:
  void clear_state_holders();
  ::ai::inworld::engine::PreviousState_StateHolder* mutable_state_holders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder >*
      mutable_state_holders();
  private:
  const ::ai::inworld::engine::PreviousState_StateHolder& _internal_state_holders(int index) const;
  ::ai::inworld::engine::PreviousState_StateHolder* _internal_add_state_holders();
  public:
  const ::ai::inworld::engine::PreviousState_StateHolder& state_holders(int index) const;
  ::ai::inworld::engine::PreviousState_StateHolder* add_state_holders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder >&
      state_holders() const;

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.PreviousState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder > state_holders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse_Agent_CharacterAssets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets) */ {
 public:
  inline LoadSceneResponse_Agent_CharacterAssets() : LoadSceneResponse_Agent_CharacterAssets(nullptr) {}
  virtual ~LoadSceneResponse_Agent_CharacterAssets();

  LoadSceneResponse_Agent_CharacterAssets(const LoadSceneResponse_Agent_CharacterAssets& from);
  LoadSceneResponse_Agent_CharacterAssets(LoadSceneResponse_Agent_CharacterAssets&& from) noexcept
    : LoadSceneResponse_Agent_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse_Agent_CharacterAssets& operator=(const LoadSceneResponse_Agent_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse_Agent_CharacterAssets& operator=(LoadSceneResponse_Agent_CharacterAssets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSceneResponse_Agent_CharacterAssets& default_instance();

  static inline const LoadSceneResponse_Agent_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse_Agent_CharacterAssets*>(
               &_LoadSceneResponse_Agent_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(LoadSceneResponse_Agent_CharacterAssets& a, LoadSceneResponse_Agent_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse_Agent_CharacterAssets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse_Agent_CharacterAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSceneResponse_Agent_CharacterAssets* New() const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent_CharacterAssets>(nullptr);
  }

  LoadSceneResponse_Agent_CharacterAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent_CharacterAssets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSceneResponse_Agent_CharacterAssets& from);
  void MergeFrom(const LoadSceneResponse_Agent_CharacterAssets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse_Agent_CharacterAssets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets";
  }
  protected:
  explicit LoadSceneResponse_Agent_CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 1,
    kRpmImageUriPortraitFieldNumber = 2,
    kRpmImageUriPostureFieldNumber = 3,
    kAvatarImgFieldNumber = 4,
    kAvatarImgOriginalFieldNumber = 5,
  };
  // string rpm_model_uri = 1;
  void clear_rpm_model_uri();
  const std::string& rpm_model_uri() const;
  void set_rpm_model_uri(const std::string& value);
  void set_rpm_model_uri(std::string&& value);
  void set_rpm_model_uri(const char* value);
  void set_rpm_model_uri(const char* value, size_t size);
  std::string* mutable_rpm_model_uri();
  std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* rpm_model_uri);
  private:
  const std::string& _internal_rpm_model_uri() const;
  void _internal_set_rpm_model_uri(const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();
  public:

  // string rpm_image_uri_portrait = 2;
  void clear_rpm_image_uri_portrait();
  const std::string& rpm_image_uri_portrait() const;
  void set_rpm_image_uri_portrait(const std::string& value);
  void set_rpm_image_uri_portrait(std::string&& value);
  void set_rpm_image_uri_portrait(const char* value);
  void set_rpm_image_uri_portrait(const char* value, size_t size);
  std::string* mutable_rpm_image_uri_portrait();
  std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait);
  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  void _internal_set_rpm_image_uri_portrait(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();
  public:

  // string rpm_image_uri_posture = 3;
  void clear_rpm_image_uri_posture();
  const std::string& rpm_image_uri_posture() const;
  void set_rpm_image_uri_posture(const std::string& value);
  void set_rpm_image_uri_posture(std::string&& value);
  void set_rpm_image_uri_posture(const char* value);
  void set_rpm_image_uri_posture(const char* value, size_t size);
  std::string* mutable_rpm_image_uri_posture();
  std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture);
  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  void _internal_set_rpm_image_uri_posture(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();
  public:

  // string avatar_img = 4;
  void clear_avatar_img();
  const std::string& avatar_img() const;
  void set_avatar_img(const std::string& value);
  void set_avatar_img(std::string&& value);
  void set_avatar_img(const char* value);
  void set_avatar_img(const char* value, size_t size);
  std::string* mutable_avatar_img();
  std::string* release_avatar_img();
  void set_allocated_avatar_img(std::string* avatar_img);
  private:
  const std::string& _internal_avatar_img() const;
  void _internal_set_avatar_img(const std::string& value);
  std::string* _internal_mutable_avatar_img();
  public:

  // string avatar_img_original = 5;
  void clear_avatar_img_original();
  const std::string& avatar_img_original() const;
  void set_avatar_img_original(const std::string& value);
  void set_avatar_img_original(std::string&& value);
  void set_avatar_img_original(const char* value);
  void set_avatar_img_original(const char* value, size_t size);
  std::string* mutable_avatar_img_original();
  std::string* release_avatar_img_original();
  void set_allocated_avatar_img_original(std::string* avatar_img_original);
  private:
  const std::string& _internal_avatar_img_original() const;
  void _internal_set_avatar_img_original(const std::string& value);
  std::string* _internal_mutable_avatar_img_original();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_model_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_portrait_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_posture_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_img_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_img_original_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse_Agent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse.Agent) */ {
 public:
  inline LoadSceneResponse_Agent() : LoadSceneResponse_Agent(nullptr) {}
  virtual ~LoadSceneResponse_Agent();

  LoadSceneResponse_Agent(const LoadSceneResponse_Agent& from);
  LoadSceneResponse_Agent(LoadSceneResponse_Agent&& from) noexcept
    : LoadSceneResponse_Agent() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse_Agent& operator=(const LoadSceneResponse_Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse_Agent& operator=(LoadSceneResponse_Agent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSceneResponse_Agent& default_instance();

  static inline const LoadSceneResponse_Agent* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse_Agent*>(
               &_LoadSceneResponse_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(LoadSceneResponse_Agent& a, LoadSceneResponse_Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse_Agent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse_Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSceneResponse_Agent* New() const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent>(nullptr);
  }

  LoadSceneResponse_Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSceneResponse_Agent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSceneResponse_Agent& from);
  void MergeFrom(const LoadSceneResponse_Agent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse_Agent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse.Agent";
  }
  protected:
  explicit LoadSceneResponse_Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoadSceneResponse_Agent_CharacterAssets CharacterAssets;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kBrainNameFieldNumber = 2,
    kGivenNameFieldNumber = 3,
    kCharacterAssetsFieldNumber = 4,
  };
  // string agent_id = 1;
  void clear_agent_id();
  const std::string& agent_id() const;
  void set_agent_id(const std::string& value);
  void set_agent_id(std::string&& value);
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  std::string* mutable_agent_id();
  std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string brain_name = 2;
  void clear_brain_name();
  const std::string& brain_name() const;
  void set_brain_name(const std::string& value);
  void set_brain_name(std::string&& value);
  void set_brain_name(const char* value);
  void set_brain_name(const char* value, size_t size);
  std::string* mutable_brain_name();
  std::string* release_brain_name();
  void set_allocated_brain_name(std::string* brain_name);
  private:
  const std::string& _internal_brain_name() const;
  void _internal_set_brain_name(const std::string& value);
  std::string* _internal_mutable_brain_name();
  public:

  // string given_name = 3;
  void clear_given_name();
  const std::string& given_name() const;
  void set_given_name(const std::string& value);
  void set_given_name(std::string&& value);
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  std::string* mutable_given_name();
  std::string* release_given_name();
  void set_allocated_given_name(std::string* given_name);
  private:
  const std::string& _internal_given_name() const;
  void _internal_set_given_name(const std::string& value);
  std::string* _internal_mutable_given_name();
  public:

  // .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
  bool has_character_assets() const;
  private:
  bool _internal_has_character_assets() const;
  public:
  void clear_character_assets();
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& character_assets() const;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* release_character_assets();
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* mutable_character_assets();
  void set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets);
  private:
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& _internal_character_assets() const;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* _internal_mutable_character_assets();
  public:
  void unsafe_arena_set_allocated_character_assets(
      ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets);
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* unsafe_arena_release_character_assets();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brain_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr given_name_;
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LoadSceneResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LoadSceneResponse) */ {
 public:
  inline LoadSceneResponse() : LoadSceneResponse(nullptr) {}
  virtual ~LoadSceneResponse();

  LoadSceneResponse(const LoadSceneResponse& from);
  LoadSceneResponse(LoadSceneResponse&& from) noexcept
    : LoadSceneResponse() {
    *this = ::std::move(from);
  }

  inline LoadSceneResponse& operator=(const LoadSceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSceneResponse& operator=(LoadSceneResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSceneResponse& default_instance();

  static inline const LoadSceneResponse* internal_default_instance() {
    return reinterpret_cast<const LoadSceneResponse*>(
               &_LoadSceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LoadSceneResponse& a, LoadSceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSceneResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSceneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSceneResponse* New() const final {
    return CreateMaybeMessage<LoadSceneResponse>(nullptr);
  }

  LoadSceneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSceneResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSceneResponse& from);
  void MergeFrom(const LoadSceneResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSceneResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LoadSceneResponse";
  }
  protected:
  explicit LoadSceneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoadSceneResponse_Agent Agent;

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kKeyFieldNumber = 2,
    kPreviousStateFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::ai::inworld::engine::LoadSceneResponse_Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >*
      mutable_agents();
  private:
  const ::ai::inworld::engine::LoadSceneResponse_Agent& _internal_agents(int index) const;
  ::ai::inworld::engine::LoadSceneResponse_Agent* _internal_add_agents();
  public:
  const ::ai::inworld::engine::LoadSceneResponse_Agent& agents(int index) const;
  ::ai::inworld::engine::LoadSceneResponse_Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >&
      agents() const;

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .ai.inworld.engine.PreviousState previous_state = 3;
  bool has_previous_state() const;
  private:
  bool _internal_has_previous_state() const;
  public:
  void clear_previous_state();
  const ::ai::inworld::engine::PreviousState& previous_state() const;
  ::ai::inworld::engine::PreviousState* release_previous_state();
  ::ai::inworld::engine::PreviousState* mutable_previous_state();
  void set_allocated_previous_state(::ai::inworld::engine::PreviousState* previous_state);
  private:
  const ::ai::inworld::engine::PreviousState& _internal_previous_state() const;
  ::ai::inworld::engine::PreviousState* _internal_mutable_previous_state();
  public:
  void unsafe_arena_set_allocated_previous_state(
      ::ai::inworld::engine::PreviousState* previous_state);
  ::ai::inworld::engine::PreviousState* unsafe_arena_release_previous_state();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LoadSceneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent > agents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::ai::inworld::engine::PreviousState* previous_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class LogErrorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.LogErrorRequest) */ {
 public:
  inline LogErrorRequest() : LogErrorRequest(nullptr) {}
  virtual ~LogErrorRequest();

  LogErrorRequest(const LogErrorRequest& from);
  LogErrorRequest(LogErrorRequest&& from) noexcept
    : LogErrorRequest() {
    *this = ::std::move(from);
  }

  inline LogErrorRequest& operator=(const LogErrorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogErrorRequest& operator=(LogErrorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogErrorRequest& default_instance();

  static inline const LogErrorRequest* internal_default_instance() {
    return reinterpret_cast<const LogErrorRequest*>(
               &_LogErrorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(LogErrorRequest& a, LogErrorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogErrorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogErrorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogErrorRequest* New() const final {
    return CreateMaybeMessage<LogErrorRequest>(nullptr);
  }

  LogErrorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogErrorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogErrorRequest& from);
  void MergeFrom(const LogErrorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogErrorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.LogErrorRequest";
  }
  protected:
  explicit LogErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.LogErrorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class VoicePreviewRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.VoicePreviewRequest) */ {
 public:
  inline VoicePreviewRequest() : VoicePreviewRequest(nullptr) {}
  virtual ~VoicePreviewRequest();

  VoicePreviewRequest(const VoicePreviewRequest& from);
  VoicePreviewRequest(VoicePreviewRequest&& from) noexcept
    : VoicePreviewRequest() {
    *this = ::std::move(from);
  }

  inline VoicePreviewRequest& operator=(const VoicePreviewRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoicePreviewRequest& operator=(VoicePreviewRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoicePreviewRequest& default_instance();

  static inline const VoicePreviewRequest* internal_default_instance() {
    return reinterpret_cast<const VoicePreviewRequest*>(
               &_VoicePreviewRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VoicePreviewRequest& a, VoicePreviewRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoicePreviewRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoicePreviewRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoicePreviewRequest* New() const final {
    return CreateMaybeMessage<VoicePreviewRequest>(nullptr);
  }

  VoicePreviewRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoicePreviewRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoicePreviewRequest& from);
  void MergeFrom(const VoicePreviewRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoicePreviewRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.VoicePreviewRequest";
  }
  protected:
  explicit VoicePreviewRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kEmotionsFieldNumber = 2,
    kVoiceFieldNumber = 3,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .ai.inworld.packets.EmotionEvent emotions = 2;
  bool has_emotions() const;
  private:
  bool _internal_has_emotions() const;
  public:
  void clear_emotions();
  const ::ai::inworld::packets::EmotionEvent& emotions() const;
  ::ai::inworld::packets::EmotionEvent* release_emotions();
  ::ai::inworld::packets::EmotionEvent* mutable_emotions();
  void set_allocated_emotions(::ai::inworld::packets::EmotionEvent* emotions);
  private:
  const ::ai::inworld::packets::EmotionEvent& _internal_emotions() const;
  ::ai::inworld::packets::EmotionEvent* _internal_mutable_emotions();
  public:
  void unsafe_arena_set_allocated_emotions(
      ::ai::inworld::packets::EmotionEvent* emotions);
  ::ai::inworld::packets::EmotionEvent* unsafe_arena_release_emotions();

  // .ai.inworld.voices.Voice voice = 3;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::ai::inworld::voices::Voice& voice() const;
  ::ai::inworld::voices::Voice* release_voice();
  ::ai::inworld::voices::Voice* mutable_voice();
  void set_allocated_voice(::ai::inworld::voices::Voice* voice);
  private:
  const ::ai::inworld::voices::Voice& _internal_voice() const;
  ::ai::inworld::voices::Voice* _internal_mutable_voice();
  public:
  void unsafe_arena_set_allocated_voice(
      ::ai::inworld::voices::Voice* voice);
  ::ai::inworld::voices::Voice* unsafe_arena_release_voice();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.VoicePreviewRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::ai::inworld::packets::EmotionEvent* emotions_;
  ::ai::inworld::voices::Voice* voice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class VoicePreviewResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.VoicePreviewResponse) */ {
 public:
  inline VoicePreviewResponse() : VoicePreviewResponse(nullptr) {}
  virtual ~VoicePreviewResponse();

  VoicePreviewResponse(const VoicePreviewResponse& from);
  VoicePreviewResponse(VoicePreviewResponse&& from) noexcept
    : VoicePreviewResponse() {
    *this = ::std::move(from);
  }

  inline VoicePreviewResponse& operator=(const VoicePreviewResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoicePreviewResponse& operator=(VoicePreviewResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoicePreviewResponse& default_instance();

  static inline const VoicePreviewResponse* internal_default_instance() {
    return reinterpret_cast<const VoicePreviewResponse*>(
               &_VoicePreviewResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(VoicePreviewResponse& a, VoicePreviewResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VoicePreviewResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoicePreviewResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoicePreviewResponse* New() const final {
    return CreateMaybeMessage<VoicePreviewResponse>(nullptr);
  }

  VoicePreviewResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoicePreviewResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoicePreviewResponse& from);
  void MergeFrom(const VoicePreviewResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoicePreviewResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.VoicePreviewResponse";
  }
  protected:
  explicit VoicePreviewResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  void set_audio(const std::string& value);
  void set_audio(std::string&& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  std::string* mutable_audio();
  std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.VoicePreviewResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ListBaseVoicesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesRequest) */ {
 public:
  inline ListBaseVoicesRequest() : ListBaseVoicesRequest(nullptr) {}
  virtual ~ListBaseVoicesRequest();

  ListBaseVoicesRequest(const ListBaseVoicesRequest& from);
  ListBaseVoicesRequest(ListBaseVoicesRequest&& from) noexcept
    : ListBaseVoicesRequest() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesRequest& operator=(const ListBaseVoicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesRequest& operator=(ListBaseVoicesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListBaseVoicesRequest& default_instance();

  static inline const ListBaseVoicesRequest* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesRequest*>(
               &_ListBaseVoicesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListBaseVoicesRequest& a, ListBaseVoicesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBaseVoicesRequest* New() const final {
    return CreateMaybeMessage<ListBaseVoicesRequest>(nullptr);
  }

  ListBaseVoicesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBaseVoicesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListBaseVoicesRequest& from);
  void MergeFrom(const ListBaseVoicesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseVoicesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesRequest";
  }
  protected:
  explicit ListBaseVoicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtsTypesFieldNumber = 2,
    kLanguageCodeFieldNumber = 1,
  };
  // repeated .ai.inworld.voices.TTSType tts_types = 2;
  int tts_types_size() const;
  private:
  int _internal_tts_types_size() const;
  public:
  void clear_tts_types();
  private:
  ::ai::inworld::voices::TTSType _internal_tts_types(int index) const;
  void _internal_add_tts_types(::ai::inworld::voices::TTSType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_tts_types();
  public:
  ::ai::inworld::voices::TTSType tts_types(int index) const;
  void set_tts_types(int index, ::ai::inworld::voices::TTSType value);
  void add_tts_types(::ai::inworld::voices::TTSType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& tts_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_tts_types();

  // string language_code = 1;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> tts_types_;
  mutable std::atomic<int> _tts_types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ListBaseVoicesResponce_BaseVoice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice) */ {
 public:
  inline ListBaseVoicesResponce_BaseVoice() : ListBaseVoicesResponce_BaseVoice(nullptr) {}
  virtual ~ListBaseVoicesResponce_BaseVoice();

  ListBaseVoicesResponce_BaseVoice(const ListBaseVoicesResponce_BaseVoice& from);
  ListBaseVoicesResponce_BaseVoice(ListBaseVoicesResponce_BaseVoice&& from) noexcept
    : ListBaseVoicesResponce_BaseVoice() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesResponce_BaseVoice& operator=(const ListBaseVoicesResponce_BaseVoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesResponce_BaseVoice& operator=(ListBaseVoicesResponce_BaseVoice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListBaseVoicesResponce_BaseVoice& default_instance();

  enum TtsMetadataCase {
    kElevenlabsMetadata = 100,
    TTS_METADATA_NOT_SET = 0,
  };

  static inline const ListBaseVoicesResponce_BaseVoice* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesResponce_BaseVoice*>(
               &_ListBaseVoicesResponce_BaseVoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ListBaseVoicesResponce_BaseVoice& a, ListBaseVoicesResponce_BaseVoice& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesResponce_BaseVoice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesResponce_BaseVoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBaseVoicesResponce_BaseVoice* New() const final {
    return CreateMaybeMessage<ListBaseVoicesResponce_BaseVoice>(nullptr);
  }

  ListBaseVoicesResponce_BaseVoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBaseVoicesResponce_BaseVoice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListBaseVoicesResponce_BaseVoice& from);
  void MergeFrom(const ListBaseVoicesResponce_BaseVoice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseVoicesResponce_BaseVoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesResponce.BaseVoice";
  }
  protected:
  explicit ListBaseVoicesResponce_BaseVoice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodesFieldNumber = 1,
    kNameFieldNumber = 2,
    kGenderFieldNumber = 3,
    kNaturalSampleRateHertzFieldNumber = 4,
    kAgeFieldNumber = 5,
    kElevenlabsMetadataFieldNumber = 100,
  };
  // repeated string language_codes = 1;
  int language_codes_size() const;
  private:
  int _internal_language_codes_size() const;
  public:
  void clear_language_codes();
  const std::string& language_codes(int index) const;
  std::string* mutable_language_codes(int index);
  void set_language_codes(int index, const std::string& value);
  void set_language_codes(int index, std::string&& value);
  void set_language_codes(int index, const char* value);
  void set_language_codes(int index, const char* value, size_t size);
  std::string* add_language_codes();
  void add_language_codes(const std::string& value);
  void add_language_codes(std::string&& value);
  void add_language_codes(const char* value);
  void add_language_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& language_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_language_codes();
  private:
  const std::string& _internal_language_codes(int index) const;
  std::string* _internal_add_language_codes();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ai.inworld.voices.Gender gender = 3;
  void clear_gender();
  ::ai::inworld::voices::Gender gender() const;
  void set_gender(::ai::inworld::voices::Gender value);
  private:
  ::ai::inworld::voices::Gender _internal_gender() const;
  void _internal_set_gender(::ai::inworld::voices::Gender value);
  public:

  // int32 naturalSampleRateHertz = 4;
  void clear_naturalsampleratehertz();
  ::PROTOBUF_NAMESPACE_ID::int32 naturalsampleratehertz() const;
  void set_naturalsampleratehertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_naturalsampleratehertz() const;
  void _internal_set_naturalsampleratehertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ai.inworld.voices.Age age = 5;
  void clear_age();
  ::ai::inworld::voices::Age age() const;
  void set_age(::ai::inworld::voices::Age value);
  private:
  ::ai::inworld::voices::Age _internal_age() const;
  void _internal_set_age(::ai::inworld::voices::Age value);
  public:

  // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
  bool has_elevenlabs_metadata() const;
  private:
  bool _internal_has_elevenlabs_metadata() const;
  public:
  void clear_elevenlabs_metadata();
  const ::ai::inworld::voices::Voice_ElevenLabsMetadata& elevenlabs_metadata() const;
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* release_elevenlabs_metadata();
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* mutable_elevenlabs_metadata();
  void set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata);
  private:
  const ::ai::inworld::voices::Voice_ElevenLabsMetadata& _internal_elevenlabs_metadata() const;
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* _internal_mutable_elevenlabs_metadata();
  public:
  void unsafe_arena_set_allocated_elevenlabs_metadata(
      ::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata);
  ::ai::inworld::voices::Voice_ElevenLabsMetadata* unsafe_arena_release_elevenlabs_metadata();

  void clear_tts_metadata();
  TtsMetadataCase tts_metadata_case() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice)
 private:
  class _Internal;
  void set_has_elevenlabs_metadata();

  inline bool has_tts_metadata() const;
  inline void clear_has_tts_metadata();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> language_codes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 naturalsampleratehertz_;
  int age_;
  union TtsMetadataUnion {
    TtsMetadataUnion() {}
    ::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata_;
  } tts_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ListBaseVoicesResponce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ListBaseVoicesResponce) */ {
 public:
  inline ListBaseVoicesResponce() : ListBaseVoicesResponce(nullptr) {}
  virtual ~ListBaseVoicesResponce();

  ListBaseVoicesResponce(const ListBaseVoicesResponce& from);
  ListBaseVoicesResponce(ListBaseVoicesResponce&& from) noexcept
    : ListBaseVoicesResponce() {
    *this = ::std::move(from);
  }

  inline ListBaseVoicesResponce& operator=(const ListBaseVoicesResponce& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListBaseVoicesResponce& operator=(ListBaseVoicesResponce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListBaseVoicesResponce& default_instance();

  static inline const ListBaseVoicesResponce* internal_default_instance() {
    return reinterpret_cast<const ListBaseVoicesResponce*>(
               &_ListBaseVoicesResponce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ListBaseVoicesResponce& a, ListBaseVoicesResponce& b) {
    a.Swap(&b);
  }
  inline void Swap(ListBaseVoicesResponce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListBaseVoicesResponce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListBaseVoicesResponce* New() const final {
    return CreateMaybeMessage<ListBaseVoicesResponce>(nullptr);
  }

  ListBaseVoicesResponce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListBaseVoicesResponce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListBaseVoicesResponce& from);
  void MergeFrom(const ListBaseVoicesResponce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBaseVoicesResponce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ListBaseVoicesResponce";
  }
  protected:
  explicit ListBaseVoicesResponce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListBaseVoicesResponce_BaseVoice BaseVoice;

  // accessors -------------------------------------------------------

  enum : int {
    kGoogleVoicesFieldNumber = 1,
    kInworldVoicesFieldNumber = 2,
    kElevenLabsVoicesFieldNumber = 3,
  };
  // repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice googleVoices = 1;
  int googlevoices_size() const;
  private:
  int _internal_googlevoices_size() const;
  public:
  void clear_googlevoices();
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* mutable_googlevoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
      mutable_googlevoices();
  private:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& _internal_googlevoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _internal_add_googlevoices();
  public:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& googlevoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* add_googlevoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
      googlevoices() const;

  // repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice inworldVoices = 2;
  int inworldvoices_size() const;
  private:
  int _internal_inworldvoices_size() const;
  public:
  void clear_inworldvoices();
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* mutable_inworldvoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
      mutable_inworldvoices();
  private:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& _internal_inworldvoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _internal_add_inworldvoices();
  public:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& inworldvoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* add_inworldvoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
      inworldvoices() const;

  // repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice elevenLabsVoices = 3;
  int elevenlabsvoices_size() const;
  private:
  int _internal_elevenlabsvoices_size() const;
  public:
  void clear_elevenlabsvoices();
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* mutable_elevenlabsvoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
      mutable_elevenlabsvoices();
  private:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& _internal_elevenlabsvoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* _internal_add_elevenlabsvoices();
  public:
  const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& elevenlabsvoices(int index) const;
  ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* add_elevenlabsvoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
      elevenlabsvoices() const;

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ListBaseVoicesResponce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice > googlevoices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice > inworldvoices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice > elevenlabsvoices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class AccessToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.AccessToken) */ {
 public:
  inline AccessToken() : AccessToken(nullptr) {}
  virtual ~AccessToken();

  AccessToken(const AccessToken& from);
  AccessToken(AccessToken&& from) noexcept
    : AccessToken() {
    *this = ::std::move(from);
  }

  inline AccessToken& operator=(const AccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessToken& operator=(AccessToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccessToken& default_instance();

  static inline const AccessToken* internal_default_instance() {
    return reinterpret_cast<const AccessToken*>(
               &_AccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AccessToken& a, AccessToken& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessToken* New() const final {
    return CreateMaybeMessage<AccessToken>(nullptr);
  }

  AccessToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccessToken& from);
  void MergeFrom(const AccessToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.AccessToken";
  }
  protected:
  explicit AccessToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kExpirationTimeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string session_id = 4;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.AccessToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class GenerateTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.GenerateTokenRequest) */ {
 public:
  inline GenerateTokenRequest() : GenerateTokenRequest(nullptr) {}
  virtual ~GenerateTokenRequest();

  GenerateTokenRequest(const GenerateTokenRequest& from);
  GenerateTokenRequest(GenerateTokenRequest&& from) noexcept
    : GenerateTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateTokenRequest& operator=(const GenerateTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenRequest& operator=(GenerateTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateTokenRequest& default_instance();

  static inline const GenerateTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenRequest*>(
               &_GenerateTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GenerateTokenRequest& a, GenerateTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateTokenRequest>(nullptr);
  }

  GenerateTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateTokenRequest& from);
  void MergeFrom(const GenerateTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.GenerateTokenRequest";
  }
  protected:
  explicit GenerateTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string resources = 2;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  const std::string& resources(int index) const;
  std::string* mutable_resources(int index);
  void set_resources(int index, const std::string& value);
  void set_resources(int index, std::string&& value);
  void set_resources(int index, const char* value);
  void set_resources(int index, const char* value, size_t size);
  std::string* add_resources();
  void add_resources(const std::string& value);
  void add_resources(std::string&& value);
  void add_resources(const char* value);
  void add_resources(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resources() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resources();
  private:
  const std::string& _internal_resources(int index) const;
  std::string* _internal_add_resources();
  public:

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.GenerateTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resources_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ActorRelations_Relation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ActorRelations.Relation) */ {
 public:
  inline ActorRelations_Relation() : ActorRelations_Relation(nullptr) {}
  virtual ~ActorRelations_Relation();

  ActorRelations_Relation(const ActorRelations_Relation& from);
  ActorRelations_Relation(ActorRelations_Relation&& from) noexcept
    : ActorRelations_Relation() {
    *this = ::std::move(from);
  }

  inline ActorRelations_Relation& operator=(const ActorRelations_Relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorRelations_Relation& operator=(ActorRelations_Relation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorRelations_Relation& default_instance();

  static inline const ActorRelations_Relation* internal_default_instance() {
    return reinterpret_cast<const ActorRelations_Relation*>(
               &_ActorRelations_Relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ActorRelations_Relation& a, ActorRelations_Relation& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorRelations_Relation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorRelations_Relation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorRelations_Relation* New() const final {
    return CreateMaybeMessage<ActorRelations_Relation>(nullptr);
  }

  ActorRelations_Relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorRelations_Relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorRelations_Relation& from);
  void MergeFrom(const ActorRelations_Relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorRelations_Relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ActorRelations.Relation";
  }
  protected:
  explicit ActorRelations_Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLabelFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ActorRelations.Relation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// -------------------------------------------------------------------

class ActorRelations PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.engine.ActorRelations) */ {
 public:
  inline ActorRelations() : ActorRelations(nullptr) {}
  virtual ~ActorRelations();

  ActorRelations(const ActorRelations& from);
  ActorRelations(ActorRelations&& from) noexcept
    : ActorRelations() {
    *this = ::std::move(from);
  }

  inline ActorRelations& operator=(const ActorRelations& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActorRelations& operator=(ActorRelations&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActorRelations& default_instance();

  static inline const ActorRelations* internal_default_instance() {
    return reinterpret_cast<const ActorRelations*>(
               &_ActorRelations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ActorRelations& a, ActorRelations& b) {
    a.Swap(&b);
  }
  inline void Swap(ActorRelations* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActorRelations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActorRelations* New() const final {
    return CreateMaybeMessage<ActorRelations>(nullptr);
  }

  ActorRelations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActorRelations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActorRelations& from);
  void MergeFrom(const ActorRelations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActorRelations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.engine.ActorRelations";
  }
  protected:
  explicit ActorRelations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_world_2dengine_2eproto);
    return ::descriptor_table_world_2dengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ActorRelations_Relation Relation;

  // accessors -------------------------------------------------------

  enum : int {
    kRelationsFieldNumber = 2,
    kActorIdFieldNumber = 1,
  };
  // repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
  int relations_size() const;
  private:
  int _internal_relations_size() const;
  public:
  void clear_relations();
  ::ai::inworld::engine::ActorRelations_Relation* mutable_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation >*
      mutable_relations();
  private:
  const ::ai::inworld::engine::ActorRelations_Relation& _internal_relations(int index) const;
  ::ai::inworld::engine::ActorRelations_Relation* _internal_add_relations();
  public:
  const ::ai::inworld::engine::ActorRelations_Relation& relations(int index) const;
  ::ai::inworld::engine::ActorRelations_Relation* add_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation >&
      relations() const;

  // string actor_id = 1;
  void clear_actor_id();
  const std::string& actor_id() const;
  void set_actor_id(const std::string& value);
  void set_actor_id(std::string&& value);
  void set_actor_id(const char* value);
  void set_actor_id(const char* value, size_t size);
  std::string* mutable_actor_id();
  std::string* release_actor_id();
  void set_allocated_actor_id(std::string* actor_id);
  private:
  const std::string& _internal_actor_id() const;
  void _internal_set_actor_id(const std::string& value);
  std::string* _internal_mutable_actor_id();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.engine.ActorRelations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation > relations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_world_2dengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CapabilitiesRequest

// bool audio = 1;
inline void CapabilitiesRequest::clear_audio() {
  audio_ = false;
}
inline bool CapabilitiesRequest::_internal_audio() const {
  return audio_;
}
inline bool CapabilitiesRequest::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.audio)
  return _internal_audio();
}
inline void CapabilitiesRequest::_internal_set_audio(bool value) {
  
  audio_ = value;
}
inline void CapabilitiesRequest::set_audio(bool value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.audio)
}

// bool text = 2;
inline void CapabilitiesRequest::clear_text() {
  text_ = false;
}
inline bool CapabilitiesRequest::_internal_text() const {
  return text_;
}
inline bool CapabilitiesRequest::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.text)
  return _internal_text();
}
inline void CapabilitiesRequest::_internal_set_text(bool value) {
  
  text_ = value;
}
inline void CapabilitiesRequest::set_text(bool value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.text)
}

// bool gestures = 3 [deprecated = true];
inline void CapabilitiesRequest::clear_gestures() {
  gestures_ = false;
}
inline bool CapabilitiesRequest::_internal_gestures() const {
  return gestures_;
}
inline bool CapabilitiesRequest::gestures() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.gestures)
  return _internal_gestures();
}
inline void CapabilitiesRequest::_internal_set_gestures(bool value) {
  
  gestures_ = value;
}
inline void CapabilitiesRequest::set_gestures(bool value) {
  _internal_set_gestures(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.gestures)
}

// bool interruptions = 4;
inline void CapabilitiesRequest::clear_interruptions() {
  interruptions_ = false;
}
inline bool CapabilitiesRequest::_internal_interruptions() const {
  return interruptions_;
}
inline bool CapabilitiesRequest::interruptions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.interruptions)
  return _internal_interruptions();
}
inline void CapabilitiesRequest::_internal_set_interruptions(bool value) {
  
  interruptions_ = value;
}
inline void CapabilitiesRequest::set_interruptions(bool value) {
  _internal_set_interruptions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.interruptions)
}

// bool triggers = 5 [deprecated = true];
inline void CapabilitiesRequest::clear_triggers() {
  triggers_ = false;
}
inline bool CapabilitiesRequest::_internal_triggers() const {
  return triggers_;
}
inline bool CapabilitiesRequest::triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.triggers)
  return _internal_triggers();
}
inline void CapabilitiesRequest::_internal_set_triggers(bool value) {
  
  triggers_ = value;
}
inline void CapabilitiesRequest::set_triggers(bool value) {
  _internal_set_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.triggers)
}

// bool emotions = 6;
inline void CapabilitiesRequest::clear_emotions() {
  emotions_ = false;
}
inline bool CapabilitiesRequest::_internal_emotions() const {
  return emotions_;
}
inline bool CapabilitiesRequest::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.emotions)
  return _internal_emotions();
}
inline void CapabilitiesRequest::_internal_set_emotions(bool value) {
  
  emotions_ = value;
}
inline void CapabilitiesRequest::set_emotions(bool value) {
  _internal_set_emotions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.emotions)
}

// bool turn_based_stt = 8;
inline void CapabilitiesRequest::clear_turn_based_stt() {
  turn_based_stt_ = false;
}
inline bool CapabilitiesRequest::_internal_turn_based_stt() const {
  return turn_based_stt_;
}
inline bool CapabilitiesRequest::turn_based_stt() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.turn_based_stt)
  return _internal_turn_based_stt();
}
inline void CapabilitiesRequest::_internal_set_turn_based_stt(bool value) {
  
  turn_based_stt_ = value;
}
inline void CapabilitiesRequest::set_turn_based_stt(bool value) {
  _internal_set_turn_based_stt(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.turn_based_stt)
}

// bool emotion_streaming = 9;
inline void CapabilitiesRequest::clear_emotion_streaming() {
  emotion_streaming_ = false;
}
inline bool CapabilitiesRequest::_internal_emotion_streaming() const {
  return emotion_streaming_;
}
inline bool CapabilitiesRequest::emotion_streaming() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.emotion_streaming)
  return _internal_emotion_streaming();
}
inline void CapabilitiesRequest::_internal_set_emotion_streaming(bool value) {
  
  emotion_streaming_ = value;
}
inline void CapabilitiesRequest::set_emotion_streaming(bool value) {
  _internal_set_emotion_streaming(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.emotion_streaming)
}

// bool silence_events = 10;
inline void CapabilitiesRequest::clear_silence_events() {
  silence_events_ = false;
}
inline bool CapabilitiesRequest::_internal_silence_events() const {
  return silence_events_;
}
inline bool CapabilitiesRequest::silence_events() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.silence_events)
  return _internal_silence_events();
}
inline void CapabilitiesRequest::_internal_set_silence_events(bool value) {
  
  silence_events_ = value;
}
inline void CapabilitiesRequest::set_silence_events(bool value) {
  _internal_set_silence_events(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.silence_events)
}

// bool phoneme_info = 11;
inline void CapabilitiesRequest::clear_phoneme_info() {
  phoneme_info_ = false;
}
inline bool CapabilitiesRequest::_internal_phoneme_info() const {
  return phoneme_info_;
}
inline bool CapabilitiesRequest::phoneme_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.phoneme_info)
  return _internal_phoneme_info();
}
inline void CapabilitiesRequest::_internal_set_phoneme_info(bool value) {
  
  phoneme_info_ = value;
}
inline void CapabilitiesRequest::set_phoneme_info(bool value) {
  _internal_set_phoneme_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.phoneme_info)
}

// bool continuation = 12;
inline void CapabilitiesRequest::clear_continuation() {
  continuation_ = false;
}
inline bool CapabilitiesRequest::_internal_continuation() const {
  return continuation_;
}
inline bool CapabilitiesRequest::continuation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.continuation)
  return _internal_continuation();
}
inline void CapabilitiesRequest::_internal_set_continuation(bool value) {
  
  continuation_ = value;
}
inline void CapabilitiesRequest::set_continuation(bool value) {
  _internal_set_continuation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.continuation)
}

// bool session_cancellation = 13;
inline void CapabilitiesRequest::clear_session_cancellation() {
  session_cancellation_ = false;
}
inline bool CapabilitiesRequest::_internal_session_cancellation() const {
  return session_cancellation_;
}
inline bool CapabilitiesRequest::session_cancellation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.session_cancellation)
  return _internal_session_cancellation();
}
inline void CapabilitiesRequest::_internal_set_session_cancellation(bool value) {
  
  session_cancellation_ = value;
}
inline void CapabilitiesRequest::set_session_cancellation(bool value) {
  _internal_set_session_cancellation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.session_cancellation)
}

// bool narrated_actions = 14;
inline void CapabilitiesRequest::clear_narrated_actions() {
  narrated_actions_ = false;
}
inline bool CapabilitiesRequest::_internal_narrated_actions() const {
  return narrated_actions_;
}
inline bool CapabilitiesRequest::narrated_actions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.narrated_actions)
  return _internal_narrated_actions();
}
inline void CapabilitiesRequest::_internal_set_narrated_actions(bool value) {
  
  narrated_actions_ = value;
}
inline void CapabilitiesRequest::set_narrated_actions(bool value) {
  _internal_set_narrated_actions(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.narrated_actions)
}

// bool regenerate_response = 15;
inline void CapabilitiesRequest::clear_regenerate_response() {
  regenerate_response_ = false;
}
inline bool CapabilitiesRequest::_internal_regenerate_response() const {
  return regenerate_response_;
}
inline bool CapabilitiesRequest::regenerate_response() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.regenerate_response)
  return _internal_regenerate_response();
}
inline void CapabilitiesRequest::_internal_set_regenerate_response(bool value) {
  
  regenerate_response_ = value;
}
inline void CapabilitiesRequest::set_regenerate_response(bool value) {
  _internal_set_regenerate_response(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.regenerate_response)
}

// bool load_scene_in_session = 16;
inline void CapabilitiesRequest::clear_load_scene_in_session() {
  load_scene_in_session_ = false;
}
inline bool CapabilitiesRequest::_internal_load_scene_in_session() const {
  return load_scene_in_session_;
}
inline bool CapabilitiesRequest::load_scene_in_session() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.load_scene_in_session)
  return _internal_load_scene_in_session();
}
inline void CapabilitiesRequest::_internal_set_load_scene_in_session(bool value) {
  
  load_scene_in_session_ = value;
}
inline void CapabilitiesRequest::set_load_scene_in_session(bool value) {
  _internal_set_load_scene_in_session(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.load_scene_in_session)
}

// bool relations = 17;
inline void CapabilitiesRequest::clear_relations() {
  relations_ = false;
}
inline bool CapabilitiesRequest::_internal_relations() const {
  return relations_;
}
inline bool CapabilitiesRequest::relations() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.relations)
  return _internal_relations();
}
inline void CapabilitiesRequest::_internal_set_relations(bool value) {
  
  relations_ = value;
}
inline void CapabilitiesRequest::set_relations(bool value) {
  _internal_set_relations(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.relations)
}

// bool debug_info = 18;
inline void CapabilitiesRequest::clear_debug_info() {
  debug_info_ = false;
}
inline bool CapabilitiesRequest::_internal_debug_info() const {
  return debug_info_;
}
inline bool CapabilitiesRequest::debug_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.debug_info)
  return _internal_debug_info();
}
inline void CapabilitiesRequest::_internal_set_debug_info(bool value) {
  
  debug_info_ = value;
}
inline void CapabilitiesRequest::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.debug_info)
}

// bool tts_mp3 = 19;
inline void CapabilitiesRequest::clear_tts_mp3() {
  tts_mp3_ = false;
}
inline bool CapabilitiesRequest::_internal_tts_mp3() const {
  return tts_mp3_;
}
inline bool CapabilitiesRequest::tts_mp3() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CapabilitiesRequest.tts_mp3)
  return _internal_tts_mp3();
}
inline void CapabilitiesRequest::_internal_set_tts_mp3(bool value) {
  
  tts_mp3_ = value;
}
inline void CapabilitiesRequest::set_tts_mp3(bool value) {
  _internal_set_tts_mp3(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CapabilitiesRequest.tts_mp3)
}

// -------------------------------------------------------------------

// UserRequest

// string name = 1;
inline void UserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserRequest.name)
  return _internal_name();
}
inline void UserRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserRequest.name)
}
inline std::string* UserRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UserRequest::_internal_name() const {
  return name_.Get();
}
inline void UserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.UserRequest.name)
}
inline void UserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.UserRequest.name)
}
inline void UserRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.UserRequest.name)
}
inline std::string* UserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserRequest.name)
}

// string id = 2;
inline void UserRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UserRequest::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserRequest.id)
  return _internal_id();
}
inline void UserRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserRequest.id)
}
inline std::string* UserRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserRequest.id)
  return _internal_mutable_id();
}
inline const std::string& UserRequest::_internal_id() const {
  return id_.Get();
}
inline void UserRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.UserRequest.id)
}
inline void UserRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.UserRequest.id)
}
inline void UserRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.UserRequest.id)
}
inline std::string* UserRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserRequest::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserRequest.id)
}

// -------------------------------------------------------------------

// ClientRequest

// string id = 1;
inline void ClientRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ClientRequest::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.id)
  return _internal_id();
}
inline void ClientRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.id)
}
inline std::string* ClientRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.id)
  return _internal_mutable_id();
}
inline const std::string& ClientRequest::_internal_id() const {
  return id_.Get();
}
inline void ClientRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ClientRequest.id)
}
inline void ClientRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ClientRequest.id)
}
inline void ClientRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ClientRequest.id)
}
inline std::string* ClientRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientRequest::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.id)
}

// string version = 2;
inline void ClientRequest::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ClientRequest::version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ClientRequest.version)
  return _internal_version();
}
inline void ClientRequest::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ClientRequest.version)
}
inline std::string* ClientRequest::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ClientRequest.version)
  return _internal_mutable_version();
}
inline const std::string& ClientRequest::_internal_version() const {
  return version_.Get();
}
inline void ClientRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientRequest::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ClientRequest.version)
}
inline void ClientRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ClientRequest.version)
}
inline void ClientRequest::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ClientRequest.version)
}
inline std::string* ClientRequest::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientRequest::release_version() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ClientRequest.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ClientRequest.version)
}

// -------------------------------------------------------------------

// CreateWorldRequest_CreateAgentRequest

// string brain_name = 1;
inline void CreateWorldRequest_CreateAgentRequest::clear_brain_name() {
  brain_name_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
  return _internal_brain_name();
}
inline void CreateWorldRequest_CreateAgentRequest::set_brain_name(const std::string& value) {
  _internal_set_brain_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}
inline std::string* CreateWorldRequest_CreateAgentRequest::mutable_brain_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
  return _internal_mutable_brain_name();
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::_internal_brain_name() const {
  return brain_name_.Get();
}
inline void CreateWorldRequest_CreateAgentRequest::_internal_set_brain_name(const std::string& value) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldRequest_CreateAgentRequest::set_brain_name(std::string&& value) {
  
  brain_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}
inline void CreateWorldRequest_CreateAgentRequest::set_brain_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}
inline void CreateWorldRequest_CreateAgentRequest::set_brain_name(const char* value,
    size_t size) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}
inline std::string* CreateWorldRequest_CreateAgentRequest::_internal_mutable_brain_name() {
  
  return brain_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldRequest_CreateAgentRequest::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
  return brain_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldRequest_CreateAgentRequest::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  brain_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brain_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.brain_name)
}

// string language_code = 2;
inline void CreateWorldRequest_CreateAgentRequest::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::language_code() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
  return _internal_language_code();
}
inline void CreateWorldRequest_CreateAgentRequest::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}
inline std::string* CreateWorldRequest_CreateAgentRequest::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& CreateWorldRequest_CreateAgentRequest::_internal_language_code() const {
  return language_code_.Get();
}
inline void CreateWorldRequest_CreateAgentRequest::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldRequest_CreateAgentRequest::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}
inline void CreateWorldRequest_CreateAgentRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}
inline void CreateWorldRequest_CreateAgentRequest::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}
inline std::string* CreateWorldRequest_CreateAgentRequest::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldRequest_CreateAgentRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldRequest_CreateAgentRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.language_code)
}

// .ai.inworld.engine.VoicePreset voice_preset = 3;
inline void CreateWorldRequest_CreateAgentRequest::clear_voice_preset() {
  voice_preset_ = 0;
}
inline ::ai::inworld::engine::VoicePreset CreateWorldRequest_CreateAgentRequest::_internal_voice_preset() const {
  return static_cast< ::ai::inworld::engine::VoicePreset >(voice_preset_);
}
inline ::ai::inworld::engine::VoicePreset CreateWorldRequest_CreateAgentRequest::voice_preset() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.voice_preset)
  return _internal_voice_preset();
}
inline void CreateWorldRequest_CreateAgentRequest::_internal_set_voice_preset(::ai::inworld::engine::VoicePreset value) {
  
  voice_preset_ = value;
}
inline void CreateWorldRequest_CreateAgentRequest::set_voice_preset(::ai::inworld::engine::VoicePreset value) {
  _internal_set_voice_preset(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.CreateAgentRequest.voice_preset)
}

// -------------------------------------------------------------------

// CreateWorldRequest_ClientRequest

// string id = 1;
inline void CreateWorldRequest_ClientRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_ClientRequest::id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
  return _internal_id();
}
inline void CreateWorldRequest_ClientRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}
inline std::string* CreateWorldRequest_ClientRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CreateWorldRequest_ClientRequest::_internal_id() const {
  return id_.Get();
}
inline void CreateWorldRequest_ClientRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldRequest_ClientRequest::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}
inline void CreateWorldRequest_ClientRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}
inline void CreateWorldRequest_ClientRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}
inline std::string* CreateWorldRequest_ClientRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldRequest_ClientRequest::release_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldRequest_ClientRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.ClientRequest.id)
}

// string version = 2;
inline void CreateWorldRequest_ClientRequest::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest_ClientRequest::version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
  return _internal_version();
}
inline void CreateWorldRequest_ClientRequest::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}
inline std::string* CreateWorldRequest_ClientRequest::mutable_version() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
  return _internal_mutable_version();
}
inline const std::string& CreateWorldRequest_ClientRequest::_internal_version() const {
  return version_.Get();
}
inline void CreateWorldRequest_ClientRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldRequest_ClientRequest::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}
inline void CreateWorldRequest_ClientRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}
inline void CreateWorldRequest_ClientRequest::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}
inline std::string* CreateWorldRequest_ClientRequest::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldRequest_ClientRequest::release_version() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldRequest_ClientRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.ClientRequest.version)
}

// -------------------------------------------------------------------

// CreateWorldRequest

// string proto_world_name = 1;
inline void CreateWorldRequest::clear_proto_world_name() {
  proto_world_name_.ClearToEmpty();
}
inline const std::string& CreateWorldRequest::proto_world_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.proto_world_name)
  return _internal_proto_world_name();
}
inline void CreateWorldRequest::set_proto_world_name(const std::string& value) {
  _internal_set_proto_world_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}
inline std::string* CreateWorldRequest::mutable_proto_world_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.proto_world_name)
  return _internal_mutable_proto_world_name();
}
inline const std::string& CreateWorldRequest::_internal_proto_world_name() const {
  return proto_world_name_.Get();
}
inline void CreateWorldRequest::_internal_set_proto_world_name(const std::string& value) {
  
  proto_world_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldRequest::set_proto_world_name(std::string&& value) {
  
  proto_world_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}
inline void CreateWorldRequest::set_proto_world_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proto_world_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}
inline void CreateWorldRequest::set_proto_world_name(const char* value,
    size_t size) {
  
  proto_world_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}
inline std::string* CreateWorldRequest::_internal_mutable_proto_world_name() {
  
  return proto_world_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldRequest::release_proto_world_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.proto_world_name)
  return proto_world_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldRequest::set_allocated_proto_world_name(std::string* proto_world_name) {
  if (proto_world_name != nullptr) {
    
  } else {
    
  }
  proto_world_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_world_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.proto_world_name)
}

// repeated .ai.inworld.engine.CreateWorldRequest.CreateAgentRequest create_agent_requests = 2;
inline int CreateWorldRequest::_internal_create_agent_requests_size() const {
  return create_agent_requests_.size();
}
inline int CreateWorldRequest::create_agent_requests_size() const {
  return _internal_create_agent_requests_size();
}
inline void CreateWorldRequest::clear_create_agent_requests() {
  create_agent_requests_.Clear();
}
inline ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* CreateWorldRequest::mutable_create_agent_requests(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return create_agent_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >*
CreateWorldRequest::mutable_create_agent_requests() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return &create_agent_requests_;
}
inline const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& CreateWorldRequest::_internal_create_agent_requests(int index) const {
  return create_agent_requests_.Get(index);
}
inline const ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest& CreateWorldRequest::create_agent_requests(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return _internal_create_agent_requests(index);
}
inline ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* CreateWorldRequest::_internal_add_create_agent_requests() {
  return create_agent_requests_.Add();
}
inline ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest* CreateWorldRequest::add_create_agent_requests() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return _internal_add_create_agent_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldRequest_CreateAgentRequest >&
CreateWorldRequest::create_agent_requests() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.CreateWorldRequest.create_agent_requests)
  return create_agent_requests_;
}

// .ai.inworld.engine.CapabilitiesRequest capabilities = 3;
inline bool CreateWorldRequest::_internal_has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != nullptr;
}
inline bool CreateWorldRequest::has_capabilities() const {
  return _internal_has_capabilities();
}
inline void CreateWorldRequest::clear_capabilities() {
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
}
inline const ::ai::inworld::engine::CapabilitiesRequest& CreateWorldRequest::_internal_capabilities() const {
  const ::ai::inworld::engine::CapabilitiesRequest* p = capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CapabilitiesRequest&>(
      ::ai::inworld::engine::_CapabilitiesRequest_default_instance_);
}
inline const ::ai::inworld::engine::CapabilitiesRequest& CreateWorldRequest::capabilities() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.capabilities)
  return _internal_capabilities();
}
inline void CreateWorldRequest::unsafe_arena_set_allocated_capabilities(
    ::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_);
  }
  capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.CreateWorldRequest.capabilities)
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::release_capabilities() {
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = capabilities_;
  capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::unsafe_arena_release_capabilities() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.capabilities)
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = capabilities_;
  capabilities_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::_internal_mutable_capabilities() {
  
  if (capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(GetArena());
    capabilities_ = p;
  }
  return capabilities_;
}
inline ::ai::inworld::engine::CapabilitiesRequest* CreateWorldRequest::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.capabilities)
  return _internal_mutable_capabilities();
}
inline void CreateWorldRequest::set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capabilities);
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.capabilities)
}

// .ai.inworld.engine.UserRequest user = 4;
inline bool CreateWorldRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool CreateWorldRequest::has_user() const {
  return _internal_has_user();
}
inline void CreateWorldRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::ai::inworld::engine::UserRequest& CreateWorldRequest::_internal_user() const {
  const ::ai::inworld::engine::UserRequest* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserRequest&>(
      ::ai::inworld::engine::_UserRequest_default_instance_);
}
inline const ::ai::inworld::engine::UserRequest& CreateWorldRequest::user() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.user)
  return _internal_user();
}
inline void CreateWorldRequest::unsafe_arena_set_allocated_user(
    ::ai::inworld::engine::UserRequest* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.CreateWorldRequest.user)
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::release_user() {
  
  ::ai::inworld::engine::UserRequest* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.user)
  
  ::ai::inworld::engine::UserRequest* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserRequest>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::ai::inworld::engine::UserRequest* CreateWorldRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.user)
  return _internal_mutable_user();
}
inline void CreateWorldRequest::set_allocated_user(::ai::inworld::engine::UserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.user)
}

// .ai.inworld.engine.CreateWorldRequest.ClientRequest client = 5;
inline bool CreateWorldRequest::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool CreateWorldRequest::has_client() const {
  return _internal_has_client();
}
inline void CreateWorldRequest::clear_client() {
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& CreateWorldRequest::_internal_client() const {
  const ::ai::inworld::engine::CreateWorldRequest_ClientRequest* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CreateWorldRequest_ClientRequest&>(
      ::ai::inworld::engine::_CreateWorldRequest_ClientRequest_default_instance_);
}
inline const ::ai::inworld::engine::CreateWorldRequest_ClientRequest& CreateWorldRequest::client() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldRequest.client)
  return _internal_client();
}
inline void CreateWorldRequest::unsafe_arena_set_allocated_client(
    ::ai::inworld::engine::CreateWorldRequest_ClientRequest* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.CreateWorldRequest.client)
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::release_client() {
  
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* temp = client_;
  client_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldRequest.client)
  
  ::ai::inworld::engine::CreateWorldRequest_ClientRequest* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CreateWorldRequest_ClientRequest>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::ai::inworld::engine::CreateWorldRequest_ClientRequest* CreateWorldRequest::mutable_client() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldRequest.client)
  return _internal_mutable_client();
}
inline void CreateWorldRequest::set_allocated_client(::ai::inworld::engine::CreateWorldRequest_ClientRequest* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldRequest.client)
}

// -------------------------------------------------------------------

// CreateWorldResponse_Agent

// string agent_id = 1;
inline void CreateWorldResponse_Agent::clear_agent_id() {
  agent_id_.ClearToEmpty();
}
inline const std::string& CreateWorldResponse_Agent::agent_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
  return _internal_agent_id();
}
inline void CreateWorldResponse_Agent::set_agent_id(const std::string& value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}
inline std::string* CreateWorldResponse_Agent::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
  return _internal_mutable_agent_id();
}
inline const std::string& CreateWorldResponse_Agent::_internal_agent_id() const {
  return agent_id_.Get();
}
inline void CreateWorldResponse_Agent::_internal_set_agent_id(const std::string& value) {
  
  agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldResponse_Agent::set_agent_id(std::string&& value) {
  
  agent_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}
inline void CreateWorldResponse_Agent::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}
inline void CreateWorldResponse_Agent::set_agent_id(const char* value,
    size_t size) {
  
  agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}
inline std::string* CreateWorldResponse_Agent::_internal_mutable_agent_id() {
  
  return agent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldResponse_Agent::release_agent_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
  return agent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldResponse_Agent::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldResponse.Agent.agent_id)
}

// string brain_name = 2;
inline void CreateWorldResponse_Agent::clear_brain_name() {
  brain_name_.ClearToEmpty();
}
inline const std::string& CreateWorldResponse_Agent::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
  return _internal_brain_name();
}
inline void CreateWorldResponse_Agent::set_brain_name(const std::string& value) {
  _internal_set_brain_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}
inline std::string* CreateWorldResponse_Agent::mutable_brain_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
  return _internal_mutable_brain_name();
}
inline const std::string& CreateWorldResponse_Agent::_internal_brain_name() const {
  return brain_name_.Get();
}
inline void CreateWorldResponse_Agent::_internal_set_brain_name(const std::string& value) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldResponse_Agent::set_brain_name(std::string&& value) {
  
  brain_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}
inline void CreateWorldResponse_Agent::set_brain_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}
inline void CreateWorldResponse_Agent::set_brain_name(const char* value,
    size_t size) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}
inline std::string* CreateWorldResponse_Agent::_internal_mutable_brain_name() {
  
  return brain_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldResponse_Agent::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
  return brain_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldResponse_Agent::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  brain_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brain_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldResponse.Agent.brain_name)
}

// -------------------------------------------------------------------

// CreateWorldResponse

// repeated .ai.inworld.engine.CreateWorldResponse.Agent agents = 1;
inline int CreateWorldResponse::_internal_agents_size() const {
  return agents_.size();
}
inline int CreateWorldResponse::agents_size() const {
  return _internal_agents_size();
}
inline void CreateWorldResponse::clear_agents() {
  agents_.Clear();
}
inline ::ai::inworld::engine::CreateWorldResponse_Agent* CreateWorldResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >*
CreateWorldResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.CreateWorldResponse.agents)
  return &agents_;
}
inline const ::ai::inworld::engine::CreateWorldResponse_Agent& CreateWorldResponse::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::ai::inworld::engine::CreateWorldResponse_Agent& CreateWorldResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.agents)
  return _internal_agents(index);
}
inline ::ai::inworld::engine::CreateWorldResponse_Agent* CreateWorldResponse::_internal_add_agents() {
  return agents_.Add();
}
inline ::ai::inworld::engine::CreateWorldResponse_Agent* CreateWorldResponse::add_agents() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.CreateWorldResponse.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::CreateWorldResponse_Agent >&
CreateWorldResponse::agents() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.CreateWorldResponse.agents)
  return agents_;
}

// string key = 3;
inline void CreateWorldResponse::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CreateWorldResponse::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.CreateWorldResponse.key)
  return _internal_key();
}
inline void CreateWorldResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.CreateWorldResponse.key)
}
inline std::string* CreateWorldResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.CreateWorldResponse.key)
  return _internal_mutable_key();
}
inline const std::string& CreateWorldResponse::_internal_key() const {
  return key_.Get();
}
inline void CreateWorldResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateWorldResponse::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.CreateWorldResponse.key)
}
inline void CreateWorldResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.CreateWorldResponse.key)
}
inline void CreateWorldResponse::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.CreateWorldResponse.key)
}
inline std::string* CreateWorldResponse::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateWorldResponse::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.CreateWorldResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateWorldResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.CreateWorldResponse.key)
}

// -------------------------------------------------------------------

// LoadSceneRequest

// string name = 1;
inline void LoadSceneRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LoadSceneRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.name)
  return _internal_name();
}
inline void LoadSceneRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneRequest.name)
}
inline std::string* LoadSceneRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LoadSceneRequest::_internal_name() const {
  return name_.Get();
}
inline void LoadSceneRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneRequest.name)
}
inline void LoadSceneRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneRequest.name)
}
inline void LoadSceneRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneRequest.name)
}
inline std::string* LoadSceneRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.name)
}

// .ai.inworld.engine.CapabilitiesRequest capabilities = 2;
inline bool LoadSceneRequest::_internal_has_capabilities() const {
  return this != internal_default_instance() && capabilities_ != nullptr;
}
inline bool LoadSceneRequest::has_capabilities() const {
  return _internal_has_capabilities();
}
inline void LoadSceneRequest::clear_capabilities() {
  if (GetArena() == nullptr && capabilities_ != nullptr) {
    delete capabilities_;
  }
  capabilities_ = nullptr;
}
inline const ::ai::inworld::engine::CapabilitiesRequest& LoadSceneRequest::_internal_capabilities() const {
  const ::ai::inworld::engine::CapabilitiesRequest* p = capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::CapabilitiesRequest&>(
      ::ai::inworld::engine::_CapabilitiesRequest_default_instance_);
}
inline const ::ai::inworld::engine::CapabilitiesRequest& LoadSceneRequest::capabilities() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.capabilities)
  return _internal_capabilities();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_capabilities(
    ::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_);
  }
  capabilities_ = capabilities;
  if (capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.capabilities)
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::release_capabilities() {
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = capabilities_;
  capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::unsafe_arena_release_capabilities() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.capabilities)
  
  ::ai::inworld::engine::CapabilitiesRequest* temp = capabilities_;
  capabilities_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::_internal_mutable_capabilities() {
  
  if (capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::CapabilitiesRequest>(GetArena());
    capabilities_ = p;
  }
  return capabilities_;
}
inline ::ai::inworld::engine::CapabilitiesRequest* LoadSceneRequest::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.capabilities)
  return _internal_mutable_capabilities();
}
inline void LoadSceneRequest::set_allocated_capabilities(::ai::inworld::engine::CapabilitiesRequest* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete capabilities_;
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capabilities);
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    
  } else {
    
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.capabilities)
}

// .ai.inworld.engine.UserRequest user = 3;
inline bool LoadSceneRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool LoadSceneRequest::has_user() const {
  return _internal_has_user();
}
inline void LoadSceneRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::ai::inworld::engine::UserRequest& LoadSceneRequest::_internal_user() const {
  const ::ai::inworld::engine::UserRequest* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserRequest&>(
      ::ai::inworld::engine::_UserRequest_default_instance_);
}
inline const ::ai::inworld::engine::UserRequest& LoadSceneRequest::user() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.user)
  return _internal_user();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_user(
    ::ai::inworld::engine::UserRequest* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.user)
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::release_user() {
  
  ::ai::inworld::engine::UserRequest* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.user)
  
  ::ai::inworld::engine::UserRequest* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserRequest>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::ai::inworld::engine::UserRequest* LoadSceneRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.user)
  return _internal_mutable_user();
}
inline void LoadSceneRequest::set_allocated_user(::ai::inworld::engine::UserRequest* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.user)
}

// .ai.inworld.engine.ClientRequest client = 4;
inline bool LoadSceneRequest::_internal_has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline bool LoadSceneRequest::has_client() const {
  return _internal_has_client();
}
inline void LoadSceneRequest::clear_client() {
  if (GetArena() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::ai::inworld::engine::ClientRequest& LoadSceneRequest::_internal_client() const {
  const ::ai::inworld::engine::ClientRequest* p = client_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::ClientRequest&>(
      ::ai::inworld::engine::_ClientRequest_default_instance_);
}
inline const ::ai::inworld::engine::ClientRequest& LoadSceneRequest::client() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.client)
  return _internal_client();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_client(
    ::ai::inworld::engine::ClientRequest* client) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_);
  }
  client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.client)
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::release_client() {
  
  ::ai::inworld::engine::ClientRequest* temp = client_;
  client_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.client)
  
  ::ai::inworld::engine::ClientRequest* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::_internal_mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::ClientRequest>(GetArena());
    client_ = p;
  }
  return client_;
}
inline ::ai::inworld::engine::ClientRequest* LoadSceneRequest::mutable_client() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.client)
  return _internal_mutable_client();
}
inline void LoadSceneRequest::set_allocated_client(::ai::inworld::engine::ClientRequest* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client);
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.client)
}

// .ai.inworld.engine.AudioSettings audio_settings = 5;
inline bool LoadSceneRequest::_internal_has_audio_settings() const {
  return this != internal_default_instance() && audio_settings_ != nullptr;
}
inline bool LoadSceneRequest::has_audio_settings() const {
  return _internal_has_audio_settings();
}
inline void LoadSceneRequest::clear_audio_settings() {
  if (GetArena() == nullptr && audio_settings_ != nullptr) {
    delete audio_settings_;
  }
  audio_settings_ = nullptr;
}
inline const ::ai::inworld::engine::AudioSettings& LoadSceneRequest::_internal_audio_settings() const {
  const ::ai::inworld::engine::AudioSettings* p = audio_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::AudioSettings&>(
      ::ai::inworld::engine::_AudioSettings_default_instance_);
}
inline const ::ai::inworld::engine::AudioSettings& LoadSceneRequest::audio_settings() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.audio_settings)
  return _internal_audio_settings();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_audio_settings(
    ::ai::inworld::engine::AudioSettings* audio_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_settings_);
  }
  audio_settings_ = audio_settings;
  if (audio_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.audio_settings)
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::release_audio_settings() {
  
  ::ai::inworld::engine::AudioSettings* temp = audio_settings_;
  audio_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::unsafe_arena_release_audio_settings() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.audio_settings)
  
  ::ai::inworld::engine::AudioSettings* temp = audio_settings_;
  audio_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::_internal_mutable_audio_settings() {
  
  if (audio_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::AudioSettings>(GetArena());
    audio_settings_ = p;
  }
  return audio_settings_;
}
inline ::ai::inworld::engine::AudioSettings* LoadSceneRequest::mutable_audio_settings() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.audio_settings)
  return _internal_mutable_audio_settings();
}
inline void LoadSceneRequest::set_allocated_audio_settings(::ai::inworld::engine::AudioSettings* audio_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_settings_;
  }
  if (audio_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio_settings);
    if (message_arena != submessage_arena) {
      audio_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_settings, submessage_arena);
    }
    
  } else {
    
  }
  audio_settings_ = audio_settings;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.audio_settings)
}

// .ai.inworld.engine.UserSettings user_settings = 6;
inline bool LoadSceneRequest::_internal_has_user_settings() const {
  return this != internal_default_instance() && user_settings_ != nullptr;
}
inline bool LoadSceneRequest::has_user_settings() const {
  return _internal_has_user_settings();
}
inline void LoadSceneRequest::clear_user_settings() {
  if (GetArena() == nullptr && user_settings_ != nullptr) {
    delete user_settings_;
  }
  user_settings_ = nullptr;
}
inline const ::ai::inworld::engine::UserSettings& LoadSceneRequest::_internal_user_settings() const {
  const ::ai::inworld::engine::UserSettings* p = user_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserSettings&>(
      ::ai::inworld::engine::_UserSettings_default_instance_);
}
inline const ::ai::inworld::engine::UserSettings& LoadSceneRequest::user_settings() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.user_settings)
  return _internal_user_settings();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_user_settings(
    ::ai::inworld::engine::UserSettings* user_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_settings_);
  }
  user_settings_ = user_settings;
  if (user_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.user_settings)
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::release_user_settings() {
  
  ::ai::inworld::engine::UserSettings* temp = user_settings_;
  user_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::unsafe_arena_release_user_settings() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.user_settings)
  
  ::ai::inworld::engine::UserSettings* temp = user_settings_;
  user_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::_internal_mutable_user_settings() {
  
  if (user_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserSettings>(GetArena());
    user_settings_ = p;
  }
  return user_settings_;
}
inline ::ai::inworld::engine::UserSettings* LoadSceneRequest::mutable_user_settings() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.user_settings)
  return _internal_mutable_user_settings();
}
inline void LoadSceneRequest::set_allocated_user_settings(::ai::inworld::engine::UserSettings* user_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_settings_;
  }
  if (user_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user_settings);
    if (message_arena != submessage_arena) {
      user_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_settings, submessage_arena);
    }
    
  } else {
    
  }
  user_settings_ = user_settings;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.user_settings)
}

// .ai.inworld.engine.SessionContinuation session_continuation = 7;
inline bool LoadSceneRequest::_internal_has_session_continuation() const {
  return this != internal_default_instance() && session_continuation_ != nullptr;
}
inline bool LoadSceneRequest::has_session_continuation() const {
  return _internal_has_session_continuation();
}
inline void LoadSceneRequest::clear_session_continuation() {
  if (GetArena() == nullptr && session_continuation_ != nullptr) {
    delete session_continuation_;
  }
  session_continuation_ = nullptr;
}
inline const ::ai::inworld::engine::SessionContinuation& LoadSceneRequest::_internal_session_continuation() const {
  const ::ai::inworld::engine::SessionContinuation* p = session_continuation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::SessionContinuation&>(
      ::ai::inworld::engine::_SessionContinuation_default_instance_);
}
inline const ::ai::inworld::engine::SessionContinuation& LoadSceneRequest::session_continuation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneRequest.session_continuation)
  return _internal_session_continuation();
}
inline void LoadSceneRequest::unsafe_arena_set_allocated_session_continuation(
    ::ai::inworld::engine::SessionContinuation* session_continuation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_continuation_);
  }
  session_continuation_ = session_continuation;
  if (session_continuation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneRequest.session_continuation)
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::release_session_continuation() {
  
  ::ai::inworld::engine::SessionContinuation* temp = session_continuation_;
  session_continuation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::unsafe_arena_release_session_continuation() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneRequest.session_continuation)
  
  ::ai::inworld::engine::SessionContinuation* temp = session_continuation_;
  session_continuation_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::_internal_mutable_session_continuation() {
  
  if (session_continuation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::SessionContinuation>(GetArena());
    session_continuation_ = p;
  }
  return session_continuation_;
}
inline ::ai::inworld::engine::SessionContinuation* LoadSceneRequest::mutable_session_continuation() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneRequest.session_continuation)
  return _internal_mutable_session_continuation();
}
inline void LoadSceneRequest::set_allocated_session_continuation(::ai::inworld::engine::SessionContinuation* session_continuation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete session_continuation_;
  }
  if (session_continuation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session_continuation);
    if (message_arena != submessage_arena) {
      session_continuation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_continuation, submessage_arena);
    }
    
  } else {
    
  }
  session_continuation_ = session_continuation;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneRequest.session_continuation)
}

// -------------------------------------------------------------------

// AudioSettings

// uint32 stt_sample_rate_hertz = 1;
inline void AudioSettings::clear_stt_sample_rate_hertz() {
  stt_sample_rate_hertz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioSettings::_internal_stt_sample_rate_hertz() const {
  return stt_sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioSettings::stt_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AudioSettings.stt_sample_rate_hertz)
  return _internal_stt_sample_rate_hertz();
}
inline void AudioSettings::_internal_set_stt_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stt_sample_rate_hertz_ = value;
}
inline void AudioSettings::set_stt_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stt_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AudioSettings.stt_sample_rate_hertz)
}

// uint32 tts_sample_rate_hertz = 2;
inline void AudioSettings::clear_tts_sample_rate_hertz() {
  tts_sample_rate_hertz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioSettings::_internal_tts_sample_rate_hertz() const {
  return tts_sample_rate_hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioSettings::tts_sample_rate_hertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AudioSettings.tts_sample_rate_hertz)
  return _internal_tts_sample_rate_hertz();
}
inline void AudioSettings::_internal_set_tts_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tts_sample_rate_hertz_ = value;
}
inline void AudioSettings::set_tts_sample_rate_hertz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tts_sample_rate_hertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AudioSettings.tts_sample_rate_hertz)
}

// -------------------------------------------------------------------

// UserSettings_PlayerProfile_PlayerField

// string field_id = 1;
inline void UserSettings_PlayerProfile_PlayerField::clear_field_id() {
  field_id_.ClearToEmpty();
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::field_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
  return _internal_field_id();
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_id(const std::string& value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline std::string* UserSettings_PlayerProfile_PlayerField::mutable_field_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
  return _internal_mutable_field_id();
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::_internal_field_id() const {
  return field_id_.Get();
}
inline void UserSettings_PlayerProfile_PlayerField::_internal_set_field_id(const std::string& value) {
  
  field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_id(std::string&& value) {
  
  field_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_id(const char* value,
    size_t size) {
  
  field_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}
inline std::string* UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_id() {
  
  return field_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserSettings_PlayerProfile_PlayerField::release_field_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
  return field_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSettings_PlayerProfile_PlayerField::set_allocated_field_id(std::string* field_id) {
  if (field_id != nullptr) {
    
  } else {
    
  }
  field_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_id)
}

// string field_value = 2;
inline void UserSettings_PlayerProfile_PlayerField::clear_field_value() {
  field_value_.ClearToEmpty();
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::field_value() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
  return _internal_field_value();
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_value(const std::string& value) {
  _internal_set_field_value(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline std::string* UserSettings_PlayerProfile_PlayerField::mutable_field_value() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
  return _internal_mutable_field_value();
}
inline const std::string& UserSettings_PlayerProfile_PlayerField::_internal_field_value() const {
  return field_value_.Get();
}
inline void UserSettings_PlayerProfile_PlayerField::_internal_set_field_value(const std::string& value) {
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_value(std::string&& value) {
  
  field_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline void UserSettings_PlayerProfile_PlayerField::set_field_value(const char* value,
    size_t size) {
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}
inline std::string* UserSettings_PlayerProfile_PlayerField::_internal_mutable_field_value() {
  
  return field_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserSettings_PlayerProfile_PlayerField::release_field_value() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
  return field_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserSettings_PlayerProfile_PlayerField::set_allocated_field_value(std::string* field_value) {
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserSettings.PlayerProfile.PlayerField.field_value)
}

// -------------------------------------------------------------------

// UserSettings_PlayerProfile

// repeated .ai.inworld.engine.UserSettings.PlayerProfile.PlayerField fields = 3;
inline int UserSettings_PlayerProfile::_internal_fields_size() const {
  return fields_.size();
}
inline int UserSettings_PlayerProfile::fields_size() const {
  return _internal_fields_size();
}
inline void UserSettings_PlayerProfile::clear_fields() {
  fields_.Clear();
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* UserSettings_PlayerProfile::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >*
UserSettings_PlayerProfile::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return &fields_;
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField& UserSettings_PlayerProfile::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField& UserSettings_PlayerProfile::fields(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return _internal_fields(index);
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* UserSettings_PlayerProfile::_internal_add_fields() {
  return fields_.Add();
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField* UserSettings_PlayerProfile::add_fields() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::UserSettings_PlayerProfile_PlayerField >&
UserSettings_PlayerProfile::fields() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.UserSettings.PlayerProfile.fields)
  return fields_;
}

// -------------------------------------------------------------------

// UserSettings

// bool view_transcript_consent = 1;
inline void UserSettings::clear_view_transcript_consent() {
  view_transcript_consent_ = false;
}
inline bool UserSettings::_internal_view_transcript_consent() const {
  return view_transcript_consent_;
}
inline bool UserSettings::view_transcript_consent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.view_transcript_consent)
  return _internal_view_transcript_consent();
}
inline void UserSettings::_internal_set_view_transcript_consent(bool value) {
  
  view_transcript_consent_ = value;
}
inline void UserSettings::set_view_transcript_consent(bool value) {
  _internal_set_view_transcript_consent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.UserSettings.view_transcript_consent)
}

// .ai.inworld.engine.UserSettings.PlayerProfile player_profile = 2;
inline bool UserSettings::_internal_has_player_profile() const {
  return this != internal_default_instance() && player_profile_ != nullptr;
}
inline bool UserSettings::has_player_profile() const {
  return _internal_has_player_profile();
}
inline void UserSettings::clear_player_profile() {
  if (GetArena() == nullptr && player_profile_ != nullptr) {
    delete player_profile_;
  }
  player_profile_ = nullptr;
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile& UserSettings::_internal_player_profile() const {
  const ::ai::inworld::engine::UserSettings_PlayerProfile* p = player_profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::UserSettings_PlayerProfile&>(
      ::ai::inworld::engine::_UserSettings_PlayerProfile_default_instance_);
}
inline const ::ai::inworld::engine::UserSettings_PlayerProfile& UserSettings::player_profile() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.UserSettings.player_profile)
  return _internal_player_profile();
}
inline void UserSettings::unsafe_arena_set_allocated_player_profile(
    ::ai::inworld::engine::UserSettings_PlayerProfile* player_profile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_profile_);
  }
  player_profile_ = player_profile;
  if (player_profile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.UserSettings.player_profile)
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::release_player_profile() {
  
  ::ai::inworld::engine::UserSettings_PlayerProfile* temp = player_profile_;
  player_profile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::unsafe_arena_release_player_profile() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.UserSettings.player_profile)
  
  ::ai::inworld::engine::UserSettings_PlayerProfile* temp = player_profile_;
  player_profile_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::_internal_mutable_player_profile() {
  
  if (player_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::UserSettings_PlayerProfile>(GetArena());
    player_profile_ = p;
  }
  return player_profile_;
}
inline ::ai::inworld::engine::UserSettings_PlayerProfile* UserSettings::mutable_player_profile() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.UserSettings.player_profile)
  return _internal_mutable_player_profile();
}
inline void UserSettings::set_allocated_player_profile(::ai::inworld::engine::UserSettings_PlayerProfile* player_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_profile_;
  }
  if (player_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_profile);
    if (message_arena != submessage_arena) {
      player_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_profile, submessage_arena);
    }
    
  } else {
    
  }
  player_profile_ = player_profile;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.UserSettings.player_profile)
}

// -------------------------------------------------------------------

// SessionContinuation_ContinuationInfo

// int64 millis_passed = 1;
inline void SessionContinuation_ContinuationInfo::clear_millis_passed() {
  millis_passed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SessionContinuation_ContinuationInfo::_internal_millis_passed() const {
  return millis_passed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SessionContinuation_ContinuationInfo::millis_passed() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.ContinuationInfo.millis_passed)
  return _internal_millis_passed();
}
inline void SessionContinuation_ContinuationInfo::_internal_set_millis_passed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  millis_passed_ = value;
}
inline void SessionContinuation_ContinuationInfo::set_millis_passed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_millis_passed(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.SessionContinuation.ContinuationInfo.millis_passed)
}

// -------------------------------------------------------------------

// SessionContinuation

// .ai.inworld.engine.SessionContinuation.ContinuationInfo continuation_info = 1;
inline bool SessionContinuation::_internal_has_continuation_info() const {
  return this != internal_default_instance() && continuation_info_ != nullptr;
}
inline bool SessionContinuation::has_continuation_info() const {
  return _internal_has_continuation_info();
}
inline void SessionContinuation::clear_continuation_info() {
  if (GetArena() == nullptr && continuation_info_ != nullptr) {
    delete continuation_info_;
  }
  continuation_info_ = nullptr;
}
inline const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& SessionContinuation::_internal_continuation_info() const {
  const ::ai::inworld::engine::SessionContinuation_ContinuationInfo* p = continuation_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::SessionContinuation_ContinuationInfo&>(
      ::ai::inworld::engine::_SessionContinuation_ContinuationInfo_default_instance_);
}
inline const ::ai::inworld::engine::SessionContinuation_ContinuationInfo& SessionContinuation::continuation_info() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.continuation_info)
  return _internal_continuation_info();
}
inline void SessionContinuation::unsafe_arena_set_allocated_continuation_info(
    ::ai::inworld::engine::SessionContinuation_ContinuationInfo* continuation_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(continuation_info_);
  }
  continuation_info_ = continuation_info;
  if (continuation_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.SessionContinuation.continuation_info)
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::release_continuation_info() {
  
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* temp = continuation_info_;
  continuation_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::unsafe_arena_release_continuation_info() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.SessionContinuation.continuation_info)
  
  ::ai::inworld::engine::SessionContinuation_ContinuationInfo* temp = continuation_info_;
  continuation_info_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::_internal_mutable_continuation_info() {
  
  if (continuation_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::SessionContinuation_ContinuationInfo>(GetArena());
    continuation_info_ = p;
  }
  return continuation_info_;
}
inline ::ai::inworld::engine::SessionContinuation_ContinuationInfo* SessionContinuation::mutable_continuation_info() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.SessionContinuation.continuation_info)
  return _internal_mutable_continuation_info();
}
inline void SessionContinuation::set_allocated_continuation_info(::ai::inworld::engine::SessionContinuation_ContinuationInfo* continuation_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete continuation_info_;
  }
  if (continuation_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(continuation_info);
    if (message_arena != submessage_arena) {
      continuation_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, continuation_info, submessage_arena);
    }
    
  } else {
    
  }
  continuation_info_ = continuation_info;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.SessionContinuation.continuation_info)
}

// .ai.inworld.engine.PreviousDialog previous_dialog = 2;
inline bool SessionContinuation::_internal_has_previous_dialog() const {
  return this != internal_default_instance() && previous_dialog_ != nullptr;
}
inline bool SessionContinuation::has_previous_dialog() const {
  return _internal_has_previous_dialog();
}
inline void SessionContinuation::clear_previous_dialog() {
  if (GetArena() == nullptr && previous_dialog_ != nullptr) {
    delete previous_dialog_;
  }
  previous_dialog_ = nullptr;
}
inline const ::ai::inworld::engine::PreviousDialog& SessionContinuation::_internal_previous_dialog() const {
  const ::ai::inworld::engine::PreviousDialog* p = previous_dialog_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::PreviousDialog&>(
      ::ai::inworld::engine::_PreviousDialog_default_instance_);
}
inline const ::ai::inworld::engine::PreviousDialog& SessionContinuation::previous_dialog() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.previous_dialog)
  return _internal_previous_dialog();
}
inline void SessionContinuation::unsafe_arena_set_allocated_previous_dialog(
    ::ai::inworld::engine::PreviousDialog* previous_dialog) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_dialog_);
  }
  previous_dialog_ = previous_dialog;
  if (previous_dialog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.SessionContinuation.previous_dialog)
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::release_previous_dialog() {
  
  ::ai::inworld::engine::PreviousDialog* temp = previous_dialog_;
  previous_dialog_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::unsafe_arena_release_previous_dialog() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.SessionContinuation.previous_dialog)
  
  ::ai::inworld::engine::PreviousDialog* temp = previous_dialog_;
  previous_dialog_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::_internal_mutable_previous_dialog() {
  
  if (previous_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::PreviousDialog>(GetArena());
    previous_dialog_ = p;
  }
  return previous_dialog_;
}
inline ::ai::inworld::engine::PreviousDialog* SessionContinuation::mutable_previous_dialog() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.SessionContinuation.previous_dialog)
  return _internal_mutable_previous_dialog();
}
inline void SessionContinuation::set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* previous_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previous_dialog_;
  }
  if (previous_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previous_dialog);
    if (message_arena != submessage_arena) {
      previous_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_dialog, submessage_arena);
    }
    
  } else {
    
  }
  previous_dialog_ = previous_dialog;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.SessionContinuation.previous_dialog)
}

// bytes previous_state = 3;
inline void SessionContinuation::clear_previous_state() {
  previous_state_.ClearToEmpty();
}
inline const std::string& SessionContinuation::previous_state() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.SessionContinuation.previous_state)
  return _internal_previous_state();
}
inline void SessionContinuation::set_previous_state(const std::string& value) {
  _internal_set_previous_state(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.SessionContinuation.previous_state)
}
inline std::string* SessionContinuation::mutable_previous_state() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.SessionContinuation.previous_state)
  return _internal_mutable_previous_state();
}
inline const std::string& SessionContinuation::_internal_previous_state() const {
  return previous_state_.Get();
}
inline void SessionContinuation::_internal_set_previous_state(const std::string& value) {
  
  previous_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionContinuation::set_previous_state(std::string&& value) {
  
  previous_state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.SessionContinuation.previous_state)
}
inline void SessionContinuation::set_previous_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.SessionContinuation.previous_state)
}
inline void SessionContinuation::set_previous_state(const void* value,
    size_t size) {
  
  previous_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.SessionContinuation.previous_state)
}
inline std::string* SessionContinuation::_internal_mutable_previous_state() {
  
  return previous_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionContinuation::release_previous_state() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.SessionContinuation.previous_state)
  return previous_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionContinuation::set_allocated_previous_state(std::string* previous_state) {
  if (previous_state != nullptr) {
    
  } else {
    
  }
  previous_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.SessionContinuation.previous_state)
}

// -------------------------------------------------------------------

// PreviousDialog_Phrase

// .ai.inworld.engine.PreviousDialog.DialogParticipant talker = 1;
inline void PreviousDialog_Phrase::clear_talker() {
  talker_ = 0;
}
inline ::ai::inworld::engine::PreviousDialog_DialogParticipant PreviousDialog_Phrase::_internal_talker() const {
  return static_cast< ::ai::inworld::engine::PreviousDialog_DialogParticipant >(talker_);
}
inline ::ai::inworld::engine::PreviousDialog_DialogParticipant PreviousDialog_Phrase::talker() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousDialog.Phrase.talker)
  return _internal_talker();
}
inline void PreviousDialog_Phrase::_internal_set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value) {
  
  talker_ = value;
}
inline void PreviousDialog_Phrase::set_talker(::ai::inworld::engine::PreviousDialog_DialogParticipant value) {
  _internal_set_talker(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousDialog.Phrase.talker)
}

// string phrase = 2;
inline void PreviousDialog_Phrase::clear_phrase() {
  phrase_.ClearToEmpty();
}
inline const std::string& PreviousDialog_Phrase::phrase() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousDialog.Phrase.phrase)
  return _internal_phrase();
}
inline void PreviousDialog_Phrase::set_phrase(const std::string& value) {
  _internal_set_phrase(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}
inline std::string* PreviousDialog_Phrase::mutable_phrase() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousDialog.Phrase.phrase)
  return _internal_mutable_phrase();
}
inline const std::string& PreviousDialog_Phrase::_internal_phrase() const {
  return phrase_.Get();
}
inline void PreviousDialog_Phrase::_internal_set_phrase(const std::string& value) {
  
  phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviousDialog_Phrase::set_phrase(std::string&& value) {
  
  phrase_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}
inline void PreviousDialog_Phrase::set_phrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}
inline void PreviousDialog_Phrase::set_phrase(const char* value,
    size_t size) {
  
  phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}
inline std::string* PreviousDialog_Phrase::_internal_mutable_phrase() {
  
  return phrase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviousDialog_Phrase::release_phrase() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousDialog.Phrase.phrase)
  return phrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviousDialog_Phrase::set_allocated_phrase(std::string* phrase) {
  if (phrase != nullptr) {
    
  } else {
    
  }
  phrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phrase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousDialog.Phrase.phrase)
}

// -------------------------------------------------------------------

// PreviousDialog

// repeated .ai.inworld.engine.PreviousDialog.Phrase phrases = 1;
inline int PreviousDialog::_internal_phrases_size() const {
  return phrases_.size();
}
inline int PreviousDialog::phrases_size() const {
  return _internal_phrases_size();
}
inline void PreviousDialog::clear_phrases() {
  phrases_.Clear();
}
inline ::ai::inworld::engine::PreviousDialog_Phrase* PreviousDialog::mutable_phrases(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousDialog.phrases)
  return phrases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase >*
PreviousDialog::mutable_phrases() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousDialog.phrases)
  return &phrases_;
}
inline const ::ai::inworld::engine::PreviousDialog_Phrase& PreviousDialog::_internal_phrases(int index) const {
  return phrases_.Get(index);
}
inline const ::ai::inworld::engine::PreviousDialog_Phrase& PreviousDialog::phrases(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousDialog.phrases)
  return _internal_phrases(index);
}
inline ::ai::inworld::engine::PreviousDialog_Phrase* PreviousDialog::_internal_add_phrases() {
  return phrases_.Add();
}
inline ::ai::inworld::engine::PreviousDialog_Phrase* PreviousDialog::add_phrases() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousDialog.phrases)
  return _internal_add_phrases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousDialog_Phrase >&
PreviousDialog::phrases() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousDialog.phrases)
  return phrases_;
}

// -------------------------------------------------------------------

// PreviousState_StateHolder

// string brain_name = 1;
inline void PreviousState_StateHolder::clear_brain_name() {
  brain_name_.ClearToEmpty();
}
inline const std::string& PreviousState_StateHolder::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.brain_name)
  return _internal_brain_name();
}
inline void PreviousState_StateHolder::set_brain_name(const std::string& value) {
  _internal_set_brain_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}
inline std::string* PreviousState_StateHolder::mutable_brain_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.brain_name)
  return _internal_mutable_brain_name();
}
inline const std::string& PreviousState_StateHolder::_internal_brain_name() const {
  return brain_name_.Get();
}
inline void PreviousState_StateHolder::_internal_set_brain_name(const std::string& value) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviousState_StateHolder::set_brain_name(std::string&& value) {
  
  brain_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}
inline void PreviousState_StateHolder::set_brain_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}
inline void PreviousState_StateHolder::set_brain_name(const char* value,
    size_t size) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}
inline std::string* PreviousState_StateHolder::_internal_mutable_brain_name() {
  
  return brain_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviousState_StateHolder::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.StateHolder.brain_name)
  return brain_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviousState_StateHolder::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  brain_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brain_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.StateHolder.brain_name)
}

// bytes state = 2;
inline void PreviousState_StateHolder::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& PreviousState_StateHolder::state() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.state)
  return _internal_state();
}
inline void PreviousState_StateHolder::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.PreviousState.StateHolder.state)
}
inline std::string* PreviousState_StateHolder::mutable_state() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.state)
  return _internal_mutable_state();
}
inline const std::string& PreviousState_StateHolder::_internal_state() const {
  return state_.Get();
}
inline void PreviousState_StateHolder::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviousState_StateHolder::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.PreviousState.StateHolder.state)
}
inline void PreviousState_StateHolder::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.PreviousState.StateHolder.state)
}
inline void PreviousState_StateHolder::set_state(const void* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.PreviousState.StateHolder.state)
}
inline std::string* PreviousState_StateHolder::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviousState_StateHolder::release_state() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.StateHolder.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviousState_StateHolder::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.StateHolder.state)
}

// .ai.inworld.engine.PreviousDialog previous_dialog = 3 [deprecated = true];
inline bool PreviousState_StateHolder::_internal_has_previous_dialog() const {
  return this != internal_default_instance() && previous_dialog_ != nullptr;
}
inline bool PreviousState_StateHolder::has_previous_dialog() const {
  return _internal_has_previous_dialog();
}
inline void PreviousState_StateHolder::clear_previous_dialog() {
  if (GetArena() == nullptr && previous_dialog_ != nullptr) {
    delete previous_dialog_;
  }
  previous_dialog_ = nullptr;
}
inline const ::ai::inworld::engine::PreviousDialog& PreviousState_StateHolder::_internal_previous_dialog() const {
  const ::ai::inworld::engine::PreviousDialog* p = previous_dialog_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::PreviousDialog&>(
      ::ai::inworld::engine::_PreviousDialog_default_instance_);
}
inline const ::ai::inworld::engine::PreviousDialog& PreviousState_StateHolder::previous_dialog() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
  return _internal_previous_dialog();
}
inline void PreviousState_StateHolder::unsafe_arena_set_allocated_previous_dialog(
    ::ai::inworld::engine::PreviousDialog* previous_dialog) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_dialog_);
  }
  previous_dialog_ = previous_dialog;
  if (previous_dialog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::release_previous_dialog() {
  
  ::ai::inworld::engine::PreviousDialog* temp = previous_dialog_;
  previous_dialog_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::unsafe_arena_release_previous_dialog() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
  
  ::ai::inworld::engine::PreviousDialog* temp = previous_dialog_;
  previous_dialog_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::_internal_mutable_previous_dialog() {
  
  if (previous_dialog_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::PreviousDialog>(GetArena());
    previous_dialog_ = p;
  }
  return previous_dialog_;
}
inline ::ai::inworld::engine::PreviousDialog* PreviousState_StateHolder::mutable_previous_dialog() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
  return _internal_mutable_previous_dialog();
}
inline void PreviousState_StateHolder::set_allocated_previous_dialog(::ai::inworld::engine::PreviousDialog* previous_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previous_dialog_;
  }
  if (previous_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previous_dialog);
    if (message_arena != submessage_arena) {
      previous_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_dialog, submessage_arena);
    }
    
  } else {
    
  }
  previous_dialog_ = previous_dialog;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.PreviousState.StateHolder.previous_dialog)
}

// repeated .ai.inworld.packets.InworldPacket packets = 4;
inline int PreviousState_StateHolder::_internal_packets_size() const {
  return packets_.size();
}
inline int PreviousState_StateHolder::packets_size() const {
  return _internal_packets_size();
}
inline ::ai::inworld::packets::InworldPacket* PreviousState_StateHolder::mutable_packets(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.packets)
  return packets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::InworldPacket >*
PreviousState_StateHolder::mutable_packets() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousState.StateHolder.packets)
  return &packets_;
}
inline const ::ai::inworld::packets::InworldPacket& PreviousState_StateHolder::_internal_packets(int index) const {
  return packets_.Get(index);
}
inline const ::ai::inworld::packets::InworldPacket& PreviousState_StateHolder::packets(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.packets)
  return _internal_packets(index);
}
inline ::ai::inworld::packets::InworldPacket* PreviousState_StateHolder::_internal_add_packets() {
  return packets_.Add();
}
inline ::ai::inworld::packets::InworldPacket* PreviousState_StateHolder::add_packets() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousState.StateHolder.packets)
  return _internal_add_packets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::packets::InworldPacket >&
PreviousState_StateHolder::packets() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousState.StateHolder.packets)
  return packets_;
}

// repeated .ai.inworld.engine.ActorRelations relations_to_actors = 5;
inline int PreviousState_StateHolder::_internal_relations_to_actors_size() const {
  return relations_to_actors_.size();
}
inline int PreviousState_StateHolder::relations_to_actors_size() const {
  return _internal_relations_to_actors_size();
}
inline void PreviousState_StateHolder::clear_relations_to_actors() {
  relations_to_actors_.Clear();
}
inline ::ai::inworld::engine::ActorRelations* PreviousState_StateHolder::mutable_relations_to_actors(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return relations_to_actors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations >*
PreviousState_StateHolder::mutable_relations_to_actors() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return &relations_to_actors_;
}
inline const ::ai::inworld::engine::ActorRelations& PreviousState_StateHolder::_internal_relations_to_actors(int index) const {
  return relations_to_actors_.Get(index);
}
inline const ::ai::inworld::engine::ActorRelations& PreviousState_StateHolder::relations_to_actors(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return _internal_relations_to_actors(index);
}
inline ::ai::inworld::engine::ActorRelations* PreviousState_StateHolder::_internal_add_relations_to_actors() {
  return relations_to_actors_.Add();
}
inline ::ai::inworld::engine::ActorRelations* PreviousState_StateHolder::add_relations_to_actors() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return _internal_add_relations_to_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations >&
PreviousState_StateHolder::relations_to_actors() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousState.StateHolder.relations_to_actors)
  return relations_to_actors_;
}

// -------------------------------------------------------------------

// PreviousState

// repeated .ai.inworld.engine.PreviousState.StateHolder state_holders = 1;
inline int PreviousState::_internal_state_holders_size() const {
  return state_holders_.size();
}
inline int PreviousState::state_holders_size() const {
  return _internal_state_holders_size();
}
inline void PreviousState::clear_state_holders() {
  state_holders_.Clear();
}
inline ::ai::inworld::engine::PreviousState_StateHolder* PreviousState::mutable_state_holders(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.PreviousState.state_holders)
  return state_holders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder >*
PreviousState::mutable_state_holders() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.PreviousState.state_holders)
  return &state_holders_;
}
inline const ::ai::inworld::engine::PreviousState_StateHolder& PreviousState::_internal_state_holders(int index) const {
  return state_holders_.Get(index);
}
inline const ::ai::inworld::engine::PreviousState_StateHolder& PreviousState::state_holders(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.PreviousState.state_holders)
  return _internal_state_holders(index);
}
inline ::ai::inworld::engine::PreviousState_StateHolder* PreviousState::_internal_add_state_holders() {
  return state_holders_.Add();
}
inline ::ai::inworld::engine::PreviousState_StateHolder* PreviousState::add_state_holders() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.PreviousState.state_holders)
  return _internal_add_state_holders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::PreviousState_StateHolder >&
PreviousState::state_holders() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.PreviousState.state_holders)
  return state_holders_;
}

// -------------------------------------------------------------------

// LoadSceneResponse_Agent_CharacterAssets

// string rpm_model_uri = 1;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_model_uri() {
  rpm_model_uri_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_model_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_model_uri(const std::string& value) {
  _internal_set_rpm_model_uri(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_model_uri() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return _internal_mutable_rpm_model_uri();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_model_uri() const {
  return rpm_model_uri_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_model_uri(std::string&& value) {
  
  rpm_model_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_model_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_model_uri(const char* value,
    size_t size) {
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_model_uri() {
  
  return rpm_model_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_model_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
  return rpm_model_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_model_uri(std::string* rpm_model_uri) {
  if (rpm_model_uri != nullptr) {
    
  } else {
    
  }
  rpm_model_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_model_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri_portrait = 2;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_image_uri_portrait() {
  rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_image_uri_portrait() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_portrait(const std::string& value) {
  _internal_set_rpm_image_uri_portrait(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_image_uri_portrait() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return _internal_mutable_rpm_image_uri_portrait();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  return rpm_image_uri_portrait_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  
  rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_portrait(std::string&& value) {
  
  rpm_image_uri_portrait_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_portrait(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_portrait(const char* value,
    size_t size) {
  
  rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  
  return rpm_image_uri_portrait_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_image_uri_portrait() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
  return rpm_image_uri_portrait_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait) {
  if (rpm_image_uri_portrait != nullptr) {
    
  } else {
    
  }
  rpm_image_uri_portrait_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_image_uri_portrait,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 3;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_rpm_image_uri_posture() {
  rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::rpm_image_uri_posture() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_posture(const std::string& value) {
  _internal_set_rpm_image_uri_posture(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_rpm_image_uri_posture() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return _internal_mutable_rpm_image_uri_posture();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_rpm_image_uri_posture() const {
  return rpm_image_uri_posture_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  
  rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_posture(std::string&& value) {
  
  rpm_image_uri_posture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_posture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_rpm_image_uri_posture(const char* value,
    size_t size) {
  
  rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  
  return rpm_image_uri_posture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_rpm_image_uri_posture() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
  return rpm_image_uri_posture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture) {
  if (rpm_image_uri_posture != nullptr) {
    
  } else {
    
  }
  rpm_image_uri_posture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_image_uri_posture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.rpm_image_uri_posture)
}

// string avatar_img = 4;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_avatar_img() {
  avatar_img_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::avatar_img() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
  return _internal_avatar_img();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img(const std::string& value) {
  _internal_set_avatar_img(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_avatar_img() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
  return _internal_mutable_avatar_img();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_avatar_img() const {
  return avatar_img_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_avatar_img(const std::string& value) {
  
  avatar_img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img(std::string&& value) {
  
  avatar_img_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img(const char* value,
    size_t size) {
  
  avatar_img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_avatar_img() {
  
  return avatar_img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_avatar_img() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
  return avatar_img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_avatar_img(std::string* avatar_img) {
  if (avatar_img != nullptr) {
    
  } else {
    
  }
  avatar_img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_img,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img)
}

// string avatar_img_original = 5;
inline void LoadSceneResponse_Agent_CharacterAssets::clear_avatar_img_original() {
  avatar_img_original_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::avatar_img_original() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
  return _internal_avatar_img_original();
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img_original(const std::string& value) {
  _internal_set_avatar_img_original(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::mutable_avatar_img_original() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
  return _internal_mutable_avatar_img_original();
}
inline const std::string& LoadSceneResponse_Agent_CharacterAssets::_internal_avatar_img_original() const {
  return avatar_img_original_.Get();
}
inline void LoadSceneResponse_Agent_CharacterAssets::_internal_set_avatar_img_original(const std::string& value) {
  
  avatar_img_original_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img_original(std::string&& value) {
  
  avatar_img_original_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img_original(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_img_original_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_avatar_img_original(const char* value,
    size_t size) {
  
  avatar_img_original_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::_internal_mutable_avatar_img_original() {
  
  return avatar_img_original_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent_CharacterAssets::release_avatar_img_original() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
  return avatar_img_original_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent_CharacterAssets::set_allocated_avatar_img_original(std::string* avatar_img_original) {
  if (avatar_img_original != nullptr) {
    
  } else {
    
  }
  avatar_img_original_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_img_original,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets.avatar_img_original)
}

// -------------------------------------------------------------------

// LoadSceneResponse_Agent

// string agent_id = 1;
inline void LoadSceneResponse_Agent::clear_agent_id() {
  agent_id_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::agent_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _internal_agent_id();
}
inline void LoadSceneResponse_Agent::set_agent_id(const std::string& value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}
inline std::string* LoadSceneResponse_Agent::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return _internal_mutable_agent_id();
}
inline const std::string& LoadSceneResponse_Agent::_internal_agent_id() const {
  return agent_id_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_agent_id(const std::string& value) {
  
  agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent::set_agent_id(std::string&& value) {
  
  agent_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}
inline void LoadSceneResponse_Agent::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}
inline void LoadSceneResponse_Agent::set_agent_id(const char* value,
    size_t size) {
  
  agent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_agent_id() {
  
  return agent_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent::release_agent_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
  return agent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.agent_id)
}

// string brain_name = 2;
inline void LoadSceneResponse_Agent::clear_brain_name() {
  brain_name_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::brain_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _internal_brain_name();
}
inline void LoadSceneResponse_Agent::set_brain_name(const std::string& value) {
  _internal_set_brain_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}
inline std::string* LoadSceneResponse_Agent::mutable_brain_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return _internal_mutable_brain_name();
}
inline const std::string& LoadSceneResponse_Agent::_internal_brain_name() const {
  return brain_name_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_brain_name(const std::string& value) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent::set_brain_name(std::string&& value) {
  
  brain_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}
inline void LoadSceneResponse_Agent::set_brain_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}
inline void LoadSceneResponse_Agent::set_brain_name(const char* value,
    size_t size) {
  
  brain_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_brain_name() {
  
  return brain_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent::release_brain_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
  return brain_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent::set_allocated_brain_name(std::string* brain_name) {
  if (brain_name != nullptr) {
    
  } else {
    
  }
  brain_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brain_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.brain_name)
}

// string given_name = 3;
inline void LoadSceneResponse_Agent::clear_given_name() {
  given_name_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse_Agent::given_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _internal_given_name();
}
inline void LoadSceneResponse_Agent::set_given_name(const std::string& value) {
  _internal_set_given_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}
inline std::string* LoadSceneResponse_Agent::mutable_given_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return _internal_mutable_given_name();
}
inline const std::string& LoadSceneResponse_Agent::_internal_given_name() const {
  return given_name_.Get();
}
inline void LoadSceneResponse_Agent::_internal_set_given_name(const std::string& value) {
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse_Agent::set_given_name(std::string&& value) {
  
  given_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}
inline void LoadSceneResponse_Agent::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}
inline void LoadSceneResponse_Agent::set_given_name(const char* value,
    size_t size) {
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}
inline std::string* LoadSceneResponse_Agent::_internal_mutable_given_name() {
  
  return given_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse_Agent::release_given_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
  return given_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse_Agent::set_allocated_given_name(std::string* given_name) {
  if (given_name != nullptr) {
    
  } else {
    
  }
  given_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), given_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.given_name)
}

// .ai.inworld.engine.LoadSceneResponse.Agent.CharacterAssets character_assets = 4;
inline bool LoadSceneResponse_Agent::_internal_has_character_assets() const {
  return this != internal_default_instance() && character_assets_ != nullptr;
}
inline bool LoadSceneResponse_Agent::has_character_assets() const {
  return _internal_has_character_assets();
}
inline void LoadSceneResponse_Agent::clear_character_assets() {
  if (GetArena() == nullptr && character_assets_ != nullptr) {
    delete character_assets_;
  }
  character_assets_ = nullptr;
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent::_internal_character_assets() const {
  const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* p = character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets&>(
      ::ai::inworld::engine::_LoadSceneResponse_Agent_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets& LoadSceneResponse_Agent::character_assets() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  return _internal_character_assets();
}
inline void LoadSceneResponse_Agent::unsafe_arena_set_allocated_character_assets(
    ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_assets_);
  }
  character_assets_ = character_assets;
  if (character_assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::release_character_assets() {
  
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* temp = character_assets_;
  character_assets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::unsafe_arena_release_character_assets() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  
  ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* temp = character_assets_;
  character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::_internal_mutable_character_assets() {
  
  if (character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets>(GetArena());
    character_assets_ = p;
  }
  return character_assets_;
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* LoadSceneResponse_Agent::mutable_character_assets() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
  return _internal_mutable_character_assets();
}
inline void LoadSceneResponse_Agent::set_allocated_character_assets(::ai::inworld::engine::LoadSceneResponse_Agent_CharacterAssets* character_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete character_assets_;
  }
  if (character_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(character_assets);
    if (message_arena != submessage_arena) {
      character_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_assets, submessage_arena);
    }
    
  } else {
    
  }
  character_assets_ = character_assets;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.Agent.character_assets)
}

// -------------------------------------------------------------------

// LoadSceneResponse

// repeated .ai.inworld.engine.LoadSceneResponse.Agent agents = 1;
inline int LoadSceneResponse::_internal_agents_size() const {
  return agents_.size();
}
inline int LoadSceneResponse::agents_size() const {
  return _internal_agents_size();
}
inline void LoadSceneResponse::clear_agents() {
  agents_.Clear();
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >*
LoadSceneResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.LoadSceneResponse.agents)
  return &agents_;
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent& LoadSceneResponse::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::ai::inworld::engine::LoadSceneResponse_Agent& LoadSceneResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.agents)
  return _internal_agents(index);
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::_internal_add_agents() {
  return agents_.Add();
}
inline ::ai::inworld::engine::LoadSceneResponse_Agent* LoadSceneResponse::add_agents() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.LoadSceneResponse.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::LoadSceneResponse_Agent >&
LoadSceneResponse::agents() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.LoadSceneResponse.agents)
  return agents_;
}

// string key = 2;
inline void LoadSceneResponse::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& LoadSceneResponse::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.key)
  return _internal_key();
}
inline void LoadSceneResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LoadSceneResponse.key)
}
inline std::string* LoadSceneResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.key)
  return _internal_mutable_key();
}
inline const std::string& LoadSceneResponse::_internal_key() const {
  return key_.Get();
}
inline void LoadSceneResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoadSceneResponse::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LoadSceneResponse.key)
}
inline void LoadSceneResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LoadSceneResponse.key)
}
inline void LoadSceneResponse::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LoadSceneResponse.key)
}
inline std::string* LoadSceneResponse::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoadSceneResponse::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoadSceneResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.key)
}

// .ai.inworld.engine.PreviousState previous_state = 3;
inline bool LoadSceneResponse::_internal_has_previous_state() const {
  return this != internal_default_instance() && previous_state_ != nullptr;
}
inline bool LoadSceneResponse::has_previous_state() const {
  return _internal_has_previous_state();
}
inline void LoadSceneResponse::clear_previous_state() {
  if (GetArena() == nullptr && previous_state_ != nullptr) {
    delete previous_state_;
  }
  previous_state_ = nullptr;
}
inline const ::ai::inworld::engine::PreviousState& LoadSceneResponse::_internal_previous_state() const {
  const ::ai::inworld::engine::PreviousState* p = previous_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::engine::PreviousState&>(
      ::ai::inworld::engine::_PreviousState_default_instance_);
}
inline const ::ai::inworld::engine::PreviousState& LoadSceneResponse::previous_state() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LoadSceneResponse.previous_state)
  return _internal_previous_state();
}
inline void LoadSceneResponse::unsafe_arena_set_allocated_previous_state(
    ::ai::inworld::engine::PreviousState* previous_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_state_);
  }
  previous_state_ = previous_state;
  if (previous_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.LoadSceneResponse.previous_state)
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::release_previous_state() {
  
  ::ai::inworld::engine::PreviousState* temp = previous_state_;
  previous_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::unsafe_arena_release_previous_state() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LoadSceneResponse.previous_state)
  
  ::ai::inworld::engine::PreviousState* temp = previous_state_;
  previous_state_ = nullptr;
  return temp;
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::_internal_mutable_previous_state() {
  
  if (previous_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::engine::PreviousState>(GetArena());
    previous_state_ = p;
  }
  return previous_state_;
}
inline ::ai::inworld::engine::PreviousState* LoadSceneResponse::mutable_previous_state() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LoadSceneResponse.previous_state)
  return _internal_mutable_previous_state();
}
inline void LoadSceneResponse::set_allocated_previous_state(::ai::inworld::engine::PreviousState* previous_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previous_state_;
  }
  if (previous_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previous_state);
    if (message_arena != submessage_arena) {
      previous_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_state, submessage_arena);
    }
    
  } else {
    
  }
  previous_state_ = previous_state;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LoadSceneResponse.previous_state)
}

// -------------------------------------------------------------------

// LogErrorRequest

// string key = 1;
inline void LogErrorRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& LogErrorRequest::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LogErrorRequest.key)
  return _internal_key();
}
inline void LogErrorRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LogErrorRequest.key)
}
inline std::string* LogErrorRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LogErrorRequest.key)
  return _internal_mutable_key();
}
inline const std::string& LogErrorRequest::_internal_key() const {
  return key_.Get();
}
inline void LogErrorRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogErrorRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LogErrorRequest.key)
}
inline void LogErrorRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LogErrorRequest.key)
}
inline void LogErrorRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LogErrorRequest.key)
}
inline std::string* LogErrorRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogErrorRequest::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LogErrorRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogErrorRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LogErrorRequest.key)
}

// string message = 2;
inline void LogErrorRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& LogErrorRequest::message() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.LogErrorRequest.message)
  return _internal_message();
}
inline void LogErrorRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.LogErrorRequest.message)
}
inline std::string* LogErrorRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.LogErrorRequest.message)
  return _internal_mutable_message();
}
inline const std::string& LogErrorRequest::_internal_message() const {
  return message_.Get();
}
inline void LogErrorRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogErrorRequest::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.LogErrorRequest.message)
}
inline void LogErrorRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.LogErrorRequest.message)
}
inline void LogErrorRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.LogErrorRequest.message)
}
inline std::string* LogErrorRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogErrorRequest::release_message() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.LogErrorRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogErrorRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.LogErrorRequest.message)
}

// -------------------------------------------------------------------

// VoicePreviewRequest

// string text = 1;
inline void VoicePreviewRequest::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& VoicePreviewRequest::text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.text)
  return _internal_text();
}
inline void VoicePreviewRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.VoicePreviewRequest.text)
}
inline std::string* VoicePreviewRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.text)
  return _internal_mutable_text();
}
inline const std::string& VoicePreviewRequest::_internal_text() const {
  return text_.Get();
}
inline void VoicePreviewRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VoicePreviewRequest::set_text(std::string&& value) {
  
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.VoicePreviewRequest.text)
}
inline void VoicePreviewRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.VoicePreviewRequest.text)
}
inline void VoicePreviewRequest::set_text(const char* value,
    size_t size) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.VoicePreviewRequest.text)
}
inline std::string* VoicePreviewRequest::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VoicePreviewRequest::release_text() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoicePreviewRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.text)
}

// .ai.inworld.packets.EmotionEvent emotions = 2;
inline bool VoicePreviewRequest::_internal_has_emotions() const {
  return this != internal_default_instance() && emotions_ != nullptr;
}
inline bool VoicePreviewRequest::has_emotions() const {
  return _internal_has_emotions();
}
inline const ::ai::inworld::packets::EmotionEvent& VoicePreviewRequest::_internal_emotions() const {
  const ::ai::inworld::packets::EmotionEvent* p = emotions_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::packets::EmotionEvent&>(
      ::ai::inworld::packets::_EmotionEvent_default_instance_);
}
inline const ::ai::inworld::packets::EmotionEvent& VoicePreviewRequest::emotions() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.emotions)
  return _internal_emotions();
}
inline void VoicePreviewRequest::unsafe_arena_set_allocated_emotions(
    ::ai::inworld::packets::EmotionEvent* emotions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotions_);
  }
  emotions_ = emotions;
  if (emotions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.VoicePreviewRequest.emotions)
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::release_emotions() {
  
  ::ai::inworld::packets::EmotionEvent* temp = emotions_;
  emotions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::unsafe_arena_release_emotions() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.emotions)
  
  ::ai::inworld::packets::EmotionEvent* temp = emotions_;
  emotions_ = nullptr;
  return temp;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::_internal_mutable_emotions() {
  
  if (emotions_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::packets::EmotionEvent>(GetArena());
    emotions_ = p;
  }
  return emotions_;
}
inline ::ai::inworld::packets::EmotionEvent* VoicePreviewRequest::mutable_emotions() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.emotions)
  return _internal_mutable_emotions();
}
inline void VoicePreviewRequest::set_allocated_emotions(::ai::inworld::packets::EmotionEvent* emotions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotions_);
  }
  if (emotions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emotions)->GetArena();
    if (message_arena != submessage_arena) {
      emotions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emotions, submessage_arena);
    }
    
  } else {
    
  }
  emotions_ = emotions;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.emotions)
}

// .ai.inworld.voices.Voice voice = 3;
inline bool VoicePreviewRequest::_internal_has_voice() const {
  return this != internal_default_instance() && voice_ != nullptr;
}
inline bool VoicePreviewRequest::has_voice() const {
  return _internal_has_voice();
}
inline const ::ai::inworld::voices::Voice& VoicePreviewRequest::_internal_voice() const {
  const ::ai::inworld::voices::Voice* p = voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::voices::Voice&>(
      ::ai::inworld::voices::_Voice_default_instance_);
}
inline const ::ai::inworld::voices::Voice& VoicePreviewRequest::voice() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewRequest.voice)
  return _internal_voice();
}
inline void VoicePreviewRequest::unsafe_arena_set_allocated_voice(
    ::ai::inworld::voices::Voice* voice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  voice_ = voice;
  if (voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.VoicePreviewRequest.voice)
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::release_voice() {
  
  ::ai::inworld::voices::Voice* temp = voice_;
  voice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::unsafe_arena_release_voice() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewRequest.voice)
  
  ::ai::inworld::voices::Voice* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::_internal_mutable_voice() {
  
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::voices::Voice>(GetArena());
    voice_ = p;
  }
  return voice_;
}
inline ::ai::inworld::voices::Voice* VoicePreviewRequest::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewRequest.voice)
  return _internal_mutable_voice();
}
inline void VoicePreviewRequest::set_allocated_voice(::ai::inworld::voices::Voice* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice)->GetArena();
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewRequest.voice)
}

// -------------------------------------------------------------------

// VoicePreviewResponse

// bytes audio = 1;
inline void VoicePreviewResponse::clear_audio() {
  audio_.ClearToEmpty();
}
inline const std::string& VoicePreviewResponse::audio() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.VoicePreviewResponse.audio)
  return _internal_audio();
}
inline void VoicePreviewResponse::set_audio(const std::string& value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.VoicePreviewResponse.audio)
}
inline std::string* VoicePreviewResponse::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.VoicePreviewResponse.audio)
  return _internal_mutable_audio();
}
inline const std::string& VoicePreviewResponse::_internal_audio() const {
  return audio_.Get();
}
inline void VoicePreviewResponse::_internal_set_audio(const std::string& value) {
  
  audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VoicePreviewResponse::set_audio(std::string&& value) {
  
  audio_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.VoicePreviewResponse.audio)
}
inline void VoicePreviewResponse::set_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.VoicePreviewResponse.audio)
}
inline void VoicePreviewResponse::set_audio(const void* value,
    size_t size) {
  
  audio_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.VoicePreviewResponse.audio)
}
inline std::string* VoicePreviewResponse::_internal_mutable_audio() {
  
  return audio_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VoicePreviewResponse::release_audio() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.VoicePreviewResponse.audio)
  return audio_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoicePreviewResponse::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.VoicePreviewResponse.audio)
}

// -------------------------------------------------------------------

// ListBaseVoicesRequest

// string language_code = 1;
inline void ListBaseVoicesRequest::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& ListBaseVoicesRequest::language_code() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _internal_language_code();
}
inline void ListBaseVoicesRequest::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}
inline std::string* ListBaseVoicesRequest::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& ListBaseVoicesRequest::_internal_language_code() const {
  return language_code_.Get();
}
inline void ListBaseVoicesRequest::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBaseVoicesRequest::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}
inline void ListBaseVoicesRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}
inline void ListBaseVoicesRequest::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}
inline std::string* ListBaseVoicesRequest::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBaseVoicesRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ListBaseVoicesRequest.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBaseVoicesRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ListBaseVoicesRequest.language_code)
}

// repeated .ai.inworld.voices.TTSType tts_types = 2;
inline int ListBaseVoicesRequest::_internal_tts_types_size() const {
  return tts_types_.size();
}
inline int ListBaseVoicesRequest::tts_types_size() const {
  return _internal_tts_types_size();
}
inline void ListBaseVoicesRequest::clear_tts_types() {
  tts_types_.Clear();
}
inline ::ai::inworld::voices::TTSType ListBaseVoicesRequest::_internal_tts_types(int index) const {
  return static_cast< ::ai::inworld::voices::TTSType >(tts_types_.Get(index));
}
inline ::ai::inworld::voices::TTSType ListBaseVoicesRequest::tts_types(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return _internal_tts_types(index);
}
inline void ListBaseVoicesRequest::set_tts_types(int index, ::ai::inworld::voices::TTSType value) {
  tts_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
}
inline void ListBaseVoicesRequest::_internal_add_tts_types(::ai::inworld::voices::TTSType value) {
  tts_types_.Add(value);
}
inline void ListBaseVoicesRequest::add_tts_types(::ai::inworld::voices::TTSType value) {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  _internal_add_tts_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListBaseVoicesRequest::tts_types() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return tts_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListBaseVoicesRequest::_internal_mutable_tts_types() {
  return &tts_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListBaseVoicesRequest::mutable_tts_types() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesRequest.tts_types)
  return _internal_mutable_tts_types();
}

// -------------------------------------------------------------------

// ListBaseVoicesResponce_BaseVoice

// repeated string language_codes = 1;
inline int ListBaseVoicesResponce_BaseVoice::_internal_language_codes_size() const {
  return language_codes_.size();
}
inline int ListBaseVoicesResponce_BaseVoice::language_codes_size() const {
  return _internal_language_codes_size();
}
inline void ListBaseVoicesResponce_BaseVoice::clear_language_codes() {
  language_codes_.Clear();
}
inline std::string* ListBaseVoicesResponce_BaseVoice::add_language_codes() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return _internal_add_language_codes();
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::_internal_language_codes(int index) const {
  return language_codes_.Get(index);
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::language_codes(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return _internal_language_codes(index);
}
inline std::string* ListBaseVoicesResponce_BaseVoice::mutable_language_codes(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return language_codes_.Mutable(index);
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  language_codes_.Mutable(index)->assign(value);
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  language_codes_.Mutable(index)->assign(std::move(value));
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  language_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::set_language_codes(int index, const char* value, size_t size) {
  language_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline std::string* ListBaseVoicesResponce_BaseVoice::_internal_add_language_codes() {
  return language_codes_.Add();
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(const std::string& value) {
  language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(std::string&& value) {
  language_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  language_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline void ListBaseVoicesResponce_BaseVoice::add_language_codes(const char* value, size_t size) {
  language_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListBaseVoicesResponce_BaseVoice::language_codes() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return language_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListBaseVoicesResponce_BaseVoice::mutable_language_codes() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.language_codes)
  return &language_codes_;
}

// string name = 2;
inline void ListBaseVoicesResponce_BaseVoice::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
  return _internal_name();
}
inline void ListBaseVoicesResponce_BaseVoice::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}
inline std::string* ListBaseVoicesResponce_BaseVoice::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
  return _internal_mutable_name();
}
inline const std::string& ListBaseVoicesResponce_BaseVoice::_internal_name() const {
  return name_.Get();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListBaseVoicesResponce_BaseVoice::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}
inline void ListBaseVoicesResponce_BaseVoice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}
inline void ListBaseVoicesResponce_BaseVoice::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}
inline std::string* ListBaseVoicesResponce_BaseVoice::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListBaseVoicesResponce_BaseVoice::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListBaseVoicesResponce_BaseVoice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.name)
}

// .ai.inworld.voices.Gender gender = 3;
inline void ListBaseVoicesResponce_BaseVoice::clear_gender() {
  gender_ = 0;
}
inline ::ai::inworld::voices::Gender ListBaseVoicesResponce_BaseVoice::_internal_gender() const {
  return static_cast< ::ai::inworld::voices::Gender >(gender_);
}
inline ::ai::inworld::voices::Gender ListBaseVoicesResponce_BaseVoice::gender() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.gender)
  return _internal_gender();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_gender(::ai::inworld::voices::Gender value) {
  
  gender_ = value;
}
inline void ListBaseVoicesResponce_BaseVoice::set_gender(::ai::inworld::voices::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.gender)
}

// int32 naturalSampleRateHertz = 4;
inline void ListBaseVoicesResponce_BaseVoice::clear_naturalsampleratehertz() {
  naturalsampleratehertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListBaseVoicesResponce_BaseVoice::_internal_naturalsampleratehertz() const {
  return naturalsampleratehertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListBaseVoicesResponce_BaseVoice::naturalsampleratehertz() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.naturalSampleRateHertz)
  return _internal_naturalsampleratehertz();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_naturalsampleratehertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  naturalsampleratehertz_ = value;
}
inline void ListBaseVoicesResponce_BaseVoice::set_naturalsampleratehertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_naturalsampleratehertz(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.naturalSampleRateHertz)
}

// .ai.inworld.voices.Age age = 5;
inline void ListBaseVoicesResponce_BaseVoice::clear_age() {
  age_ = 0;
}
inline ::ai::inworld::voices::Age ListBaseVoicesResponce_BaseVoice::_internal_age() const {
  return static_cast< ::ai::inworld::voices::Age >(age_);
}
inline ::ai::inworld::voices::Age ListBaseVoicesResponce_BaseVoice::age() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.age)
  return _internal_age();
}
inline void ListBaseVoicesResponce_BaseVoice::_internal_set_age(::ai::inworld::voices::Age value) {
  
  age_ = value;
}
inline void ListBaseVoicesResponce_BaseVoice::set_age(::ai::inworld::voices::Age value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.age)
}

// .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
inline bool ListBaseVoicesResponce_BaseVoice::_internal_has_elevenlabs_metadata() const {
  return tts_metadata_case() == kElevenlabsMetadata;
}
inline bool ListBaseVoicesResponce_BaseVoice::has_elevenlabs_metadata() const {
  return _internal_has_elevenlabs_metadata();
}
inline void ListBaseVoicesResponce_BaseVoice::set_has_elevenlabs_metadata() {
  _oneof_case_[0] = kElevenlabsMetadata;
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* ListBaseVoicesResponce_BaseVoice::release_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.elevenlabs_metadata)
  if (_internal_has_elevenlabs_metadata()) {
    clear_has_tts_metadata();
      ::ai::inworld::voices::Voice_ElevenLabsMetadata* temp = tts_metadata_.elevenlabs_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    tts_metadata_.elevenlabs_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::voices::Voice_ElevenLabsMetadata& ListBaseVoicesResponce_BaseVoice::_internal_elevenlabs_metadata() const {
  return _internal_has_elevenlabs_metadata()
      ? *tts_metadata_.elevenlabs_metadata_
      : reinterpret_cast< ::ai::inworld::voices::Voice_ElevenLabsMetadata&>(::ai::inworld::voices::_Voice_ElevenLabsMetadata_default_instance_);
}
inline const ::ai::inworld::voices::Voice_ElevenLabsMetadata& ListBaseVoicesResponce_BaseVoice::elevenlabs_metadata() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.elevenlabs_metadata)
  return _internal_elevenlabs_metadata();
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* ListBaseVoicesResponce_BaseVoice::unsafe_arena_release_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.elevenlabs_metadata)
  if (_internal_has_elevenlabs_metadata()) {
    clear_has_tts_metadata();
    ::ai::inworld::voices::Voice_ElevenLabsMetadata* temp = tts_metadata_.elevenlabs_metadata_;
    tts_metadata_.elevenlabs_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListBaseVoicesResponce_BaseVoice::unsafe_arena_set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata) {
  clear_tts_metadata();
  if (elevenlabs_metadata) {
    set_has_elevenlabs_metadata();
    tts_metadata_.elevenlabs_metadata_ = elevenlabs_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.elevenlabs_metadata)
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* ListBaseVoicesResponce_BaseVoice::_internal_mutable_elevenlabs_metadata() {
  if (!_internal_has_elevenlabs_metadata()) {
    clear_tts_metadata();
    set_has_elevenlabs_metadata();
    tts_metadata_.elevenlabs_metadata_ = CreateMaybeMessage< ::ai::inworld::voices::Voice_ElevenLabsMetadata >(GetArena());
  }
  return tts_metadata_.elevenlabs_metadata_;
}
inline ::ai::inworld::voices::Voice_ElevenLabsMetadata* ListBaseVoicesResponce_BaseVoice::mutable_elevenlabs_metadata() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.BaseVoice.elevenlabs_metadata)
  return _internal_mutable_elevenlabs_metadata();
}

inline bool ListBaseVoicesResponce_BaseVoice::has_tts_metadata() const {
  return tts_metadata_case() != TTS_METADATA_NOT_SET;
}
inline void ListBaseVoicesResponce_BaseVoice::clear_has_tts_metadata() {
  _oneof_case_[0] = TTS_METADATA_NOT_SET;
}
inline ListBaseVoicesResponce_BaseVoice::TtsMetadataCase ListBaseVoicesResponce_BaseVoice::tts_metadata_case() const {
  return ListBaseVoicesResponce_BaseVoice::TtsMetadataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListBaseVoicesResponce

// repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice googleVoices = 1;
inline int ListBaseVoicesResponce::_internal_googlevoices_size() const {
  return googlevoices_.size();
}
inline int ListBaseVoicesResponce::googlevoices_size() const {
  return _internal_googlevoices_size();
}
inline void ListBaseVoicesResponce::clear_googlevoices() {
  googlevoices_.Clear();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::mutable_googlevoices(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return googlevoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
ListBaseVoicesResponce::mutable_googlevoices() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return &googlevoices_;
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::_internal_googlevoices(int index) const {
  return googlevoices_.Get(index);
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::googlevoices(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return _internal_googlevoices(index);
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::_internal_add_googlevoices() {
  return googlevoices_.Add();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::add_googlevoices() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return _internal_add_googlevoices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
ListBaseVoicesResponce::googlevoices() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.googleVoices)
  return googlevoices_;
}

// repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice inworldVoices = 2;
inline int ListBaseVoicesResponce::_internal_inworldvoices_size() const {
  return inworldvoices_.size();
}
inline int ListBaseVoicesResponce::inworldvoices_size() const {
  return _internal_inworldvoices_size();
}
inline void ListBaseVoicesResponce::clear_inworldvoices() {
  inworldvoices_.Clear();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::mutable_inworldvoices(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return inworldvoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
ListBaseVoicesResponce::mutable_inworldvoices() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return &inworldvoices_;
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::_internal_inworldvoices(int index) const {
  return inworldvoices_.Get(index);
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::inworldvoices(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return _internal_inworldvoices(index);
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::_internal_add_inworldvoices() {
  return inworldvoices_.Add();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::add_inworldvoices() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return _internal_add_inworldvoices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
ListBaseVoicesResponce::inworldvoices() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.inworldVoices)
  return inworldvoices_;
}

// repeated .ai.inworld.engine.ListBaseVoicesResponce.BaseVoice elevenLabsVoices = 3;
inline int ListBaseVoicesResponce::_internal_elevenlabsvoices_size() const {
  return elevenlabsvoices_.size();
}
inline int ListBaseVoicesResponce::elevenlabsvoices_size() const {
  return _internal_elevenlabsvoices_size();
}
inline void ListBaseVoicesResponce::clear_elevenlabsvoices() {
  elevenlabsvoices_.Clear();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::mutable_elevenlabsvoices(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ListBaseVoicesResponce.elevenLabsVoices)
  return elevenlabsvoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >*
ListBaseVoicesResponce::mutable_elevenlabsvoices() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ListBaseVoicesResponce.elevenLabsVoices)
  return &elevenlabsvoices_;
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::_internal_elevenlabsvoices(int index) const {
  return elevenlabsvoices_.Get(index);
}
inline const ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice& ListBaseVoicesResponce::elevenlabsvoices(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ListBaseVoicesResponce.elevenLabsVoices)
  return _internal_elevenlabsvoices(index);
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::_internal_add_elevenlabsvoices() {
  return elevenlabsvoices_.Add();
}
inline ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice* ListBaseVoicesResponce::add_elevenlabsvoices() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ListBaseVoicesResponce.elevenLabsVoices)
  return _internal_add_elevenlabsvoices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ListBaseVoicesResponce_BaseVoice >&
ListBaseVoicesResponce::elevenlabsvoices() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ListBaseVoicesResponce.elevenLabsVoices)
  return elevenlabsvoices_;
}

// -------------------------------------------------------------------

// AccessToken

// string token = 1;
inline void AccessToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& AccessToken::token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.token)
  return _internal_token();
}
inline void AccessToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.token)
}
inline std::string* AccessToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.token)
  return _internal_mutable_token();
}
inline const std::string& AccessToken::_internal_token() const {
  return token_.Get();
}
inline void AccessToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccessToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.AccessToken.token)
}
inline void AccessToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.AccessToken.token)
}
inline void AccessToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.AccessToken.token)
}
inline std::string* AccessToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccessToken::release_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccessToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.token)
}

// string type = 2;
inline void AccessToken::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& AccessToken::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.type)
  return _internal_type();
}
inline void AccessToken::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.type)
}
inline std::string* AccessToken::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.type)
  return _internal_mutable_type();
}
inline const std::string& AccessToken::_internal_type() const {
  return type_.Get();
}
inline void AccessToken::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccessToken::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.AccessToken.type)
}
inline void AccessToken::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.AccessToken.type)
}
inline void AccessToken::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.AccessToken.type)
}
inline std::string* AccessToken::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccessToken::release_type() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccessToken::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool AccessToken::_internal_has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != nullptr;
}
inline bool AccessToken::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AccessToken::_internal_expiration_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AccessToken::expiration_time() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.expiration_time)
  return _internal_expiration_time();
}
inline void AccessToken::unsafe_arena_set_allocated_expiration_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.engine.AccessToken.expiration_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::release_expiration_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.expiration_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::_internal_mutable_expiration_time() {
  
  if (expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiration_time_ = p;
  }
  return expiration_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AccessToken::mutable_expiration_time() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.expiration_time)
  return _internal_mutable_expiration_time();
}
inline void AccessToken::set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.expiration_time)
}

// string session_id = 4;
inline void AccessToken::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AccessToken::session_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.AccessToken.session_id)
  return _internal_session_id();
}
inline void AccessToken::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.AccessToken.session_id)
}
inline std::string* AccessToken::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.AccessToken.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& AccessToken::_internal_session_id() const {
  return session_id_.Get();
}
inline void AccessToken::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccessToken::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.AccessToken.session_id)
}
inline void AccessToken::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.AccessToken.session_id)
}
inline void AccessToken::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.AccessToken.session_id)
}
inline std::string* AccessToken::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccessToken::release_session_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.AccessToken.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccessToken::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.AccessToken.session_id)
}

// -------------------------------------------------------------------

// GenerateTokenRequest

// string key = 1;
inline void GenerateTokenRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GenerateTokenRequest::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.GenerateTokenRequest.key)
  return _internal_key();
}
inline void GenerateTokenRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.key)
}
inline std::string* GenerateTokenRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.GenerateTokenRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GenerateTokenRequest::_internal_key() const {
  return key_.Get();
}
inline void GenerateTokenRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateTokenRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.GenerateTokenRequest.key)
}
inline void GenerateTokenRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.GenerateTokenRequest.key)
}
inline void GenerateTokenRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.GenerateTokenRequest.key)
}
inline std::string* GenerateTokenRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateTokenRequest::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.GenerateTokenRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateTokenRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.GenerateTokenRequest.key)
}

// repeated string resources = 2;
inline int GenerateTokenRequest::_internal_resources_size() const {
  return resources_.size();
}
inline int GenerateTokenRequest::resources_size() const {
  return _internal_resources_size();
}
inline void GenerateTokenRequest::clear_resources() {
  resources_.Clear();
}
inline std::string* GenerateTokenRequest::add_resources() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.engine.GenerateTokenRequest.resources)
  return _internal_add_resources();
}
inline const std::string& GenerateTokenRequest::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const std::string& GenerateTokenRequest::resources(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.GenerateTokenRequest.resources)
  return _internal_resources(index);
}
inline std::string* GenerateTokenRequest::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.GenerateTokenRequest.resources)
  return resources_.Mutable(index);
}
inline void GenerateTokenRequest::set_resources(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.resources)
  resources_.Mutable(index)->assign(value);
}
inline void GenerateTokenRequest::set_resources(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.engine.GenerateTokenRequest.resources)
  resources_.Mutable(index)->assign(std::move(value));
}
inline void GenerateTokenRequest::set_resources(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::set_resources(int index, const char* value, size_t size) {
  resources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline std::string* GenerateTokenRequest::_internal_add_resources() {
  return resources_.Add();
}
inline void GenerateTokenRequest::add_resources(const std::string& value) {
  resources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(std::string&& value) {
  resources_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline void GenerateTokenRequest::add_resources(const char* value, size_t size) {
  resources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.engine.GenerateTokenRequest.resources)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenerateTokenRequest::resources() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.GenerateTokenRequest.resources)
  return resources_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenerateTokenRequest::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.GenerateTokenRequest.resources)
  return &resources_;
}

// -------------------------------------------------------------------

// ActorRelations_Relation

// string type = 1;
inline void ActorRelations_Relation::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ActorRelations_Relation::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.Relation.type)
  return _internal_type();
}
inline void ActorRelations_Relation::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ActorRelations.Relation.type)
}
inline std::string* ActorRelations_Relation::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.Relation.type)
  return _internal_mutable_type();
}
inline const std::string& ActorRelations_Relation::_internal_type() const {
  return type_.Get();
}
inline void ActorRelations_Relation::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActorRelations_Relation::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ActorRelations.Relation.type)
}
inline void ActorRelations_Relation::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ActorRelations.Relation.type)
}
inline void ActorRelations_Relation::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ActorRelations.Relation.type)
}
inline std::string* ActorRelations_Relation::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActorRelations_Relation::release_type() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ActorRelations.Relation.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorRelations_Relation::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ActorRelations.Relation.type)
}

// string label = 2;
inline void ActorRelations_Relation::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& ActorRelations_Relation::label() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.Relation.label)
  return _internal_label();
}
inline void ActorRelations_Relation::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ActorRelations.Relation.label)
}
inline std::string* ActorRelations_Relation::mutable_label() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.Relation.label)
  return _internal_mutable_label();
}
inline const std::string& ActorRelations_Relation::_internal_label() const {
  return label_.Get();
}
inline void ActorRelations_Relation::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActorRelations_Relation::set_label(std::string&& value) {
  
  label_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ActorRelations.Relation.label)
}
inline void ActorRelations_Relation::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ActorRelations.Relation.label)
}
inline void ActorRelations_Relation::set_label(const char* value,
    size_t size) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ActorRelations.Relation.label)
}
inline std::string* ActorRelations_Relation::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActorRelations_Relation::release_label() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ActorRelations.Relation.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorRelations_Relation::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ActorRelations.Relation.label)
}

// -------------------------------------------------------------------

// ActorRelations

// string actor_id = 1;
inline void ActorRelations::clear_actor_id() {
  actor_id_.ClearToEmpty();
}
inline const std::string& ActorRelations::actor_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.actor_id)
  return _internal_actor_id();
}
inline void ActorRelations::set_actor_id(const std::string& value) {
  _internal_set_actor_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.engine.ActorRelations.actor_id)
}
inline std::string* ActorRelations::mutable_actor_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.actor_id)
  return _internal_mutable_actor_id();
}
inline const std::string& ActorRelations::_internal_actor_id() const {
  return actor_id_.Get();
}
inline void ActorRelations::_internal_set_actor_id(const std::string& value) {
  
  actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActorRelations::set_actor_id(std::string&& value) {
  
  actor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.engine.ActorRelations.actor_id)
}
inline void ActorRelations::set_actor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.engine.ActorRelations.actor_id)
}
inline void ActorRelations::set_actor_id(const char* value,
    size_t size) {
  
  actor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.engine.ActorRelations.actor_id)
}
inline std::string* ActorRelations::_internal_mutable_actor_id() {
  
  return actor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActorRelations::release_actor_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.engine.ActorRelations.actor_id)
  return actor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActorRelations::set_allocated_actor_id(std::string* actor_id) {
  if (actor_id != nullptr) {
    
  } else {
    
  }
  actor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.engine.ActorRelations.actor_id)
}

// repeated .ai.inworld.engine.ActorRelations.Relation relations = 2;
inline int ActorRelations::_internal_relations_size() const {
  return relations_.size();
}
inline int ActorRelations::relations_size() const {
  return _internal_relations_size();
}
inline void ActorRelations::clear_relations() {
  relations_.Clear();
}
inline ::ai::inworld::engine::ActorRelations_Relation* ActorRelations::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.engine.ActorRelations.relations)
  return relations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation >*
ActorRelations::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.engine.ActorRelations.relations)
  return &relations_;
}
inline const ::ai::inworld::engine::ActorRelations_Relation& ActorRelations::_internal_relations(int index) const {
  return relations_.Get(index);
}
inline const ::ai::inworld::engine::ActorRelations_Relation& ActorRelations::relations(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.engine.ActorRelations.relations)
  return _internal_relations(index);
}
inline ::ai::inworld::engine::ActorRelations_Relation* ActorRelations::_internal_add_relations() {
  return relations_.Add();
}
inline ::ai::inworld::engine::ActorRelations_Relation* ActorRelations::add_relations() {
  // @@protoc_insertion_point(field_add:ai.inworld.engine.ActorRelations.relations)
  return _internal_add_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::engine::ActorRelations_Relation >&
ActorRelations::relations() const {
  // @@protoc_insertion_point(field_list:ai.inworld.engine.ActorRelations.relations)
  return relations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::engine::PreviousDialog_DialogParticipant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::engine::PreviousDialog_DialogParticipant>() {
  return ::ai::inworld::engine::PreviousDialog_DialogParticipant_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::engine::VoicePreset> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::engine::VoicePreset>() {
  return ::ai::inworld::engine::VoicePreset_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_2dengine_2eproto
