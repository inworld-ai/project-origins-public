#include "ProtoDisableWarning.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voices.proto

#include "voices.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_voices_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_ElevenLabsMetadata_voices_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_voices_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_PhonemesOverridesEntry_DoNotUse_voices_2eproto;
namespace ai {
namespace inworld {
namespace voices {
class Voice_PhonemesOverridesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Voice_PhonemesOverridesEntry_DoNotUse> _instance;
} _Voice_PhonemesOverridesEntry_DoNotUse_default_instance_;
class Voice_ElevenLabsMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Voice_ElevenLabsMetadata> _instance;
} _Voice_ElevenLabsMetadata_default_instance_;
class VoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Voice> _instance;
} _Voice_default_instance_;
}  // namespace voices
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_Voice_voices_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::voices::_Voice_default_instance_;
    new (ptr) ::ai::inworld::voices::Voice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Voice_voices_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Voice_voices_2eproto}, {
      &scc_info_Voice_PhonemesOverridesEntry_DoNotUse_voices_2eproto.base,
      &scc_info_Voice_ElevenLabsMetadata_voices_2eproto.base,}};

static void InitDefaultsscc_info_Voice_ElevenLabsMetadata_voices_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::voices::_Voice_ElevenLabsMetadata_default_instance_;
    new (ptr) ::ai::inworld::voices::Voice_ElevenLabsMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_ElevenLabsMetadata_voices_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Voice_ElevenLabsMetadata_voices_2eproto}, {}};

static void InitDefaultsscc_info_Voice_PhonemesOverridesEntry_DoNotUse_voices_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::voices::_Voice_PhonemesOverridesEntry_DoNotUse_default_instance_;
    new (ptr) ::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_PhonemesOverridesEntry_DoNotUse_voices_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Voice_PhonemesOverridesEntry_DoNotUse_voices_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_voices_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_voices_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_voices_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_voices_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice_ElevenLabsMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice_ElevenLabsMetadata, voice_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, basename_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, tts_type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, gender_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, pitch_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, speaking_rate_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, robotic_voice_filter_level_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, phonemes_overrides_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, age_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ai::inworld::voices::Voice, tts_metadata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse)},
  { 9, -1, sizeof(::ai::inworld::voices::Voice_ElevenLabsMetadata)},
  { 15, -1, sizeof(::ai::inworld::voices::Voice)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::voices::_Voice_PhonemesOverridesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::voices::_Voice_ElevenLabsMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::voices::_Voice_default_instance_),
};

const char descriptor_table_protodef_voices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014voices.proto\022\021ai.inworld.voices\"\354\003\n\005Vo"
  "ice\022\020\n\010baseName\030\001 \001(\t\022,\n\010tts_type\030\002 \001(\0162"
  "\032.ai.inworld.voices.TTSType\022)\n\006gender\030\003 "
  "\001(\0162\031.ai.inworld.voices.Gender\022\r\n\005pitch\030"
  "\004 \001(\001\022\025\n\rspeaking_rate\030\005 \001(\001\022\"\n\032robotic_"
  "voice_filter_level\030\006 \001(\001\022K\n\022phonemes_ove"
  "rrides\030\007 \003(\0132/.ai.inworld.voices.Voice.P"
  "honemesOverridesEntry\022#\n\003age\030\010 \001(\0162\026.ai."
  "inworld.voices.Age\022J\n\023elevenlabs_metadat"
  "a\030d \001(\0132+.ai.inworld.voices.Voice.Eleven"
  "LabsMetadataH\000\0328\n\026PhonemesOverridesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032&\n\022Elev"
  "enLabsMetadata\022\020\n\010voice_id\030\001 \001(\tB\016\n\014tts_"
  "metadata*p\n\006Gender\022\034\n\030VOICE_GENDER_UNSPE"
  "CIFIED\020\000\022\025\n\021VOICE_GENDER_MALE\020\001\022\027\n\023VOICE"
  "_GENDER_FEMALE\020\002\022\030\n\024VOICE_GENDER_NEUTRAL"
  "\020\003*c\n\003Age\022\031\n\025VOICE_AGE_UNSPECIFIED\020\000\022\023\n\017"
  "VOICE_AGE_YOUNG\020\001\022\031\n\025VOICE_AGE_MIDDLE_AG"
  "ED\020\002\022\021\n\rVOICE_AGE_OLD\020\003*U\n\007TTSType\022\031\n\021TT"
  "S_TYPE_STANDARD\020\000\032\002\010\001\022\025\n\021TTS_TYPE_ADVANC"
  "ED\020\001\022\030\n\024TTS_TYPE_ELEVEN_LABS\020\002Br\n\021ai.inw"
  "orld.voicesB\016VoicesProtocolZMgithub.com/"
  "inworld-ai/inworld/serving/grpc-gateway/"
  "build/proto/engine/v1alphab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_voices_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_voices_2eproto_sccs[3] = {
  &scc_info_Voice_voices_2eproto.base,
  &scc_info_Voice_ElevenLabsMetadata_voices_2eproto.base,
  &scc_info_Voice_PhonemesOverridesEntry_DoNotUse_voices_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_voices_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voices_2eproto = {
  false, false, descriptor_table_protodef_voices_2eproto, "voices.proto", 954,
  &descriptor_table_voices_2eproto_once, descriptor_table_voices_2eproto_sccs, descriptor_table_voices_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_voices_2eproto::offsets,
  file_level_metadata_voices_2eproto, 3, file_level_enum_descriptors_voices_2eproto, file_level_service_descriptors_voices_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_voices_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_voices_2eproto)), true);
namespace ai {
namespace inworld {
namespace voices {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_voices_2eproto);
  return file_level_enum_descriptors_voices_2eproto[0];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Age_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_voices_2eproto);
  return file_level_enum_descriptors_voices_2eproto[1];
}
bool Age_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TTSType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_voices_2eproto);
  return file_level_enum_descriptors_voices_2eproto[2];
}
bool TTSType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Voice_PhonemesOverridesEntry_DoNotUse::Voice_PhonemesOverridesEntry_DoNotUse() {}
Voice_PhonemesOverridesEntry_DoNotUse::Voice_PhonemesOverridesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Voice_PhonemesOverridesEntry_DoNotUse::MergeFrom(const Voice_PhonemesOverridesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Voice_PhonemesOverridesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Voice_PhonemesOverridesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Voice_ElevenLabsMetadata::_Internal {
 public:
};

Voice_ElevenLabsMetadata::Voice_ElevenLabsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.voices.Voice.ElevenLabsMetadata)
}
Voice_ElevenLabsMetadata::Voice_ElevenLabsMetadata(const Voice_ElevenLabsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voice_id().empty()) {
    voice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voice_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.voices.Voice.ElevenLabsMetadata)
}

void Voice_ElevenLabsMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Voice_ElevenLabsMetadata_voices_2eproto.base);
  voice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Voice_ElevenLabsMetadata::~Voice_ElevenLabsMetadata() {
  // @@protoc_insertion_point(destructor:ai.inworld.voices.Voice.ElevenLabsMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Voice_ElevenLabsMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  voice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Voice_ElevenLabsMetadata::ArenaDtor(void* object) {
  Voice_ElevenLabsMetadata* _this = reinterpret_cast< Voice_ElevenLabsMetadata* >(object);
  (void)_this;
}
void Voice_ElevenLabsMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Voice_ElevenLabsMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Voice_ElevenLabsMetadata& Voice_ElevenLabsMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Voice_ElevenLabsMetadata_voices_2eproto.base);
  return *internal_default_instance();
}


void Voice_ElevenLabsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voice_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Voice_ElevenLabsMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string voice_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_voice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Voice_ElevenLabsMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string voice_id = 1;
  if (this->voice_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voice_id().data(), static_cast<int>(this->_internal_voice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.voices.Voice.ElevenLabsMetadata.voice_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_voice_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.voices.Voice.ElevenLabsMetadata)
  return target;
}

size_t Voice_ElevenLabsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voice_id = 1;
  if (this->voice_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voice_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voice_ElevenLabsMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Voice_ElevenLabsMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Voice_ElevenLabsMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.voices.Voice.ElevenLabsMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.voices.Voice.ElevenLabsMetadata)
    MergeFrom(*source);
  }
}

void Voice_ElevenLabsMetadata::MergeFrom(const Voice_ElevenLabsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.voice_id().size() > 0) {
    _internal_set_voice_id(from._internal_voice_id());
  }
}

void Voice_ElevenLabsMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voice_ElevenLabsMetadata::CopyFrom(const Voice_ElevenLabsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.voices.Voice.ElevenLabsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice_ElevenLabsMetadata::IsInitialized() const {
  return true;
}

void Voice_ElevenLabsMetadata::InternalSwap(Voice_ElevenLabsMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  voice_id_.Swap(&other->voice_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Voice_ElevenLabsMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Voice::_Internal {
 public:
  static const ::ai::inworld::voices::Voice_ElevenLabsMetadata& elevenlabs_metadata(const Voice* msg);
};

const ::ai::inworld::voices::Voice_ElevenLabsMetadata&
Voice::_Internal::elevenlabs_metadata(const Voice* msg) {
  return *msg->tts_metadata_.elevenlabs_metadata_;
}
void Voice::set_allocated_elevenlabs_metadata(::ai::inworld::voices::Voice_ElevenLabsMetadata* elevenlabs_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_tts_metadata();
  if (elevenlabs_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(elevenlabs_metadata);
    if (message_arena != submessage_arena) {
      elevenlabs_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elevenlabs_metadata, submessage_arena);
    }
    set_has_elevenlabs_metadata();
    tts_metadata_.elevenlabs_metadata_ = elevenlabs_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.voices.Voice.elevenlabs_metadata)
}
Voice::Voice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phonemes_overrides_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.voices.Voice)
}
Voice::Voice(const Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phonemes_overrides_.MergeFrom(from.phonemes_overrides_);
  basename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_basename().empty()) {
    basename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_basename(), 
      GetArena());
  }
  ::memcpy(&tts_type_, &from.tts_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&tts_type_)) + sizeof(age_));
  clear_has_tts_metadata();
  switch (from.tts_metadata_case()) {
    case kElevenlabsMetadata: {
      _internal_mutable_elevenlabs_metadata()->::ai::inworld::voices::Voice_ElevenLabsMetadata::MergeFrom(from._internal_elevenlabs_metadata());
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.voices.Voice)
}

void Voice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Voice_voices_2eproto.base);
  basename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tts_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&tts_type_)) + sizeof(age_));
  clear_has_tts_metadata();
}

Voice::~Voice() {
  // @@protoc_insertion_point(destructor:ai.inworld.voices.Voice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Voice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  basename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_tts_metadata()) {
    clear_tts_metadata();
  }
}

void Voice::ArenaDtor(void* object) {
  Voice* _this = reinterpret_cast< Voice* >(object);
  (void)_this;
}
void Voice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Voice& Voice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Voice_voices_2eproto.base);
  return *internal_default_instance();
}


void Voice::clear_tts_metadata() {
// @@protoc_insertion_point(one_of_clear_start:ai.inworld.voices.Voice)
  switch (tts_metadata_case()) {
    case kElevenlabsMetadata: {
      if (GetArena() == nullptr) {
        delete tts_metadata_.elevenlabs_metadata_;
      }
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TTS_METADATA_NOT_SET;
}


void Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.voices.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phonemes_overrides_.Clear();
  basename_.ClearToEmpty();
  ::memset(&tts_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&tts_type_)) + sizeof(age_));
  clear_tts_metadata();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Voice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string baseName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_basename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.voices.Voice.baseName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.TTSType tts_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tts_type(static_cast<::ai::inworld::voices::TTSType>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Gender gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::ai::inworld::voices::Gender>(val));
        } else goto handle_unusual;
        continue;
      // double pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speaking_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          speaking_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double robotic_voice_filter_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          robotic_voice_filter_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // map<string, string> phonemes_overrides = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&phonemes_overrides_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Age age = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_age(static_cast<::ai::inworld::voices::Age>(val));
        } else goto handle_unusual;
        continue;
      // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_elevenlabs_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Voice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.voices.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string baseName = 1;
  if (this->basename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basename().data(), static_cast<int>(this->_internal_basename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.voices.Voice.baseName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_basename(), target);
  }

  // .ai.inworld.voices.TTSType tts_type = 2;
  if (this->tts_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_tts_type(), target);
  }

  // .ai.inworld.voices.Gender gender = 3;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // double pitch = 4;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_pitch(), target);
  }

  // double speaking_rate = 5;
  if (!(this->speaking_rate() <= 0 && this->speaking_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speaking_rate(), target);
  }

  // double robotic_voice_filter_level = 6;
  if (!(this->robotic_voice_filter_level() <= 0 && this->robotic_voice_filter_level() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_robotic_voice_filter_level(), target);
  }

  // map<string, string> phonemes_overrides = 7;
  if (!this->_internal_phonemes_overrides().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ai.inworld.voices.Voice.PhonemesOverridesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "ai.inworld.voices.Voice.PhonemesOverridesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_phonemes_overrides().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_phonemes_overrides().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_phonemes_overrides().begin();
          it != this->_internal_phonemes_overrides().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Voice_PhonemesOverridesEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_phonemes_overrides().begin();
          it != this->_internal_phonemes_overrides().end(); ++it) {
        target = Voice_PhonemesOverridesEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ai.inworld.voices.Age age = 8;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_age(), target);
  }

  // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
  if (_internal_has_elevenlabs_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::elevenlabs_metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.voices.Voice)
  return target;
}

size_t Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.voices.Voice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> phonemes_overrides = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_phonemes_overrides_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_phonemes_overrides().begin();
      it != this->_internal_phonemes_overrides().end(); ++it) {
    total_size += Voice_PhonemesOverridesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string baseName = 1;
  if (this->basename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basename());
  }

  // .ai.inworld.voices.TTSType tts_type = 2;
  if (this->tts_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tts_type());
  }

  // .ai.inworld.voices.Gender gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // double pitch = 4;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double speaking_rate = 5;
  if (!(this->speaking_rate() <= 0 && this->speaking_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double robotic_voice_filter_level = 6;
  if (!(this->robotic_voice_filter_level() <= 0 && this->robotic_voice_filter_level() >= 0)) {
    total_size += 1 + 8;
  }

  // .ai.inworld.voices.Age age = 8;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_age());
  }

  switch (tts_metadata_case()) {
    // .ai.inworld.voices.Voice.ElevenLabsMetadata elevenlabs_metadata = 100;
    case kElevenlabsMetadata: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tts_metadata_.elevenlabs_metadata_);
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.voices.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const Voice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Voice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.voices.Voice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.voices.Voice)
    MergeFrom(*source);
  }
}

void Voice::MergeFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.voices.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phonemes_overrides_.MergeFrom(from.phonemes_overrides_);
  if (from.basename().size() > 0) {
    _internal_set_basename(from._internal_basename());
  }
  if (from.tts_type() != 0) {
    _internal_set_tts_type(from._internal_tts_type());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.speaking_rate() <= 0 && from.speaking_rate() >= 0)) {
    _internal_set_speaking_rate(from._internal_speaking_rate());
  }
  if (!(from.robotic_voice_filter_level() <= 0 && from.robotic_voice_filter_level() >= 0)) {
    _internal_set_robotic_voice_filter_level(from._internal_robotic_voice_filter_level());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
  switch (from.tts_metadata_case()) {
    case kElevenlabsMetadata: {
      _internal_mutable_elevenlabs_metadata()->::ai::inworld::voices::Voice_ElevenLabsMetadata::MergeFrom(from._internal_elevenlabs_metadata());
      break;
    }
    case TTS_METADATA_NOT_SET: {
      break;
    }
  }
}

void Voice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.voices.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voice::CopyFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.voices.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice::IsInitialized() const {
  return true;
}

void Voice::InternalSwap(Voice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phonemes_overrides_.Swap(&other->phonemes_overrides_);
  basename_.Swap(&other->basename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Voice, age_)
      + sizeof(Voice::age_)
      - PROTOBUF_FIELD_OFFSET(Voice, tts_type_)>(
          reinterpret_cast<char*>(&tts_type_),
          reinterpret_cast<char*>(&other->tts_type_));
  swap(tts_metadata_, other->tts_metadata_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Voice::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace voices
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse* Arena::CreateMaybeMessage< ::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::voices::Voice_PhonemesOverridesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::voices::Voice_ElevenLabsMetadata* Arena::CreateMaybeMessage< ::ai::inworld::voices::Voice_ElevenLabsMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::voices::Voice_ElevenLabsMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::voices::Voice* Arena::CreateMaybeMessage< ::ai::inworld::voices::Voice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::voices::Voice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
