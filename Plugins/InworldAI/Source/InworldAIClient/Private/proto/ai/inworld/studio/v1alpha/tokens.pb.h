// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/tokens.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class GenerateDefaultSessionTokenRequest;
class GenerateDefaultSessionTokenRequestDefaultTypeInternal;
extern GenerateDefaultSessionTokenRequestDefaultTypeInternal _GenerateDefaultSessionTokenRequest_default_instance_;
class GenerateSessionTokenRequest;
class GenerateSessionTokenRequestDefaultTypeInternal;
extern GenerateSessionTokenRequestDefaultTypeInternal _GenerateSessionTokenRequest_default_instance_;
class SessionAccessToken;
class SessionAccessTokenDefaultTypeInternal;
extern SessionAccessTokenDefaultTypeInternal _SessionAccessToken_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::SessionAccessToken* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::SessionAccessToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================

class SessionAccessToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.SessionAccessToken) */ {
 public:
  inline SessionAccessToken() : SessionAccessToken(nullptr) {}
  virtual ~SessionAccessToken();

  SessionAccessToken(const SessionAccessToken& from);
  SessionAccessToken(SessionAccessToken&& from) noexcept
    : SessionAccessToken() {
    *this = ::std::move(from);
  }

  inline SessionAccessToken& operator=(const SessionAccessToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionAccessToken& operator=(SessionAccessToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionAccessToken& default_instance();

  static inline const SessionAccessToken* internal_default_instance() {
    return reinterpret_cast<const SessionAccessToken*>(
               &_SessionAccessToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionAccessToken& a, SessionAccessToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionAccessToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionAccessToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionAccessToken* New() const final {
    return CreateMaybeMessage<SessionAccessToken>(nullptr);
  }

  SessionAccessToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionAccessToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionAccessToken& from);
  void MergeFrom(const SessionAccessToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionAccessToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.SessionAccessToken";
  }
  protected:
  explicit SessionAccessToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSessionIdFieldNumber = 4,
    kExpirationTimeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string session_id = 4;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.SessionAccessToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
};
// -------------------------------------------------------------------

class GenerateSessionTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest) */ {
 public:
  inline GenerateSessionTokenRequest() : GenerateSessionTokenRequest(nullptr) {}
  virtual ~GenerateSessionTokenRequest();

  GenerateSessionTokenRequest(const GenerateSessionTokenRequest& from);
  GenerateSessionTokenRequest(GenerateSessionTokenRequest&& from) noexcept
    : GenerateSessionTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateSessionTokenRequest& operator=(const GenerateSessionTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateSessionTokenRequest& operator=(GenerateSessionTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateSessionTokenRequest& default_instance();

  static inline const GenerateSessionTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateSessionTokenRequest*>(
               &_GenerateSessionTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateSessionTokenRequest& a, GenerateSessionTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateSessionTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateSessionTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateSessionTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateSessionTokenRequest>(nullptr);
  }

  GenerateSessionTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateSessionTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateSessionTokenRequest& from);
  void MergeFrom(const GenerateSessionTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateSessionTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateSessionTokenRequest";
  }
  protected:
  explicit GenerateSessionTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
};
// -------------------------------------------------------------------

class GenerateDefaultSessionTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest) */ {
 public:
  inline GenerateDefaultSessionTokenRequest() : GenerateDefaultSessionTokenRequest(nullptr) {}
  virtual ~GenerateDefaultSessionTokenRequest();

  GenerateDefaultSessionTokenRequest(const GenerateDefaultSessionTokenRequest& from);
  GenerateDefaultSessionTokenRequest(GenerateDefaultSessionTokenRequest&& from) noexcept
    : GenerateDefaultSessionTokenRequest() {
    *this = ::std::move(from);
  }

  inline GenerateDefaultSessionTokenRequest& operator=(const GenerateDefaultSessionTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateDefaultSessionTokenRequest& operator=(GenerateDefaultSessionTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateDefaultSessionTokenRequest& default_instance();

  static inline const GenerateDefaultSessionTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateDefaultSessionTokenRequest*>(
               &_GenerateDefaultSessionTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenerateDefaultSessionTokenRequest& a, GenerateDefaultSessionTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateDefaultSessionTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateDefaultSessionTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateDefaultSessionTokenRequest* New() const final {
    return CreateMaybeMessage<GenerateDefaultSessionTokenRequest>(nullptr);
  }

  GenerateDefaultSessionTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateDefaultSessionTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateDefaultSessionTokenRequest& from);
  void MergeFrom(const GenerateDefaultSessionTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateDefaultSessionTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest";
  }
  protected:
  explicit GenerateDefaultSessionTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto);
    return ::descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionAccessToken

// string token = 1;
inline void SessionAccessToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& SessionAccessToken::token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.token)
  return _internal_token();
}
inline void SessionAccessToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}
inline std::string* SessionAccessToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.token)
  return _internal_mutable_token();
}
inline const std::string& SessionAccessToken::_internal_token() const {
  return token_.Get();
}
inline void SessionAccessToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionAccessToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}
inline void SessionAccessToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}
inline void SessionAccessToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}
inline std::string* SessionAccessToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionAccessToken::release_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionAccessToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.token)
}

// string type = 2;
inline void SessionAccessToken::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& SessionAccessToken::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.type)
  return _internal_type();
}
inline void SessionAccessToken::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}
inline std::string* SessionAccessToken::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.type)
  return _internal_mutable_type();
}
inline const std::string& SessionAccessToken::_internal_type() const {
  return type_.Get();
}
inline void SessionAccessToken::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionAccessToken::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}
inline void SessionAccessToken::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}
inline void SessionAccessToken::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}
inline std::string* SessionAccessToken::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionAccessToken::release_type() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionAccessToken::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool SessionAccessToken::_internal_has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != nullptr;
}
inline bool SessionAccessToken::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SessionAccessToken::_internal_expiration_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SessionAccessToken::expiration_time() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
  return _internal_expiration_time();
}
inline void SessionAccessToken::unsafe_arena_set_allocated_expiration_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SessionAccessToken::release_expiration_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SessionAccessToken::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SessionAccessToken::_internal_mutable_expiration_time() {
  
  if (expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiration_time_ = p;
  }
  return expiration_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SessionAccessToken::mutable_expiration_time() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
  return _internal_mutable_expiration_time();
}
inline void SessionAccessToken::set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.expiration_time)
}

// string session_id = 4;
inline void SessionAccessToken::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& SessionAccessToken::session_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
  return _internal_session_id();
}
inline void SessionAccessToken::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}
inline std::string* SessionAccessToken::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& SessionAccessToken::_internal_session_id() const {
  return session_id_.Get();
}
inline void SessionAccessToken::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SessionAccessToken::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}
inline void SessionAccessToken::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}
inline void SessionAccessToken::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}
inline std::string* SessionAccessToken::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SessionAccessToken::release_session_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionAccessToken::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SessionAccessToken.session_id)
}

// -------------------------------------------------------------------

// GenerateSessionTokenRequest

// string key = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GenerateSessionTokenRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& GenerateSessionTokenRequest::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
  return _internal_key();
}
inline void GenerateSessionTokenRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}
inline std::string* GenerateSessionTokenRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
  return _internal_mutable_key();
}
inline const std::string& GenerateSessionTokenRequest::_internal_key() const {
  return key_.Get();
}
inline void GenerateSessionTokenRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateSessionTokenRequest::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}
inline void GenerateSessionTokenRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}
inline void GenerateSessionTokenRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}
inline std::string* GenerateSessionTokenRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateSessionTokenRequest::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateSessionTokenRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key)
}

// -------------------------------------------------------------------

// GenerateDefaultSessionTokenRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateDefaultSessionTokenRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& GenerateDefaultSessionTokenRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
  return _internal_parent();
}
inline void GenerateDefaultSessionTokenRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}
inline std::string* GenerateDefaultSessionTokenRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& GenerateDefaultSessionTokenRequest::_internal_parent() const {
  return parent_.Get();
}
inline void GenerateDefaultSessionTokenRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateDefaultSessionTokenRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}
inline void GenerateDefaultSessionTokenRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}
inline void GenerateDefaultSessionTokenRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}
inline std::string* GenerateDefaultSessionTokenRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateDefaultSessionTokenRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateDefaultSessionTokenRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto
