// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: behavioral_contexts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_behavioral_5fcontexts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_behavioral_5fcontexts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_behavioral_5fcontexts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_behavioral_5fcontexts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_behavioral_5fcontexts_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class BehavioralContext;
class BehavioralContextDefaultTypeInternal;
extern BehavioralContextDefaultTypeInternal _BehavioralContext_default_instance_;
class BehavioralContextAction;
class BehavioralContextActionDefaultTypeInternal;
extern BehavioralContextActionDefaultTypeInternal _BehavioralContextAction_default_instance_;
class BehavioralContextInteraction;
class BehavioralContextInteractionDefaultTypeInternal;
extern BehavioralContextInteractionDefaultTypeInternal _BehavioralContextInteraction_default_instance_;
class BehavioralContextProperties;
class BehavioralContextPropertiesDefaultTypeInternal;
extern BehavioralContextPropertiesDefaultTypeInternal _BehavioralContextProperties_default_instance_;
class SendCustomEventContextAction;
class SendCustomEventContextActionDefaultTypeInternal;
extern SendCustomEventContextActionDefaultTypeInternal _SendCustomEventContextAction_default_instance_;
class SetEmotionContextAction;
class SetEmotionContextActionDefaultTypeInternal;
extern SetEmotionContextActionDefaultTypeInternal _SetEmotionContextAction_default_instance_;
class TellExactTextContextAction;
class TellExactTextContextActionDefaultTypeInternal;
extern TellExactTextContextActionDefaultTypeInternal _TellExactTextContextAction_default_instance_;
class TellInstructedContextAction;
class TellInstructedContextActionDefaultTypeInternal;
extern TellInstructedContextActionDefaultTypeInternal _TellInstructedContextAction_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::BehavioralContext* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::BehavioralContext>(Arena*);
template<> ::ai::inworld::studio::v1alpha::BehavioralContextAction* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::BehavioralContextAction>(Arena*);
template<> ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::BehavioralContextInteraction>(Arena*);
template<> ::ai::inworld::studio::v1alpha::BehavioralContextProperties* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::BehavioralContextProperties>(Arena*);
template<> ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::SendCustomEventContextAction>(Arena*);
template<> ::ai::inworld::studio::v1alpha::SetEmotionContextAction* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::SetEmotionContextAction>(Arena*);
template<> ::ai::inworld::studio::v1alpha::TellExactTextContextAction* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::TellExactTextContextAction>(Arena*);
template<> ::ai::inworld::studio::v1alpha::TellInstructedContextAction* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::TellInstructedContextAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

enum BehavioralContextInteractionType : int {
  BEHAVIORAL_CONTEXT_INTERACTION_TYPE_UNSPECIFIED = 0,
  BEHAVIORAL_CONTEXT_INTERACTION_TYPE_EXECUTE_SEQUENCE = 1,
  BehavioralContextInteractionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BehavioralContextInteractionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BehavioralContextInteractionType_IsValid(int value);
constexpr BehavioralContextInteractionType BehavioralContextInteractionType_MIN = BEHAVIORAL_CONTEXT_INTERACTION_TYPE_UNSPECIFIED;
constexpr BehavioralContextInteractionType BehavioralContextInteractionType_MAX = BEHAVIORAL_CONTEXT_INTERACTION_TYPE_EXECUTE_SEQUENCE;
constexpr int BehavioralContextInteractionType_ARRAYSIZE = BehavioralContextInteractionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BehavioralContextInteractionType_descriptor();
template<typename T>
inline const std::string& BehavioralContextInteractionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BehavioralContextInteractionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BehavioralContextInteractionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BehavioralContextInteractionType_descriptor(), enum_t_value);
}
inline bool BehavioralContextInteractionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BehavioralContextInteractionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BehavioralContextInteractionType>(
    BehavioralContextInteractionType_descriptor(), name, value);
}
enum SpaffCode : int {
  SPAFF_CODE_UNSPECIFIED = 0,
  NEUTRAL = 1,
  DISGUST = 2,
  CONTEMPT = 3,
  BELLIGERENCE = 4,
  DOMINEERING = 5,
  CRITICISM = 6,
  ANGER = 7,
  TENSION = 8,
  TENSE_HUMOR = 9,
  DEFENSIVENESS = 10,
  WHINING = 11,
  SADNESS = 12,
  STONEWALLING = 13,
  INTEREST = 14,
  VALIDATION = 15,
  AFFECTION = 16,
  HUMOR = 17,
  SURPRISE = 18,
  JOY = 19,
  SpaffCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SpaffCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SpaffCode_IsValid(int value);
constexpr SpaffCode SpaffCode_MIN = SPAFF_CODE_UNSPECIFIED;
constexpr SpaffCode SpaffCode_MAX = JOY;
constexpr int SpaffCode_ARRAYSIZE = SpaffCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpaffCode_descriptor();
template<typename T>
inline const std::string& SpaffCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpaffCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpaffCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpaffCode_descriptor(), enum_t_value);
}
inline bool SpaffCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpaffCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpaffCode>(
    SpaffCode_descriptor(), name, value);
}
// ===================================================================

class BehavioralContextProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.BehavioralContextProperties) */ {
 public:
  inline BehavioralContextProperties() : BehavioralContextProperties(nullptr) {}
  virtual ~BehavioralContextProperties();

  BehavioralContextProperties(const BehavioralContextProperties& from);
  BehavioralContextProperties(BehavioralContextProperties&& from) noexcept
    : BehavioralContextProperties() {
    *this = ::std::move(from);
  }

  inline BehavioralContextProperties& operator=(const BehavioralContextProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline BehavioralContextProperties& operator=(BehavioralContextProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BehavioralContextProperties& default_instance();

  static inline const BehavioralContextProperties* internal_default_instance() {
    return reinterpret_cast<const BehavioralContextProperties*>(
               &_BehavioralContextProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BehavioralContextProperties& a, BehavioralContextProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(BehavioralContextProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BehavioralContextProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BehavioralContextProperties* New() const final {
    return CreateMaybeMessage<BehavioralContextProperties>(nullptr);
  }

  BehavioralContextProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BehavioralContextProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BehavioralContextProperties& from);
  void MergeFrom(const BehavioralContextProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BehavioralContextProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.BehavioralContextProperties";
  }
  protected:
  explicit BehavioralContextProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 2,
    kStartConversationFieldNumber = 1,
    kIsDefaultFieldNumber = 3,
  };
  // int32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool start_conversation = 1;
  void clear_start_conversation();
  bool start_conversation() const;
  void set_start_conversation(bool value);
  private:
  bool _internal_start_conversation() const;
  void _internal_set_start_conversation(bool value);
  public:

  // bool is_default = 3;
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.BehavioralContextProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  bool start_conversation_;
  bool is_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class TellExactTextContextAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.TellExactTextContextAction) */ {
 public:
  inline TellExactTextContextAction() : TellExactTextContextAction(nullptr) {}
  virtual ~TellExactTextContextAction();

  TellExactTextContextAction(const TellExactTextContextAction& from);
  TellExactTextContextAction(TellExactTextContextAction&& from) noexcept
    : TellExactTextContextAction() {
    *this = ::std::move(from);
  }

  inline TellExactTextContextAction& operator=(const TellExactTextContextAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TellExactTextContextAction& operator=(TellExactTextContextAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TellExactTextContextAction& default_instance();

  static inline const TellExactTextContextAction* internal_default_instance() {
    return reinterpret_cast<const TellExactTextContextAction*>(
               &_TellExactTextContextAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TellExactTextContextAction& a, TellExactTextContextAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TellExactTextContextAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TellExactTextContextAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TellExactTextContextAction* New() const final {
    return CreateMaybeMessage<TellExactTextContextAction>(nullptr);
  }

  TellExactTextContextAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TellExactTextContextAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TellExactTextContextAction& from);
  void MergeFrom(const TellExactTextContextAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellExactTextContextAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.TellExactTextContextAction";
  }
  protected:
  explicit TellExactTextContextAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExactTextFieldNumber = 1,
  };
  // string exact_text = 1;
  void clear_exact_text();
  const std::string& exact_text() const;
  void set_exact_text(const std::string& value);
  void set_exact_text(std::string&& value);
  void set_exact_text(const char* value);
  void set_exact_text(const char* value, size_t size);
  std::string* mutable_exact_text();
  std::string* release_exact_text();
  void set_allocated_exact_text(std::string* exact_text);
  private:
  const std::string& _internal_exact_text() const;
  void _internal_set_exact_text(const std::string& value);
  std::string* _internal_mutable_exact_text();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.TellExactTextContextAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exact_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class TellInstructedContextAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.TellInstructedContextAction) */ {
 public:
  inline TellInstructedContextAction() : TellInstructedContextAction(nullptr) {}
  virtual ~TellInstructedContextAction();

  TellInstructedContextAction(const TellInstructedContextAction& from);
  TellInstructedContextAction(TellInstructedContextAction&& from) noexcept
    : TellInstructedContextAction() {
    *this = ::std::move(from);
  }

  inline TellInstructedContextAction& operator=(const TellInstructedContextAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TellInstructedContextAction& operator=(TellInstructedContextAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TellInstructedContextAction& default_instance();

  static inline const TellInstructedContextAction* internal_default_instance() {
    return reinterpret_cast<const TellInstructedContextAction*>(
               &_TellInstructedContextAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TellInstructedContextAction& a, TellInstructedContextAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TellInstructedContextAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TellInstructedContextAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TellInstructedContextAction* New() const final {
    return CreateMaybeMessage<TellInstructedContextAction>(nullptr);
  }

  TellInstructedContextAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TellInstructedContextAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TellInstructedContextAction& from);
  void MergeFrom(const TellInstructedContextAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellInstructedContextAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.TellInstructedContextAction";
  }
  protected:
  explicit TellInstructedContextAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeechInstructionFieldNumber = 1,
  };
  // string speech_instruction = 1;
  void clear_speech_instruction();
  const std::string& speech_instruction() const;
  void set_speech_instruction(const std::string& value);
  void set_speech_instruction(std::string&& value);
  void set_speech_instruction(const char* value);
  void set_speech_instruction(const char* value, size_t size);
  std::string* mutable_speech_instruction();
  std::string* release_speech_instruction();
  void set_allocated_speech_instruction(std::string* speech_instruction);
  private:
  const std::string& _internal_speech_instruction() const;
  void _internal_set_speech_instruction(const std::string& value);
  std::string* _internal_mutable_speech_instruction();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.TellInstructedContextAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speech_instruction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class SendCustomEventContextAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.SendCustomEventContextAction) */ {
 public:
  inline SendCustomEventContextAction() : SendCustomEventContextAction(nullptr) {}
  virtual ~SendCustomEventContextAction();

  SendCustomEventContextAction(const SendCustomEventContextAction& from);
  SendCustomEventContextAction(SendCustomEventContextAction&& from) noexcept
    : SendCustomEventContextAction() {
    *this = ::std::move(from);
  }

  inline SendCustomEventContextAction& operator=(const SendCustomEventContextAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCustomEventContextAction& operator=(SendCustomEventContextAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCustomEventContextAction& default_instance();

  static inline const SendCustomEventContextAction* internal_default_instance() {
    return reinterpret_cast<const SendCustomEventContextAction*>(
               &_SendCustomEventContextAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SendCustomEventContextAction& a, SendCustomEventContextAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCustomEventContextAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCustomEventContextAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCustomEventContextAction* New() const final {
    return CreateMaybeMessage<SendCustomEventContextAction>(nullptr);
  }

  SendCustomEventContextAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCustomEventContextAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCustomEventContextAction& from);
  void MergeFrom(const SendCustomEventContextAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCustomEventContextAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.SendCustomEventContextAction";
  }
  protected:
  explicit SendCustomEventContextAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomEventFieldNumber = 1,
  };
  // string custom_event = 1;
  void clear_custom_event();
  const std::string& custom_event() const;
  void set_custom_event(const std::string& value);
  void set_custom_event(std::string&& value);
  void set_custom_event(const char* value);
  void set_custom_event(const char* value, size_t size);
  std::string* mutable_custom_event();
  std::string* release_custom_event();
  void set_allocated_custom_event(std::string* custom_event);
  private:
  const std::string& _internal_custom_event() const;
  void _internal_set_custom_event(const std::string& value);
  std::string* _internal_mutable_custom_event();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.SendCustomEventContextAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class SetEmotionContextAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.SetEmotionContextAction) */ {
 public:
  inline SetEmotionContextAction() : SetEmotionContextAction(nullptr) {}
  virtual ~SetEmotionContextAction();

  SetEmotionContextAction(const SetEmotionContextAction& from);
  SetEmotionContextAction(SetEmotionContextAction&& from) noexcept
    : SetEmotionContextAction() {
    *this = ::std::move(from);
  }

  inline SetEmotionContextAction& operator=(const SetEmotionContextAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEmotionContextAction& operator=(SetEmotionContextAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEmotionContextAction& default_instance();

  static inline const SetEmotionContextAction* internal_default_instance() {
    return reinterpret_cast<const SetEmotionContextAction*>(
               &_SetEmotionContextAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetEmotionContextAction& a, SetEmotionContextAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEmotionContextAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEmotionContextAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetEmotionContextAction* New() const final {
    return CreateMaybeMessage<SetEmotionContextAction>(nullptr);
  }

  SetEmotionContextAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEmotionContextAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEmotionContextAction& from);
  void MergeFrom(const SetEmotionContextAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEmotionContextAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.SetEmotionContextAction";
  }
  protected:
  explicit SetEmotionContextAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBehaviorFieldNumber = 1,
  };
  // .ai.inworld.studio.v1alpha.SpaffCode behavior = 1;
  void clear_behavior();
  ::ai::inworld::studio::v1alpha::SpaffCode behavior() const;
  void set_behavior(::ai::inworld::studio::v1alpha::SpaffCode value);
  private:
  ::ai::inworld::studio::v1alpha::SpaffCode _internal_behavior() const;
  void _internal_set_behavior(::ai::inworld::studio::v1alpha::SpaffCode value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.SetEmotionContextAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class BehavioralContextAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.BehavioralContextAction) */ {
 public:
  inline BehavioralContextAction() : BehavioralContextAction(nullptr) {}
  virtual ~BehavioralContextAction();

  BehavioralContextAction(const BehavioralContextAction& from);
  BehavioralContextAction(BehavioralContextAction&& from) noexcept
    : BehavioralContextAction() {
    *this = ::std::move(from);
  }

  inline BehavioralContextAction& operator=(const BehavioralContextAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BehavioralContextAction& operator=(BehavioralContextAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BehavioralContextAction& default_instance();

  enum ActionCase {
    kTellExact = 2,
    kTellInstructed = 3,
    kSendCustomEvent = 4,
    kSetEmotion = 5,
    ACTION_NOT_SET = 0,
  };

  static inline const BehavioralContextAction* internal_default_instance() {
    return reinterpret_cast<const BehavioralContextAction*>(
               &_BehavioralContextAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BehavioralContextAction& a, BehavioralContextAction& b) {
    a.Swap(&b);
  }
  inline void Swap(BehavioralContextAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BehavioralContextAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BehavioralContextAction* New() const final {
    return CreateMaybeMessage<BehavioralContextAction>(nullptr);
  }

  BehavioralContextAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BehavioralContextAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BehavioralContextAction& from);
  void MergeFrom(const BehavioralContextAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BehavioralContextAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.BehavioralContextAction";
  }
  protected:
  explicit BehavioralContextAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTellExactFieldNumber = 2,
    kTellInstructedFieldNumber = 3,
    kSendCustomEventFieldNumber = 4,
    kSetEmotionFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .ai.inworld.studio.v1alpha.TellExactTextContextAction tell_exact = 2;
  bool has_tell_exact() const;
  private:
  bool _internal_has_tell_exact() const;
  public:
  void clear_tell_exact();
  const ::ai::inworld::studio::v1alpha::TellExactTextContextAction& tell_exact() const;
  ::ai::inworld::studio::v1alpha::TellExactTextContextAction* release_tell_exact();
  ::ai::inworld::studio::v1alpha::TellExactTextContextAction* mutable_tell_exact();
  void set_allocated_tell_exact(::ai::inworld::studio::v1alpha::TellExactTextContextAction* tell_exact);
  private:
  const ::ai::inworld::studio::v1alpha::TellExactTextContextAction& _internal_tell_exact() const;
  ::ai::inworld::studio::v1alpha::TellExactTextContextAction* _internal_mutable_tell_exact();
  public:
  void unsafe_arena_set_allocated_tell_exact(
      ::ai::inworld::studio::v1alpha::TellExactTextContextAction* tell_exact);
  ::ai::inworld::studio::v1alpha::TellExactTextContextAction* unsafe_arena_release_tell_exact();

  // .ai.inworld.studio.v1alpha.TellInstructedContextAction tell_instructed = 3;
  bool has_tell_instructed() const;
  private:
  bool _internal_has_tell_instructed() const;
  public:
  void clear_tell_instructed();
  const ::ai::inworld::studio::v1alpha::TellInstructedContextAction& tell_instructed() const;
  ::ai::inworld::studio::v1alpha::TellInstructedContextAction* release_tell_instructed();
  ::ai::inworld::studio::v1alpha::TellInstructedContextAction* mutable_tell_instructed();
  void set_allocated_tell_instructed(::ai::inworld::studio::v1alpha::TellInstructedContextAction* tell_instructed);
  private:
  const ::ai::inworld::studio::v1alpha::TellInstructedContextAction& _internal_tell_instructed() const;
  ::ai::inworld::studio::v1alpha::TellInstructedContextAction* _internal_mutable_tell_instructed();
  public:
  void unsafe_arena_set_allocated_tell_instructed(
      ::ai::inworld::studio::v1alpha::TellInstructedContextAction* tell_instructed);
  ::ai::inworld::studio::v1alpha::TellInstructedContextAction* unsafe_arena_release_tell_instructed();

  // .ai.inworld.studio.v1alpha.SendCustomEventContextAction send_custom_event = 4;
  bool has_send_custom_event() const;
  private:
  bool _internal_has_send_custom_event() const;
  public:
  void clear_send_custom_event();
  const ::ai::inworld::studio::v1alpha::SendCustomEventContextAction& send_custom_event() const;
  ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* release_send_custom_event();
  ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* mutable_send_custom_event();
  void set_allocated_send_custom_event(::ai::inworld::studio::v1alpha::SendCustomEventContextAction* send_custom_event);
  private:
  const ::ai::inworld::studio::v1alpha::SendCustomEventContextAction& _internal_send_custom_event() const;
  ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* _internal_mutable_send_custom_event();
  public:
  void unsafe_arena_set_allocated_send_custom_event(
      ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* send_custom_event);
  ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* unsafe_arena_release_send_custom_event();

  // .ai.inworld.studio.v1alpha.SetEmotionContextAction set_emotion = 5;
  bool has_set_emotion() const;
  private:
  bool _internal_has_set_emotion() const;
  public:
  void clear_set_emotion();
  const ::ai::inworld::studio::v1alpha::SetEmotionContextAction& set_emotion() const;
  ::ai::inworld::studio::v1alpha::SetEmotionContextAction* release_set_emotion();
  ::ai::inworld::studio::v1alpha::SetEmotionContextAction* mutable_set_emotion();
  void set_allocated_set_emotion(::ai::inworld::studio::v1alpha::SetEmotionContextAction* set_emotion);
  private:
  const ::ai::inworld::studio::v1alpha::SetEmotionContextAction& _internal_set_emotion() const;
  ::ai::inworld::studio::v1alpha::SetEmotionContextAction* _internal_mutable_set_emotion();
  public:
  void unsafe_arena_set_allocated_set_emotion(
      ::ai::inworld::studio::v1alpha::SetEmotionContextAction* set_emotion);
  ::ai::inworld::studio::v1alpha::SetEmotionContextAction* unsafe_arena_release_set_emotion();

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.BehavioralContextAction)
 private:
  class _Internal;
  void set_has_tell_exact();
  void set_has_tell_instructed();
  void set_has_send_custom_event();
  void set_has_set_emotion();

  inline bool has_action() const;
  inline void clear_has_action();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  union ActionUnion {
    ActionUnion() {}
    ::ai::inworld::studio::v1alpha::TellExactTextContextAction* tell_exact_;
    ::ai::inworld::studio::v1alpha::TellInstructedContextAction* tell_instructed_;
    ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* send_custom_event_;
    ::ai::inworld::studio::v1alpha::SetEmotionContextAction* set_emotion_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class BehavioralContextInteraction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.BehavioralContextInteraction) */ {
 public:
  inline BehavioralContextInteraction() : BehavioralContextInteraction(nullptr) {}
  virtual ~BehavioralContextInteraction();

  BehavioralContextInteraction(const BehavioralContextInteraction& from);
  BehavioralContextInteraction(BehavioralContextInteraction&& from) noexcept
    : BehavioralContextInteraction() {
    *this = ::std::move(from);
  }

  inline BehavioralContextInteraction& operator=(const BehavioralContextInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BehavioralContextInteraction& operator=(BehavioralContextInteraction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BehavioralContextInteraction& default_instance();

  static inline const BehavioralContextInteraction* internal_default_instance() {
    return reinterpret_cast<const BehavioralContextInteraction*>(
               &_BehavioralContextInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BehavioralContextInteraction& a, BehavioralContextInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(BehavioralContextInteraction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BehavioralContextInteraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BehavioralContextInteraction* New() const final {
    return CreateMaybeMessage<BehavioralContextInteraction>(nullptr);
  }

  BehavioralContextInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BehavioralContextInteraction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BehavioralContextInteraction& from);
  void MergeFrom(const BehavioralContextInteraction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BehavioralContextInteraction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.BehavioralContextInteraction";
  }
  protected:
  explicit BehavioralContextInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 2,
    kUuidFieldNumber = 3,
    kInteractionTypeFieldNumber = 1,
  };
  // repeated .ai.inworld.studio.v1alpha.BehavioralContextAction actions = 2;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::ai::inworld::studio::v1alpha::BehavioralContextAction* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextAction >*
      mutable_actions();
  private:
  const ::ai::inworld::studio::v1alpha::BehavioralContextAction& _internal_actions(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContextAction* _internal_add_actions();
  public:
  const ::ai::inworld::studio::v1alpha::BehavioralContextAction& actions(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContextAction* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextAction >&
      actions() const;

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .ai.inworld.studio.v1alpha.BehavioralContextInteractionType interaction_type = 1;
  void clear_interaction_type();
  ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType interaction_type() const;
  void set_interaction_type(::ai::inworld::studio::v1alpha::BehavioralContextInteractionType value);
  private:
  ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType _internal_interaction_type() const;
  void _internal_set_interaction_type(::ai::inworld::studio::v1alpha::BehavioralContextInteractionType value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.BehavioralContextInteraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextAction > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  int interaction_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// -------------------------------------------------------------------

class BehavioralContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.BehavioralContext) */ {
 public:
  inline BehavioralContext() : BehavioralContext(nullptr) {}
  virtual ~BehavioralContext();

  BehavioralContext(const BehavioralContext& from);
  BehavioralContext(BehavioralContext&& from) noexcept
    : BehavioralContext() {
    *this = ::std::move(from);
  }

  inline BehavioralContext& operator=(const BehavioralContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline BehavioralContext& operator=(BehavioralContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BehavioralContext& default_instance();

  static inline const BehavioralContext* internal_default_instance() {
    return reinterpret_cast<const BehavioralContext*>(
               &_BehavioralContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BehavioralContext& a, BehavioralContext& b) {
    a.Swap(&b);
  }
  inline void Swap(BehavioralContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BehavioralContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BehavioralContext* New() const final {
    return CreateMaybeMessage<BehavioralContext>(nullptr);
  }

  BehavioralContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BehavioralContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BehavioralContext& from);
  void MergeFrom(const BehavioralContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BehavioralContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.BehavioralContext";
  }
  protected:
  explicit BehavioralContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_behavioral_5fcontexts_2eproto);
    return ::descriptor_table_behavioral_5fcontexts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggersFieldNumber = 4,
    kBehavioralContextInteractionFieldNumber = 5,
    kNameFieldNumber = 1,
    kMotivationFieldNumber = 2,
    kPropertiesFieldNumber = 3,
  };
  // repeated string triggers = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;
  public:
  void clear_triggers();
  const std::string& triggers(int index) const;
  std::string* mutable_triggers(int index);
  void set_triggers(int index, const std::string& value);
  void set_triggers(int index, std::string&& value);
  void set_triggers(int index, const char* value);
  void set_triggers(int index, const char* value, size_t size);
  std::string* add_triggers();
  void add_triggers(const std::string& value);
  void add_triggers(std::string&& value);
  void add_triggers(const char* value);
  void add_triggers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& triggers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_triggers();
  private:
  const std::string& _internal_triggers(int index) const;
  std::string* _internal_add_triggers();
  public:

  // repeated .ai.inworld.studio.v1alpha.BehavioralContextInteraction behavioral_context_interaction = 5;
  int behavioral_context_interaction_size() const;
  private:
  int _internal_behavioral_context_interaction_size() const;
  public:
  void clear_behavioral_context_interaction();
  ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* mutable_behavioral_context_interaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextInteraction >*
      mutable_behavioral_context_interaction();
  private:
  const ::ai::inworld::studio::v1alpha::BehavioralContextInteraction& _internal_behavioral_context_interaction(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* _internal_add_behavioral_context_interaction();
  public:
  const ::ai::inworld::studio::v1alpha::BehavioralContextInteraction& behavioral_context_interaction(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* add_behavioral_context_interaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextInteraction >&
      behavioral_context_interaction() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string motivation = 2;
  void clear_motivation();
  const std::string& motivation() const;
  void set_motivation(const std::string& value);
  void set_motivation(std::string&& value);
  void set_motivation(const char* value);
  void set_motivation(const char* value, size_t size);
  std::string* mutable_motivation();
  std::string* release_motivation();
  void set_allocated_motivation(std::string* motivation);
  private:
  const std::string& _internal_motivation() const;
  void _internal_set_motivation(const std::string& value);
  std::string* _internal_mutable_motivation();
  public:

  // .ai.inworld.studio.v1alpha.BehavioralContextProperties properties = 3;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::ai::inworld::studio::v1alpha::BehavioralContextProperties& properties() const;
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* release_properties();
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* mutable_properties();
  void set_allocated_properties(::ai::inworld::studio::v1alpha::BehavioralContextProperties* properties);
  private:
  const ::ai::inworld::studio::v1alpha::BehavioralContextProperties& _internal_properties() const;
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::ai::inworld::studio::v1alpha::BehavioralContextProperties* properties);
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* unsafe_arena_release_properties();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.BehavioralContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> triggers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextInteraction > behavioral_context_interaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motivation_;
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_behavioral_5fcontexts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BehavioralContextProperties

// bool start_conversation = 1;
inline void BehavioralContextProperties::clear_start_conversation() {
  start_conversation_ = false;
}
inline bool BehavioralContextProperties::_internal_start_conversation() const {
  return start_conversation_;
}
inline bool BehavioralContextProperties::start_conversation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextProperties.start_conversation)
  return _internal_start_conversation();
}
inline void BehavioralContextProperties::_internal_set_start_conversation(bool value) {
  
  start_conversation_ = value;
}
inline void BehavioralContextProperties::set_start_conversation(bool value) {
  _internal_set_start_conversation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContextProperties.start_conversation)
}

// int32 priority = 2;
inline void BehavioralContextProperties::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BehavioralContextProperties::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BehavioralContextProperties::priority() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextProperties.priority)
  return _internal_priority();
}
inline void BehavioralContextProperties::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void BehavioralContextProperties::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContextProperties.priority)
}

// bool is_default = 3;
inline void BehavioralContextProperties::clear_is_default() {
  is_default_ = false;
}
inline bool BehavioralContextProperties::_internal_is_default() const {
  return is_default_;
}
inline bool BehavioralContextProperties::is_default() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextProperties.is_default)
  return _internal_is_default();
}
inline void BehavioralContextProperties::_internal_set_is_default(bool value) {
  
  is_default_ = value;
}
inline void BehavioralContextProperties::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContextProperties.is_default)
}

// -------------------------------------------------------------------

// TellExactTextContextAction

// string exact_text = 1;
inline void TellExactTextContextAction::clear_exact_text() {
  exact_text_.ClearToEmpty();
}
inline const std::string& TellExactTextContextAction::exact_text() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
  return _internal_exact_text();
}
inline void TellExactTextContextAction::set_exact_text(const std::string& value) {
  _internal_set_exact_text(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
}
inline std::string* TellExactTextContextAction::mutable_exact_text() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
  return _internal_mutable_exact_text();
}
inline const std::string& TellExactTextContextAction::_internal_exact_text() const {
  return exact_text_.Get();
}
inline void TellExactTextContextAction::_internal_set_exact_text(const std::string& value) {
  
  exact_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TellExactTextContextAction::set_exact_text(std::string&& value) {
  
  exact_text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
}
inline void TellExactTextContextAction::set_exact_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exact_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
}
inline void TellExactTextContextAction::set_exact_text(const char* value,
    size_t size) {
  
  exact_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
}
inline std::string* TellExactTextContextAction::_internal_mutable_exact_text() {
  
  return exact_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TellExactTextContextAction::release_exact_text() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
  return exact_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TellExactTextContextAction::set_allocated_exact_text(std::string* exact_text) {
  if (exact_text != nullptr) {
    
  } else {
    
  }
  exact_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exact_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.TellExactTextContextAction.exact_text)
}

// -------------------------------------------------------------------

// TellInstructedContextAction

// string speech_instruction = 1;
inline void TellInstructedContextAction::clear_speech_instruction() {
  speech_instruction_.ClearToEmpty();
}
inline const std::string& TellInstructedContextAction::speech_instruction() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
  return _internal_speech_instruction();
}
inline void TellInstructedContextAction::set_speech_instruction(const std::string& value) {
  _internal_set_speech_instruction(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
}
inline std::string* TellInstructedContextAction::mutable_speech_instruction() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
  return _internal_mutable_speech_instruction();
}
inline const std::string& TellInstructedContextAction::_internal_speech_instruction() const {
  return speech_instruction_.Get();
}
inline void TellInstructedContextAction::_internal_set_speech_instruction(const std::string& value) {
  
  speech_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TellInstructedContextAction::set_speech_instruction(std::string&& value) {
  
  speech_instruction_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
}
inline void TellInstructedContextAction::set_speech_instruction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  speech_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
}
inline void TellInstructedContextAction::set_speech_instruction(const char* value,
    size_t size) {
  
  speech_instruction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
}
inline std::string* TellInstructedContextAction::_internal_mutable_speech_instruction() {
  
  return speech_instruction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TellInstructedContextAction::release_speech_instruction() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
  return speech_instruction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TellInstructedContextAction::set_allocated_speech_instruction(std::string* speech_instruction) {
  if (speech_instruction != nullptr) {
    
  } else {
    
  }
  speech_instruction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speech_instruction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.TellInstructedContextAction.speech_instruction)
}

// -------------------------------------------------------------------

// SendCustomEventContextAction

// string custom_event = 1;
inline void SendCustomEventContextAction::clear_custom_event() {
  custom_event_.ClearToEmpty();
}
inline const std::string& SendCustomEventContextAction::custom_event() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
  return _internal_custom_event();
}
inline void SendCustomEventContextAction::set_custom_event(const std::string& value) {
  _internal_set_custom_event(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
}
inline std::string* SendCustomEventContextAction::mutable_custom_event() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
  return _internal_mutable_custom_event();
}
inline const std::string& SendCustomEventContextAction::_internal_custom_event() const {
  return custom_event_.Get();
}
inline void SendCustomEventContextAction::_internal_set_custom_event(const std::string& value) {
  
  custom_event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendCustomEventContextAction::set_custom_event(std::string&& value) {
  
  custom_event_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
}
inline void SendCustomEventContextAction::set_custom_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
}
inline void SendCustomEventContextAction::set_custom_event(const char* value,
    size_t size) {
  
  custom_event_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
}
inline std::string* SendCustomEventContextAction::_internal_mutable_custom_event() {
  
  return custom_event_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendCustomEventContextAction::release_custom_event() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
  return custom_event_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendCustomEventContextAction::set_allocated_custom_event(std::string* custom_event) {
  if (custom_event != nullptr) {
    
  } else {
    
  }
  custom_event_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_event,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SendCustomEventContextAction.custom_event)
}

// -------------------------------------------------------------------

// SetEmotionContextAction

// .ai.inworld.studio.v1alpha.SpaffCode behavior = 1;
inline void SetEmotionContextAction::clear_behavior() {
  behavior_ = 0;
}
inline ::ai::inworld::studio::v1alpha::SpaffCode SetEmotionContextAction::_internal_behavior() const {
  return static_cast< ::ai::inworld::studio::v1alpha::SpaffCode >(behavior_);
}
inline ::ai::inworld::studio::v1alpha::SpaffCode SetEmotionContextAction::behavior() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SetEmotionContextAction.behavior)
  return _internal_behavior();
}
inline void SetEmotionContextAction::_internal_set_behavior(::ai::inworld::studio::v1alpha::SpaffCode value) {
  
  behavior_ = value;
}
inline void SetEmotionContextAction::set_behavior(::ai::inworld::studio::v1alpha::SpaffCode value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SetEmotionContextAction.behavior)
}

// -------------------------------------------------------------------

// BehavioralContextAction

// string uuid = 1;
inline void BehavioralContextAction::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& BehavioralContextAction::uuid() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
  return _internal_uuid();
}
inline void BehavioralContextAction::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
}
inline std::string* BehavioralContextAction::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BehavioralContextAction::_internal_uuid() const {
  return uuid_.Get();
}
inline void BehavioralContextAction::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BehavioralContextAction::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
}
inline void BehavioralContextAction::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
}
inline void BehavioralContextAction::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
}
inline std::string* BehavioralContextAction::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BehavioralContextAction::release_uuid() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BehavioralContextAction::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.BehavioralContextAction.uuid)
}

// .ai.inworld.studio.v1alpha.TellExactTextContextAction tell_exact = 2;
inline bool BehavioralContextAction::_internal_has_tell_exact() const {
  return action_case() == kTellExact;
}
inline bool BehavioralContextAction::has_tell_exact() const {
  return _internal_has_tell_exact();
}
inline void BehavioralContextAction::set_has_tell_exact() {
  _oneof_case_[0] = kTellExact;
}
inline void BehavioralContextAction::clear_tell_exact() {
  if (_internal_has_tell_exact()) {
    if (GetArena() == nullptr) {
      delete action_.tell_exact_;
    }
    clear_has_action();
  }
}
inline ::ai::inworld::studio::v1alpha::TellExactTextContextAction* BehavioralContextAction::release_tell_exact() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_exact)
  if (_internal_has_tell_exact()) {
    clear_has_action();
      ::ai::inworld::studio::v1alpha::TellExactTextContextAction* temp = action_.tell_exact_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.tell_exact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::studio::v1alpha::TellExactTextContextAction& BehavioralContextAction::_internal_tell_exact() const {
  return _internal_has_tell_exact()
      ? *action_.tell_exact_
      : reinterpret_cast< ::ai::inworld::studio::v1alpha::TellExactTextContextAction&>(::ai::inworld::studio::v1alpha::_TellExactTextContextAction_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::TellExactTextContextAction& BehavioralContextAction::tell_exact() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_exact)
  return _internal_tell_exact();
}
inline ::ai::inworld::studio::v1alpha::TellExactTextContextAction* BehavioralContextAction::unsafe_arena_release_tell_exact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_exact)
  if (_internal_has_tell_exact()) {
    clear_has_action();
    ::ai::inworld::studio::v1alpha::TellExactTextContextAction* temp = action_.tell_exact_;
    action_.tell_exact_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BehavioralContextAction::unsafe_arena_set_allocated_tell_exact(::ai::inworld::studio::v1alpha::TellExactTextContextAction* tell_exact) {
  clear_action();
  if (tell_exact) {
    set_has_tell_exact();
    action_.tell_exact_ = tell_exact;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_exact)
}
inline ::ai::inworld::studio::v1alpha::TellExactTextContextAction* BehavioralContextAction::_internal_mutable_tell_exact() {
  if (!_internal_has_tell_exact()) {
    clear_action();
    set_has_tell_exact();
    action_.tell_exact_ = CreateMaybeMessage< ::ai::inworld::studio::v1alpha::TellExactTextContextAction >(GetArena());
  }
  return action_.tell_exact_;
}
inline ::ai::inworld::studio::v1alpha::TellExactTextContextAction* BehavioralContextAction::mutable_tell_exact() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_exact)
  return _internal_mutable_tell_exact();
}

// .ai.inworld.studio.v1alpha.TellInstructedContextAction tell_instructed = 3;
inline bool BehavioralContextAction::_internal_has_tell_instructed() const {
  return action_case() == kTellInstructed;
}
inline bool BehavioralContextAction::has_tell_instructed() const {
  return _internal_has_tell_instructed();
}
inline void BehavioralContextAction::set_has_tell_instructed() {
  _oneof_case_[0] = kTellInstructed;
}
inline void BehavioralContextAction::clear_tell_instructed() {
  if (_internal_has_tell_instructed()) {
    if (GetArena() == nullptr) {
      delete action_.tell_instructed_;
    }
    clear_has_action();
  }
}
inline ::ai::inworld::studio::v1alpha::TellInstructedContextAction* BehavioralContextAction::release_tell_instructed() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_instructed)
  if (_internal_has_tell_instructed()) {
    clear_has_action();
      ::ai::inworld::studio::v1alpha::TellInstructedContextAction* temp = action_.tell_instructed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.tell_instructed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::studio::v1alpha::TellInstructedContextAction& BehavioralContextAction::_internal_tell_instructed() const {
  return _internal_has_tell_instructed()
      ? *action_.tell_instructed_
      : reinterpret_cast< ::ai::inworld::studio::v1alpha::TellInstructedContextAction&>(::ai::inworld::studio::v1alpha::_TellInstructedContextAction_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::TellInstructedContextAction& BehavioralContextAction::tell_instructed() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_instructed)
  return _internal_tell_instructed();
}
inline ::ai::inworld::studio::v1alpha::TellInstructedContextAction* BehavioralContextAction::unsafe_arena_release_tell_instructed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_instructed)
  if (_internal_has_tell_instructed()) {
    clear_has_action();
    ::ai::inworld::studio::v1alpha::TellInstructedContextAction* temp = action_.tell_instructed_;
    action_.tell_instructed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BehavioralContextAction::unsafe_arena_set_allocated_tell_instructed(::ai::inworld::studio::v1alpha::TellInstructedContextAction* tell_instructed) {
  clear_action();
  if (tell_instructed) {
    set_has_tell_instructed();
    action_.tell_instructed_ = tell_instructed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_instructed)
}
inline ::ai::inworld::studio::v1alpha::TellInstructedContextAction* BehavioralContextAction::_internal_mutable_tell_instructed() {
  if (!_internal_has_tell_instructed()) {
    clear_action();
    set_has_tell_instructed();
    action_.tell_instructed_ = CreateMaybeMessage< ::ai::inworld::studio::v1alpha::TellInstructedContextAction >(GetArena());
  }
  return action_.tell_instructed_;
}
inline ::ai::inworld::studio::v1alpha::TellInstructedContextAction* BehavioralContextAction::mutable_tell_instructed() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextAction.tell_instructed)
  return _internal_mutable_tell_instructed();
}

// .ai.inworld.studio.v1alpha.SendCustomEventContextAction send_custom_event = 4;
inline bool BehavioralContextAction::_internal_has_send_custom_event() const {
  return action_case() == kSendCustomEvent;
}
inline bool BehavioralContextAction::has_send_custom_event() const {
  return _internal_has_send_custom_event();
}
inline void BehavioralContextAction::set_has_send_custom_event() {
  _oneof_case_[0] = kSendCustomEvent;
}
inline void BehavioralContextAction::clear_send_custom_event() {
  if (_internal_has_send_custom_event()) {
    if (GetArena() == nullptr) {
      delete action_.send_custom_event_;
    }
    clear_has_action();
  }
}
inline ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* BehavioralContextAction::release_send_custom_event() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContextAction.send_custom_event)
  if (_internal_has_send_custom_event()) {
    clear_has_action();
      ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* temp = action_.send_custom_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.send_custom_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::studio::v1alpha::SendCustomEventContextAction& BehavioralContextAction::_internal_send_custom_event() const {
  return _internal_has_send_custom_event()
      ? *action_.send_custom_event_
      : reinterpret_cast< ::ai::inworld::studio::v1alpha::SendCustomEventContextAction&>(::ai::inworld::studio::v1alpha::_SendCustomEventContextAction_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::SendCustomEventContextAction& BehavioralContextAction::send_custom_event() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextAction.send_custom_event)
  return _internal_send_custom_event();
}
inline ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* BehavioralContextAction::unsafe_arena_release_send_custom_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.studio.v1alpha.BehavioralContextAction.send_custom_event)
  if (_internal_has_send_custom_event()) {
    clear_has_action();
    ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* temp = action_.send_custom_event_;
    action_.send_custom_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BehavioralContextAction::unsafe_arena_set_allocated_send_custom_event(::ai::inworld::studio::v1alpha::SendCustomEventContextAction* send_custom_event) {
  clear_action();
  if (send_custom_event) {
    set_has_send_custom_event();
    action_.send_custom_event_ = send_custom_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.BehavioralContextAction.send_custom_event)
}
inline ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* BehavioralContextAction::_internal_mutable_send_custom_event() {
  if (!_internal_has_send_custom_event()) {
    clear_action();
    set_has_send_custom_event();
    action_.send_custom_event_ = CreateMaybeMessage< ::ai::inworld::studio::v1alpha::SendCustomEventContextAction >(GetArena());
  }
  return action_.send_custom_event_;
}
inline ::ai::inworld::studio::v1alpha::SendCustomEventContextAction* BehavioralContextAction::mutable_send_custom_event() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextAction.send_custom_event)
  return _internal_mutable_send_custom_event();
}

// .ai.inworld.studio.v1alpha.SetEmotionContextAction set_emotion = 5;
inline bool BehavioralContextAction::_internal_has_set_emotion() const {
  return action_case() == kSetEmotion;
}
inline bool BehavioralContextAction::has_set_emotion() const {
  return _internal_has_set_emotion();
}
inline void BehavioralContextAction::set_has_set_emotion() {
  _oneof_case_[0] = kSetEmotion;
}
inline void BehavioralContextAction::clear_set_emotion() {
  if (_internal_has_set_emotion()) {
    if (GetArena() == nullptr) {
      delete action_.set_emotion_;
    }
    clear_has_action();
  }
}
inline ::ai::inworld::studio::v1alpha::SetEmotionContextAction* BehavioralContextAction::release_set_emotion() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContextAction.set_emotion)
  if (_internal_has_set_emotion()) {
    clear_has_action();
      ::ai::inworld::studio::v1alpha::SetEmotionContextAction* temp = action_.set_emotion_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_.set_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ai::inworld::studio::v1alpha::SetEmotionContextAction& BehavioralContextAction::_internal_set_emotion() const {
  return _internal_has_set_emotion()
      ? *action_.set_emotion_
      : reinterpret_cast< ::ai::inworld::studio::v1alpha::SetEmotionContextAction&>(::ai::inworld::studio::v1alpha::_SetEmotionContextAction_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::SetEmotionContextAction& BehavioralContextAction::set_emotion() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextAction.set_emotion)
  return _internal_set_emotion();
}
inline ::ai::inworld::studio::v1alpha::SetEmotionContextAction* BehavioralContextAction::unsafe_arena_release_set_emotion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ai.inworld.studio.v1alpha.BehavioralContextAction.set_emotion)
  if (_internal_has_set_emotion()) {
    clear_has_action();
    ::ai::inworld::studio::v1alpha::SetEmotionContextAction* temp = action_.set_emotion_;
    action_.set_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BehavioralContextAction::unsafe_arena_set_allocated_set_emotion(::ai::inworld::studio::v1alpha::SetEmotionContextAction* set_emotion) {
  clear_action();
  if (set_emotion) {
    set_has_set_emotion();
    action_.set_emotion_ = set_emotion;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.BehavioralContextAction.set_emotion)
}
inline ::ai::inworld::studio::v1alpha::SetEmotionContextAction* BehavioralContextAction::_internal_mutable_set_emotion() {
  if (!_internal_has_set_emotion()) {
    clear_action();
    set_has_set_emotion();
    action_.set_emotion_ = CreateMaybeMessage< ::ai::inworld::studio::v1alpha::SetEmotionContextAction >(GetArena());
  }
  return action_.set_emotion_;
}
inline ::ai::inworld::studio::v1alpha::SetEmotionContextAction* BehavioralContextAction::mutable_set_emotion() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextAction.set_emotion)
  return _internal_mutable_set_emotion();
}

inline bool BehavioralContextAction::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void BehavioralContextAction::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline BehavioralContextAction::ActionCase BehavioralContextAction::action_case() const {
  return BehavioralContextAction::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BehavioralContextInteraction

// .ai.inworld.studio.v1alpha.BehavioralContextInteractionType interaction_type = 1;
inline void BehavioralContextInteraction::clear_interaction_type() {
  interaction_type_ = 0;
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType BehavioralContextInteraction::_internal_interaction_type() const {
  return static_cast< ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType >(interaction_type_);
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType BehavioralContextInteraction::interaction_type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextInteraction.interaction_type)
  return _internal_interaction_type();
}
inline void BehavioralContextInteraction::_internal_set_interaction_type(::ai::inworld::studio::v1alpha::BehavioralContextInteractionType value) {
  
  interaction_type_ = value;
}
inline void BehavioralContextInteraction::set_interaction_type(::ai::inworld::studio::v1alpha::BehavioralContextInteractionType value) {
  _internal_set_interaction_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContextInteraction.interaction_type)
}

// repeated .ai.inworld.studio.v1alpha.BehavioralContextAction actions = 2;
inline int BehavioralContextInteraction::_internal_actions_size() const {
  return actions_.size();
}
inline int BehavioralContextInteraction::actions_size() const {
  return _internal_actions_size();
}
inline void BehavioralContextInteraction::clear_actions() {
  actions_.Clear();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextAction* BehavioralContextInteraction::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextInteraction.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextAction >*
BehavioralContextInteraction::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.BehavioralContextInteraction.actions)
  return &actions_;
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContextAction& BehavioralContextInteraction::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContextAction& BehavioralContextInteraction::actions(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextInteraction.actions)
  return _internal_actions(index);
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextAction* BehavioralContextInteraction::_internal_add_actions() {
  return actions_.Add();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextAction* BehavioralContextInteraction::add_actions() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.BehavioralContextInteraction.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextAction >&
BehavioralContextInteraction::actions() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.BehavioralContextInteraction.actions)
  return actions_;
}

// string uuid = 3;
inline void BehavioralContextInteraction::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& BehavioralContextInteraction::uuid() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
  return _internal_uuid();
}
inline void BehavioralContextInteraction::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
}
inline std::string* BehavioralContextInteraction::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& BehavioralContextInteraction::_internal_uuid() const {
  return uuid_.Get();
}
inline void BehavioralContextInteraction::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BehavioralContextInteraction::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
}
inline void BehavioralContextInteraction::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
}
inline void BehavioralContextInteraction::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
}
inline std::string* BehavioralContextInteraction::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BehavioralContextInteraction::release_uuid() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BehavioralContextInteraction::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.BehavioralContextInteraction.uuid)
}

// -------------------------------------------------------------------

// BehavioralContext

// string name = 1;
inline void BehavioralContext::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BehavioralContext::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContext.name)
  return _internal_name();
}
inline void BehavioralContext::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContext.name)
}
inline std::string* BehavioralContext::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContext.name)
  return _internal_mutable_name();
}
inline const std::string& BehavioralContext::_internal_name() const {
  return name_.Get();
}
inline void BehavioralContext::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BehavioralContext::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.BehavioralContext.name)
}
inline void BehavioralContext::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.BehavioralContext.name)
}
inline void BehavioralContext::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.BehavioralContext.name)
}
inline std::string* BehavioralContext::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BehavioralContext::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContext.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BehavioralContext::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.BehavioralContext.name)
}

// string motivation = 2;
inline void BehavioralContext::clear_motivation() {
  motivation_.ClearToEmpty();
}
inline const std::string& BehavioralContext::motivation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
  return _internal_motivation();
}
inline void BehavioralContext::set_motivation(const std::string& value) {
  _internal_set_motivation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
}
inline std::string* BehavioralContext::mutable_motivation() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
  return _internal_mutable_motivation();
}
inline const std::string& BehavioralContext::_internal_motivation() const {
  return motivation_.Get();
}
inline void BehavioralContext::_internal_set_motivation(const std::string& value) {
  
  motivation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BehavioralContext::set_motivation(std::string&& value) {
  
  motivation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
}
inline void BehavioralContext::set_motivation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  motivation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
}
inline void BehavioralContext::set_motivation(const char* value,
    size_t size) {
  
  motivation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
}
inline std::string* BehavioralContext::_internal_mutable_motivation() {
  
  return motivation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BehavioralContext::release_motivation() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
  return motivation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BehavioralContext::set_allocated_motivation(std::string* motivation) {
  if (motivation != nullptr) {
    
  } else {
    
  }
  motivation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), motivation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.BehavioralContext.motivation)
}

// .ai.inworld.studio.v1alpha.BehavioralContextProperties properties = 3;
inline bool BehavioralContext::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool BehavioralContext::has_properties() const {
  return _internal_has_properties();
}
inline void BehavioralContext::clear_properties() {
  if (GetArena() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContextProperties& BehavioralContext::_internal_properties() const {
  const ::ai::inworld::studio::v1alpha::BehavioralContextProperties* p = properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::BehavioralContextProperties&>(
      ::ai::inworld::studio::v1alpha::_BehavioralContextProperties_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContextProperties& BehavioralContext::properties() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContext.properties)
  return _internal_properties();
}
inline void BehavioralContext::unsafe_arena_set_allocated_properties(
    ::ai::inworld::studio::v1alpha::BehavioralContextProperties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.BehavioralContext.properties)
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextProperties* BehavioralContext::release_properties() {
  
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* temp = properties_;
  properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextProperties* BehavioralContext::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.BehavioralContext.properties)
  
  ::ai::inworld::studio::v1alpha::BehavioralContextProperties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextProperties* BehavioralContext::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::BehavioralContextProperties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextProperties* BehavioralContext::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContext.properties)
  return _internal_mutable_properties();
}
inline void BehavioralContext::set_allocated_properties(::ai::inworld::studio::v1alpha::BehavioralContextProperties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete properties_;
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(properties);
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.BehavioralContext.properties)
}

// repeated string triggers = 4 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline int BehavioralContext::_internal_triggers_size() const {
  return triggers_.size();
}
inline int BehavioralContext::triggers_size() const {
  return _internal_triggers_size();
}
inline void BehavioralContext::clear_triggers() {
  triggers_.Clear();
}
inline std::string* BehavioralContext::add_triggers() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  return _internal_add_triggers();
}
inline const std::string& BehavioralContext::_internal_triggers(int index) const {
  return triggers_.Get(index);
}
inline const std::string& BehavioralContext::triggers(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  return _internal_triggers(index);
}
inline std::string* BehavioralContext::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  return triggers_.Mutable(index);
}
inline void BehavioralContext::set_triggers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  triggers_.Mutable(index)->assign(value);
}
inline void BehavioralContext::set_triggers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  triggers_.Mutable(index)->assign(std::move(value));
}
inline void BehavioralContext::set_triggers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  triggers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
}
inline void BehavioralContext::set_triggers(int index, const char* value, size_t size) {
  triggers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
}
inline std::string* BehavioralContext::_internal_add_triggers() {
  return triggers_.Add();
}
inline void BehavioralContext::add_triggers(const std::string& value) {
  triggers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
}
inline void BehavioralContext::add_triggers(std::string&& value) {
  triggers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
}
inline void BehavioralContext::add_triggers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  triggers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
}
inline void BehavioralContext::add_triggers(const char* value, size_t size) {
  triggers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BehavioralContext::triggers() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  return triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BehavioralContext::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.BehavioralContext.triggers)
  return &triggers_;
}

// repeated .ai.inworld.studio.v1alpha.BehavioralContextInteraction behavioral_context_interaction = 5;
inline int BehavioralContext::_internal_behavioral_context_interaction_size() const {
  return behavioral_context_interaction_.size();
}
inline int BehavioralContext::behavioral_context_interaction_size() const {
  return _internal_behavioral_context_interaction_size();
}
inline void BehavioralContext::clear_behavioral_context_interaction() {
  behavioral_context_interaction_.Clear();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* BehavioralContext::mutable_behavioral_context_interaction(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.BehavioralContext.behavioral_context_interaction)
  return behavioral_context_interaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextInteraction >*
BehavioralContext::mutable_behavioral_context_interaction() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.BehavioralContext.behavioral_context_interaction)
  return &behavioral_context_interaction_;
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContextInteraction& BehavioralContext::_internal_behavioral_context_interaction(int index) const {
  return behavioral_context_interaction_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContextInteraction& BehavioralContext::behavioral_context_interaction(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.BehavioralContext.behavioral_context_interaction)
  return _internal_behavioral_context_interaction(index);
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* BehavioralContext::_internal_add_behavioral_context_interaction() {
  return behavioral_context_interaction_.Add();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContextInteraction* BehavioralContext::add_behavioral_context_interaction() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.BehavioralContext.behavioral_context_interaction)
  return _internal_add_behavioral_context_interaction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContextInteraction >&
BehavioralContext::behavioral_context_interaction() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.BehavioralContext.behavioral_context_interaction)
  return behavioral_context_interaction_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType>() {
  return ::ai::inworld::studio::v1alpha::BehavioralContextInteractionType_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::SpaffCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::SpaffCode>() {
  return ::ai::inworld::studio::v1alpha::SpaffCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_behavioral_5fcontexts_2eproto
