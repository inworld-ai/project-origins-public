// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: characters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_characters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_characters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/struct.pb.h>
#include "options.pb.h"
#include "ai/inworld/studio/v1alpha/behavioral_contexts.pb.h"
#include "ai/inworld/studio/v1alpha/errors.pb.h"
#include "ai/inworld/studio/v1alpha/scenes.pb.h"
#include "voices.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_characters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_characters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_characters_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class Character;
class CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class CharacterAdvancedSettings;
class CharacterAdvancedSettingsDefaultTypeInternal;
extern CharacterAdvancedSettingsDefaultTypeInternal _CharacterAdvancedSettings_default_instance_;
class CharacterAdvancedSettings_ConversationConfig;
class CharacterAdvancedSettings_ConversationConfigDefaultTypeInternal;
extern CharacterAdvancedSettings_ConversationConfigDefaultTypeInternal _CharacterAdvancedSettings_ConversationConfig_default_instance_;
class CharacterAdvancedSettings_ConversationConfig_EngineSpec;
class CharacterAdvancedSettings_ConversationConfig_EngineSpecDefaultTypeInternal;
extern CharacterAdvancedSettings_ConversationConfig_EngineSpecDefaultTypeInternal _CharacterAdvancedSettings_ConversationConfig_EngineSpec_default_instance_;
class CharacterAdvancedSettings_SafetySpec;
class CharacterAdvancedSettings_SafetySpecDefaultTypeInternal;
extern CharacterAdvancedSettings_SafetySpecDefaultTypeInternal _CharacterAdvancedSettings_SafetySpec_default_instance_;
class CharacterShareInfo;
class CharacterShareInfoDefaultTypeInternal;
extern CharacterShareInfoDefaultTypeInternal _CharacterShareInfo_default_instance_;
class Character_BrainSettings;
class Character_BrainSettingsDefaultTypeInternal;
extern Character_BrainSettingsDefaultTypeInternal _Character_BrainSettings_default_instance_;
class Character_BrainSettings_ConversationConfig;
class Character_BrainSettings_ConversationConfigDefaultTypeInternal;
extern Character_BrainSettings_ConversationConfigDefaultTypeInternal _Character_BrainSettings_ConversationConfig_default_instance_;
class Character_BrainSettings_ConversationConfig_FillerSpec;
class Character_BrainSettings_ConversationConfig_FillerSpecDefaultTypeInternal;
extern Character_BrainSettings_ConversationConfig_FillerSpecDefaultTypeInternal _Character_BrainSettings_ConversationConfig_FillerSpec_default_instance_;
class Character_BrainTrigger;
class Character_BrainTriggerDefaultTypeInternal;
extern Character_BrainTriggerDefaultTypeInternal _Character_BrainTrigger_default_instance_;
class Character_CharacterAssets;
class Character_CharacterAssetsDefaultTypeInternal;
extern Character_CharacterAssetsDefaultTypeInternal _Character_CharacterAssets_default_instance_;
class Character_CharacterDescription;
class Character_CharacterDescriptionDefaultTypeInternal;
extern Character_CharacterDescriptionDefaultTypeInternal _Character_CharacterDescription_default_instance_;
class Character_CharacterInitialMood;
class Character_CharacterInitialMoodDefaultTypeInternal;
extern Character_CharacterInitialMoodDefaultTypeInternal _Character_CharacterInitialMood_default_instance_;
class Character_CharacterPersonality;
class Character_CharacterPersonalityDefaultTypeInternal;
extern Character_CharacterPersonalityDefaultTypeInternal _Character_CharacterPersonality_default_instance_;
class Character_Fact;
class Character_FactDefaultTypeInternal;
extern Character_FactDefaultTypeInternal _Character_Fact_default_instance_;
class Character_Meta;
class Character_MetaDefaultTypeInternal;
extern Character_MetaDefaultTypeInternal _Character_Meta_default_instance_;
class CheckDeployInfoRequest;
class CheckDeployInfoRequestDefaultTypeInternal;
extern CheckDeployInfoRequestDefaultTypeInternal _CheckDeployInfoRequest_default_instance_;
class CheckDeployInfoResponse;
class CheckDeployInfoResponseDefaultTypeInternal;
extern CheckDeployInfoResponseDefaultTypeInternal _CheckDeployInfoResponse_default_instance_;
class CreateCharacterRequest;
class CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class DeleteCharacterRequest;
class DeleteCharacterRequestDefaultTypeInternal;
extern DeleteCharacterRequestDefaultTypeInternal _DeleteCharacterRequest_default_instance_;
class DeployCharacterRequest;
class DeployCharacterRequestDefaultTypeInternal;
extern DeployCharacterRequestDefaultTypeInternal _DeployCharacterRequest_default_instance_;
class GetCharacterAdvancedSettingsRequest;
class GetCharacterAdvancedSettingsRequestDefaultTypeInternal;
extern GetCharacterAdvancedSettingsRequestDefaultTypeInternal _GetCharacterAdvancedSettingsRequest_default_instance_;
class GetCharacterRequest;
class GetCharacterRequestDefaultTypeInternal;
extern GetCharacterRequestDefaultTypeInternal _GetCharacterRequest_default_instance_;
class GetCharacterShareInfoRequest;
class GetCharacterShareInfoRequestDefaultTypeInternal;
extern GetCharacterShareInfoRequestDefaultTypeInternal _GetCharacterShareInfoRequest_default_instance_;
class ListCharactersRequest;
class ListCharactersRequestDefaultTypeInternal;
extern ListCharactersRequestDefaultTypeInternal _ListCharactersRequest_default_instance_;
class ListCharactersResponse;
class ListCharactersResponseDefaultTypeInternal;
extern ListCharactersResponseDefaultTypeInternal _ListCharactersResponse_default_instance_;
class ListSharedCharactersRequest;
class ListSharedCharactersRequestDefaultTypeInternal;
extern ListSharedCharactersRequestDefaultTypeInternal _ListSharedCharactersRequest_default_instance_;
class ListSharedCharactersResponse;
class ListSharedCharactersResponseDefaultTypeInternal;
extern ListSharedCharactersResponseDefaultTypeInternal _ListSharedCharactersResponse_default_instance_;
class PreviewPromptTempalteResponse;
class PreviewPromptTempalteResponseDefaultTypeInternal;
extern PreviewPromptTempalteResponseDefaultTypeInternal _PreviewPromptTempalteResponse_default_instance_;
class PreviewPromptTemplateRequest;
class PreviewPromptTemplateRequestDefaultTypeInternal;
extern PreviewPromptTemplateRequestDefaultTypeInternal _PreviewPromptTemplateRequest_default_instance_;
class ReplaceCharacterRpmModelRequest;
class ReplaceCharacterRpmModelRequestDefaultTypeInternal;
extern ReplaceCharacterRpmModelRequestDefaultTypeInternal _ReplaceCharacterRpmModelRequest_default_instance_;
class ShareCharacterRequest;
class ShareCharacterRequestDefaultTypeInternal;
extern ShareCharacterRequestDefaultTypeInternal _ShareCharacterRequest_default_instance_;
class UpdateCharacterAdvancedSettingsRequest;
class UpdateCharacterAdvancedSettingsRequestDefaultTypeInternal;
extern UpdateCharacterAdvancedSettingsRequestDefaultTypeInternal _UpdateCharacterAdvancedSettingsRequest_default_instance_;
class UpdateCharacterRequest;
class UpdateCharacterRequestDefaultTypeInternal;
extern UpdateCharacterRequestDefaultTypeInternal _UpdateCharacterRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::Character* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CharacterShareInfo* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterShareInfo>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_BrainSettings* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainSettings>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_BrainTrigger* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainTrigger>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterAssets>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterDescription>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterPersonality>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_Fact* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_Fact>(Arena*);
template<> ::ai::inworld::studio::v1alpha::Character_Meta* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_Meta>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CheckDeployInfoRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CheckDeployInfoRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CheckDeployInfoResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CheckDeployInfoResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::CreateCharacterRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::CreateCharacterRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeleteCharacterRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeleteCharacterRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeployCharacterRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeployCharacterRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetCharacterAdvancedSettingsRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetCharacterAdvancedSettingsRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetCharacterRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetCharacterRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetCharacterShareInfoRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetCharacterShareInfoRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListCharactersRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListCharactersRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListCharactersResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListCharactersResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListSharedCharactersRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListSharedCharactersRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListSharedCharactersResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListSharedCharactersResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::PreviewPromptTempalteResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::PreviewPromptTempalteResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::PreviewPromptTemplateRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::PreviewPromptTemplateRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ReplaceCharacterRpmModelRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ReplaceCharacterRpmModelRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ShareCharacterRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ShareCharacterRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdateCharacterAdvancedSettingsRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdateCharacterAdvancedSettingsRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdateCharacterRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdateCharacterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

enum Character_CharacterDescription_Pronoun : int {
  Character_CharacterDescription_Pronoun_PRONOUN_UNSPECIFIED = 0,
  Character_CharacterDescription_Pronoun_PRONOUN_FEMALE = 1,
  Character_CharacterDescription_Pronoun_PRONOUN_MALE = 2,
  Character_CharacterDescription_Pronoun_PRONOUN_OTHER = 3,
  Character_CharacterDescription_Pronoun_Character_CharacterDescription_Pronoun_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Character_CharacterDescription_Pronoun_Character_CharacterDescription_Pronoun_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Character_CharacterDescription_Pronoun_IsValid(int value);
constexpr Character_CharacterDescription_Pronoun Character_CharacterDescription_Pronoun_Pronoun_MIN = Character_CharacterDescription_Pronoun_PRONOUN_UNSPECIFIED;
constexpr Character_CharacterDescription_Pronoun Character_CharacterDescription_Pronoun_Pronoun_MAX = Character_CharacterDescription_Pronoun_PRONOUN_OTHER;
constexpr int Character_CharacterDescription_Pronoun_Pronoun_ARRAYSIZE = Character_CharacterDescription_Pronoun_Pronoun_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Character_CharacterDescription_Pronoun_descriptor();
template<typename T>
inline const std::string& Character_CharacterDescription_Pronoun_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Character_CharacterDescription_Pronoun>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Character_CharacterDescription_Pronoun_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Character_CharacterDescription_Pronoun_descriptor(), enum_t_value);
}
inline bool Character_CharacterDescription_Pronoun_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Character_CharacterDescription_Pronoun* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Character_CharacterDescription_Pronoun>(
    Character_CharacterDescription_Pronoun_descriptor(), name, value);
}
enum Character_CharacterDescription_ExampleDialogStyle : int {
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_UNSPECIFIED = 0,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_DEFAULT = 1,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BUBBLY = 2,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_FORMAL = 3,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BLUNT = 4,
  Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_INQUISITIVE = 5,
  Character_CharacterDescription_ExampleDialogStyle_Character_CharacterDescription_ExampleDialogStyle_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Character_CharacterDescription_ExampleDialogStyle_Character_CharacterDescription_ExampleDialogStyle_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Character_CharacterDescription_ExampleDialogStyle_IsValid(int value);
constexpr Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MIN = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_UNSPECIFIED;
constexpr Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MAX = Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_INQUISITIVE;
constexpr int Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_ARRAYSIZE = Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Character_CharacterDescription_ExampleDialogStyle_descriptor();
template<typename T>
inline const std::string& Character_CharacterDescription_ExampleDialogStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Character_CharacterDescription_ExampleDialogStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Character_CharacterDescription_ExampleDialogStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Character_CharacterDescription_ExampleDialogStyle_descriptor(), enum_t_value);
}
inline bool Character_CharacterDescription_ExampleDialogStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Character_CharacterDescription_ExampleDialogStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Character_CharacterDescription_ExampleDialogStyle>(
    Character_CharacterDescription_ExampleDialogStyle_descriptor(), name, value);
}
enum Character_CharacterDescription_LifeStage : int {
  Character_CharacterDescription_LifeStage_LIFE_STAGE_UNSPECIFIED = 0,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_INFANCY = 1,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_TODDLERHOOD = 2,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_PRESCHOOL = 3,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_EARLY_SCHOOL = 4,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_ADOLESCENCE = 5,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_YOUNG_ADULTHOOD = 6,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_MIDDLE_ADULTHOOD = 7,
  Character_CharacterDescription_LifeStage_LIFE_STAGE_LATE_ADULTHOOD = 8,
  Character_CharacterDescription_LifeStage_Character_CharacterDescription_LifeStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Character_CharacterDescription_LifeStage_Character_CharacterDescription_LifeStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Character_CharacterDescription_LifeStage_IsValid(int value);
constexpr Character_CharacterDescription_LifeStage Character_CharacterDescription_LifeStage_LifeStage_MIN = Character_CharacterDescription_LifeStage_LIFE_STAGE_UNSPECIFIED;
constexpr Character_CharacterDescription_LifeStage Character_CharacterDescription_LifeStage_LifeStage_MAX = Character_CharacterDescription_LifeStage_LIFE_STAGE_LATE_ADULTHOOD;
constexpr int Character_CharacterDescription_LifeStage_LifeStage_ARRAYSIZE = Character_CharacterDescription_LifeStage_LifeStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Character_CharacterDescription_LifeStage_descriptor();
template<typename T>
inline const std::string& Character_CharacterDescription_LifeStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Character_CharacterDescription_LifeStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Character_CharacterDescription_LifeStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Character_CharacterDescription_LifeStage_descriptor(), enum_t_value);
}
inline bool Character_CharacterDescription_LifeStage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Character_CharacterDescription_LifeStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Character_CharacterDescription_LifeStage>(
    Character_CharacterDescription_LifeStage_descriptor(), name, value);
}
enum Character_Tag : int {
  Character_Tag_TAG_UNSPECIFIED = 0,
  Character_Tag_TAG_MEMORY = 1,
  Character_Tag_TAG_APPEARANCE = 2,
  Character_Tag_Character_Tag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Character_Tag_Character_Tag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Character_Tag_IsValid(int value);
constexpr Character_Tag Character_Tag_Tag_MIN = Character_Tag_TAG_UNSPECIFIED;
constexpr Character_Tag Character_Tag_Tag_MAX = Character_Tag_TAG_APPEARANCE;
constexpr int Character_Tag_Tag_ARRAYSIZE = Character_Tag_Tag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Character_Tag_descriptor();
template<typename T>
inline const std::string& Character_Tag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Character_Tag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Character_Tag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Character_Tag_descriptor(), enum_t_value);
}
inline bool Character_Tag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Character_Tag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Character_Tag>(
    Character_Tag_descriptor(), name, value);
}
enum CharacterAdvancedSettings_SafetyTopicName : int {
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_UNSPECIFIED = 0,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SAFE_TOPIC = 1,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_POLITICS = 2,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_FINANCES = 3,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_DISGUSTING_STUFF = 4,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_GENDER_BIAS = 5,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SUBSTANCE_USE = 6,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_HEALTH_ADVICE = 7,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELIGION = 8,
  CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELATIONSHIPS = 9,
  CharacterAdvancedSettings_SafetyTopicName_CharacterAdvancedSettings_SafetyTopicName_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CharacterAdvancedSettings_SafetyTopicName_CharacterAdvancedSettings_SafetyTopicName_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CharacterAdvancedSettings_SafetyTopicName_IsValid(int value);
constexpr CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MIN = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_UNSPECIFIED;
constexpr CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MAX = CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELATIONSHIPS;
constexpr int CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_ARRAYSIZE = CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterAdvancedSettings_SafetyTopicName_descriptor();
template<typename T>
inline const std::string& CharacterAdvancedSettings_SafetyTopicName_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterAdvancedSettings_SafetyTopicName>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterAdvancedSettings_SafetyTopicName_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterAdvancedSettings_SafetyTopicName_descriptor(), enum_t_value);
}
inline bool CharacterAdvancedSettings_SafetyTopicName_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterAdvancedSettings_SafetyTopicName* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterAdvancedSettings_SafetyTopicName>(
    CharacterAdvancedSettings_SafetyTopicName_descriptor(), name, value);
}
enum CharacterView : int {
  CHARACTER_VIEW_UNSPECIFIED = 0,
  CHARACTER_VIEW_DEFAULT = 1,
  CHARACTER_VIEW_WITH_SCENES = 2,
  CharacterView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CharacterView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CharacterView_IsValid(int value);
constexpr CharacterView CharacterView_MIN = CHARACTER_VIEW_UNSPECIFIED;
constexpr CharacterView CharacterView_MAX = CHARACTER_VIEW_WITH_SCENES;
constexpr int CharacterView_ARRAYSIZE = CharacterView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterView_descriptor();
template<typename T>
inline const std::string& CharacterView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterView_descriptor(), enum_t_value);
}
inline bool CharacterView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterView>(
    CharacterView_descriptor(), name, value);
}
enum CharacterItemView : int {
  CHARACTER_ITEM_VIEW_UNSPECIFIED = 0,
  CHARACTER_ITEM_VIEW_DEFAULT = 1,
  CHARACTER_ITEM_VIEW_WITH_META = 2,
  CharacterItemView_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CharacterItemView_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CharacterItemView_IsValid(int value);
constexpr CharacterItemView CharacterItemView_MIN = CHARACTER_ITEM_VIEW_UNSPECIFIED;
constexpr CharacterItemView CharacterItemView_MAX = CHARACTER_ITEM_VIEW_WITH_META;
constexpr int CharacterItemView_ARRAYSIZE = CharacterItemView_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CharacterItemView_descriptor();
template<typename T>
inline const std::string& CharacterItemView_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CharacterItemView>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CharacterItemView_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CharacterItemView_descriptor(), enum_t_value);
}
inline bool CharacterItemView_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CharacterItemView* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CharacterItemView>(
    CharacterItemView_descriptor(), name, value);
}
// ===================================================================

class Character_CharacterDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterDescription) */ {
 public:
  inline Character_CharacterDescription() : Character_CharacterDescription(nullptr) {}
  virtual ~Character_CharacterDescription();

  Character_CharacterDescription(const Character_CharacterDescription& from);
  Character_CharacterDescription(Character_CharacterDescription&& from) noexcept
    : Character_CharacterDescription() {
    *this = ::std::move(from);
  }

  inline Character_CharacterDescription& operator=(const Character_CharacterDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterDescription& operator=(Character_CharacterDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_CharacterDescription& default_instance();

  static inline const Character_CharacterDescription* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterDescription*>(
               &_Character_CharacterDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Character_CharacterDescription& a, Character_CharacterDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_CharacterDescription* New() const final {
    return CreateMaybeMessage<Character_CharacterDescription>(nullptr);
  }

  Character_CharacterDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_CharacterDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_CharacterDescription& from);
  void MergeFrom(const Character_CharacterDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_CharacterDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterDescription";
  }
  protected:
  explicit Character_CharacterDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Character_CharacterDescription_Pronoun Pronoun;
  static constexpr Pronoun PRONOUN_UNSPECIFIED =
    Character_CharacterDescription_Pronoun_PRONOUN_UNSPECIFIED;
  static constexpr Pronoun PRONOUN_FEMALE =
    Character_CharacterDescription_Pronoun_PRONOUN_FEMALE;
  static constexpr Pronoun PRONOUN_MALE =
    Character_CharacterDescription_Pronoun_PRONOUN_MALE;
  static constexpr Pronoun PRONOUN_OTHER =
    Character_CharacterDescription_Pronoun_PRONOUN_OTHER;
  static inline bool Pronoun_IsValid(int value) {
    return Character_CharacterDescription_Pronoun_IsValid(value);
  }
  static constexpr Pronoun Pronoun_MIN =
    Character_CharacterDescription_Pronoun_Pronoun_MIN;
  static constexpr Pronoun Pronoun_MAX =
    Character_CharacterDescription_Pronoun_Pronoun_MAX;
  static constexpr int Pronoun_ARRAYSIZE =
    Character_CharacterDescription_Pronoun_Pronoun_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Pronoun_descriptor() {
    return Character_CharacterDescription_Pronoun_descriptor();
  }
  template<typename T>
  static inline const std::string& Pronoun_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Pronoun>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Pronoun_Name.");
    return Character_CharacterDescription_Pronoun_Name(enum_t_value);
  }
  static inline bool Pronoun_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Pronoun* value) {
    return Character_CharacterDescription_Pronoun_Parse(name, value);
  }

  typedef Character_CharacterDescription_ExampleDialogStyle ExampleDialogStyle;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_UNSPECIFIED =
    Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_UNSPECIFIED;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_DEFAULT =
    Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_DEFAULT;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_BUBBLY =
    Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BUBBLY;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_FORMAL =
    Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_FORMAL;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_BLUNT =
    Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_BLUNT;
  static constexpr ExampleDialogStyle EXAMPLE_DIALOG_STYLE_INQUISITIVE =
    Character_CharacterDescription_ExampleDialogStyle_EXAMPLE_DIALOG_STYLE_INQUISITIVE;
  static inline bool ExampleDialogStyle_IsValid(int value) {
    return Character_CharacterDescription_ExampleDialogStyle_IsValid(value);
  }
  static constexpr ExampleDialogStyle ExampleDialogStyle_MIN =
    Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MIN;
  static constexpr ExampleDialogStyle ExampleDialogStyle_MAX =
    Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_MAX;
  static constexpr int ExampleDialogStyle_ARRAYSIZE =
    Character_CharacterDescription_ExampleDialogStyle_ExampleDialogStyle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ExampleDialogStyle_descriptor() {
    return Character_CharacterDescription_ExampleDialogStyle_descriptor();
  }
  template<typename T>
  static inline const std::string& ExampleDialogStyle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExampleDialogStyle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExampleDialogStyle_Name.");
    return Character_CharacterDescription_ExampleDialogStyle_Name(enum_t_value);
  }
  static inline bool ExampleDialogStyle_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ExampleDialogStyle* value) {
    return Character_CharacterDescription_ExampleDialogStyle_Parse(name, value);
  }

  typedef Character_CharacterDescription_LifeStage LifeStage;
  static constexpr LifeStage LIFE_STAGE_UNSPECIFIED =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_UNSPECIFIED;
  static constexpr LifeStage LIFE_STAGE_INFANCY =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_INFANCY;
  static constexpr LifeStage LIFE_STAGE_TODDLERHOOD =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_TODDLERHOOD;
  static constexpr LifeStage LIFE_STAGE_PRESCHOOL =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_PRESCHOOL;
  static constexpr LifeStage LIFE_STAGE_EARLY_SCHOOL =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_EARLY_SCHOOL;
  static constexpr LifeStage LIFE_STAGE_ADOLESCENCE =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_ADOLESCENCE;
  static constexpr LifeStage LIFE_STAGE_YOUNG_ADULTHOOD =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_YOUNG_ADULTHOOD;
  static constexpr LifeStage LIFE_STAGE_MIDDLE_ADULTHOOD =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_MIDDLE_ADULTHOOD;
  static constexpr LifeStage LIFE_STAGE_LATE_ADULTHOOD =
    Character_CharacterDescription_LifeStage_LIFE_STAGE_LATE_ADULTHOOD;
  static inline bool LifeStage_IsValid(int value) {
    return Character_CharacterDescription_LifeStage_IsValid(value);
  }
  static constexpr LifeStage LifeStage_MIN =
    Character_CharacterDescription_LifeStage_LifeStage_MIN;
  static constexpr LifeStage LifeStage_MAX =
    Character_CharacterDescription_LifeStage_LifeStage_MAX;
  static constexpr int LifeStage_ARRAYSIZE =
    Character_CharacterDescription_LifeStage_LifeStage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LifeStage_descriptor() {
    return Character_CharacterDescription_LifeStage_descriptor();
  }
  template<typename T>
  static inline const std::string& LifeStage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LifeStage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LifeStage_Name.");
    return Character_CharacterDescription_LifeStage_Name(enum_t_value);
  }
  static inline bool LifeStage_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LifeStage* value) {
    return Character_CharacterDescription_LifeStage_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicknamesFieldNumber = 4,
    kPersonalityAdjectivesFieldNumber = 11,
    kHobbyOrInterestsFieldNumber = 13,
    kGivenNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kMotivationFieldNumber = 5,
    kWikipediaUriFieldNumber = 6,
    kPlayerRoleFieldNumber = 7,
    kDefaultContextFieldNumber = 8,
    kExampleDialogFieldNumber = 9,
    kCharacterRoleFieldNumber = 14,
    kPronounFieldNumber = 3,
    kExampleDialogStyleFieldNumber = 10,
    kLifeStageFieldNumber = 12,
  };
  // repeated string nicknames = 4;
  int nicknames_size() const;
  private:
  int _internal_nicknames_size() const;
  public:
  void clear_nicknames();
  const std::string& nicknames(int index) const;
  std::string* mutable_nicknames(int index);
  void set_nicknames(int index, const std::string& value);
  void set_nicknames(int index, std::string&& value);
  void set_nicknames(int index, const char* value);
  void set_nicknames(int index, const char* value, size_t size);
  std::string* add_nicknames();
  void add_nicknames(const std::string& value);
  void add_nicknames(std::string&& value);
  void add_nicknames(const char* value);
  void add_nicknames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nicknames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nicknames();
  private:
  const std::string& _internal_nicknames(int index) const;
  std::string* _internal_add_nicknames();
  public:

  // repeated string personality_adjectives = 11;
  int personality_adjectives_size() const;
  private:
  int _internal_personality_adjectives_size() const;
  public:
  void clear_personality_adjectives();
  const std::string& personality_adjectives(int index) const;
  std::string* mutable_personality_adjectives(int index);
  void set_personality_adjectives(int index, const std::string& value);
  void set_personality_adjectives(int index, std::string&& value);
  void set_personality_adjectives(int index, const char* value);
  void set_personality_adjectives(int index, const char* value, size_t size);
  std::string* add_personality_adjectives();
  void add_personality_adjectives(const std::string& value);
  void add_personality_adjectives(std::string&& value);
  void add_personality_adjectives(const char* value);
  void add_personality_adjectives(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& personality_adjectives() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_personality_adjectives();
  private:
  const std::string& _internal_personality_adjectives(int index) const;
  std::string* _internal_add_personality_adjectives();
  public:

  // repeated string hobby_or_interests = 13;
  int hobby_or_interests_size() const;
  private:
  int _internal_hobby_or_interests_size() const;
  public:
  void clear_hobby_or_interests();
  const std::string& hobby_or_interests(int index) const;
  std::string* mutable_hobby_or_interests(int index);
  void set_hobby_or_interests(int index, const std::string& value);
  void set_hobby_or_interests(int index, std::string&& value);
  void set_hobby_or_interests(int index, const char* value);
  void set_hobby_or_interests(int index, const char* value, size_t size);
  std::string* add_hobby_or_interests();
  void add_hobby_or_interests(const std::string& value);
  void add_hobby_or_interests(std::string&& value);
  void add_hobby_or_interests(const char* value);
  void add_hobby_or_interests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hobby_or_interests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hobby_or_interests();
  private:
  const std::string& _internal_hobby_or_interests(int index) const;
  std::string* _internal_add_hobby_or_interests();
  public:

  // string given_name = 1 [(.ai.inworld.options.examples) = {
  void clear_given_name();
  const std::string& given_name() const;
  void set_given_name(const std::string& value);
  void set_given_name(std::string&& value);
  void set_given_name(const char* value);
  void set_given_name(const char* value, size_t size);
  std::string* mutable_given_name();
  std::string* release_given_name();
  void set_allocated_given_name(std::string* given_name);
  private:
  const std::string& _internal_given_name() const;
  void _internal_set_given_name(const std::string& value);
  std::string* _internal_mutable_given_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string motivation = 5;
  void clear_motivation();
  const std::string& motivation() const;
  void set_motivation(const std::string& value);
  void set_motivation(std::string&& value);
  void set_motivation(const char* value);
  void set_motivation(const char* value, size_t size);
  std::string* mutable_motivation();
  std::string* release_motivation();
  void set_allocated_motivation(std::string* motivation);
  private:
  const std::string& _internal_motivation() const;
  void _internal_set_motivation(const std::string& value);
  std::string* _internal_mutable_motivation();
  public:

  // string wikipedia_uri = 6;
  void clear_wikipedia_uri();
  const std::string& wikipedia_uri() const;
  void set_wikipedia_uri(const std::string& value);
  void set_wikipedia_uri(std::string&& value);
  void set_wikipedia_uri(const char* value);
  void set_wikipedia_uri(const char* value, size_t size);
  std::string* mutable_wikipedia_uri();
  std::string* release_wikipedia_uri();
  void set_allocated_wikipedia_uri(std::string* wikipedia_uri);
  private:
  const std::string& _internal_wikipedia_uri() const;
  void _internal_set_wikipedia_uri(const std::string& value);
  std::string* _internal_mutable_wikipedia_uri();
  public:

  // string player_role = 7;
  void clear_player_role();
  const std::string& player_role() const;
  void set_player_role(const std::string& value);
  void set_player_role(std::string&& value);
  void set_player_role(const char* value);
  void set_player_role(const char* value, size_t size);
  std::string* mutable_player_role();
  std::string* release_player_role();
  void set_allocated_player_role(std::string* player_role);
  private:
  const std::string& _internal_player_role() const;
  void _internal_set_player_role(const std::string& value);
  std::string* _internal_mutable_player_role();
  public:

  // string default_context = 8;
  void clear_default_context();
  const std::string& default_context() const;
  void set_default_context(const std::string& value);
  void set_default_context(std::string&& value);
  void set_default_context(const char* value);
  void set_default_context(const char* value, size_t size);
  std::string* mutable_default_context();
  std::string* release_default_context();
  void set_allocated_default_context(std::string* default_context);
  private:
  const std::string& _internal_default_context() const;
  void _internal_set_default_context(const std::string& value);
  std::string* _internal_mutable_default_context();
  public:

  // string example_dialog = 9;
  void clear_example_dialog();
  const std::string& example_dialog() const;
  void set_example_dialog(const std::string& value);
  void set_example_dialog(std::string&& value);
  void set_example_dialog(const char* value);
  void set_example_dialog(const char* value, size_t size);
  std::string* mutable_example_dialog();
  std::string* release_example_dialog();
  void set_allocated_example_dialog(std::string* example_dialog);
  private:
  const std::string& _internal_example_dialog() const;
  void _internal_set_example_dialog(const std::string& value);
  std::string* _internal_mutable_example_dialog();
  public:

  // string character_role = 14;
  void clear_character_role();
  const std::string& character_role() const;
  void set_character_role(const std::string& value);
  void set_character_role(std::string&& value);
  void set_character_role(const char* value);
  void set_character_role(const char* value, size_t size);
  std::string* mutable_character_role();
  std::string* release_character_role();
  void set_allocated_character_role(std::string* character_role);
  private:
  const std::string& _internal_character_role() const;
  void _internal_set_character_role(const std::string& value);
  std::string* _internal_mutable_character_role();
  public:

  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.Pronoun pronoun = 3;
  void clear_pronoun();
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun pronoun() const;
  void set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value);
  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun _internal_pronoun() const;
  void _internal_set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value);
  public:

  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.ExampleDialogStyle example_dialog_style = 10;
  void clear_example_dialog_style();
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle example_dialog_style() const;
  void set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value);
  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle _internal_example_dialog_style() const;
  void _internal_set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value);
  public:

  // .ai.inworld.studio.v1alpha.Character.CharacterDescription.LifeStage life_stage = 12;
  void clear_life_stage();
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage life_stage() const;
  void set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value);
  private:
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage _internal_life_stage() const;
  void _internal_set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nicknames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> personality_adjectives_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hobby_or_interests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr given_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motivation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wikipedia_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_dialog_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_role_;
  int pronoun_;
  int example_dialog_style_;
  int life_stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_BrainSettings_ConversationConfig_FillerSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec) */ {
 public:
  inline Character_BrainSettings_ConversationConfig_FillerSpec() : Character_BrainSettings_ConversationConfig_FillerSpec(nullptr) {}
  virtual ~Character_BrainSettings_ConversationConfig_FillerSpec();

  Character_BrainSettings_ConversationConfig_FillerSpec(const Character_BrainSettings_ConversationConfig_FillerSpec& from);
  Character_BrainSettings_ConversationConfig_FillerSpec(Character_BrainSettings_ConversationConfig_FillerSpec&& from) noexcept
    : Character_BrainSettings_ConversationConfig_FillerSpec() {
    *this = ::std::move(from);
  }

  inline Character_BrainSettings_ConversationConfig_FillerSpec& operator=(const Character_BrainSettings_ConversationConfig_FillerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_BrainSettings_ConversationConfig_FillerSpec& operator=(Character_BrainSettings_ConversationConfig_FillerSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_BrainSettings_ConversationConfig_FillerSpec& default_instance();

  static inline const Character_BrainSettings_ConversationConfig_FillerSpec* internal_default_instance() {
    return reinterpret_cast<const Character_BrainSettings_ConversationConfig_FillerSpec*>(
               &_Character_BrainSettings_ConversationConfig_FillerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Character_BrainSettings_ConversationConfig_FillerSpec& a, Character_BrainSettings_ConversationConfig_FillerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_BrainSettings_ConversationConfig_FillerSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_BrainSettings_ConversationConfig_FillerSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_BrainSettings_ConversationConfig_FillerSpec* New() const final {
    return CreateMaybeMessage<Character_BrainSettings_ConversationConfig_FillerSpec>(nullptr);
  }

  Character_BrainSettings_ConversationConfig_FillerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_BrainSettings_ConversationConfig_FillerSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_BrainSettings_ConversationConfig_FillerSpec& from);
  void MergeFrom(const Character_BrainSettings_ConversationConfig_FillerSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_BrainSettings_ConversationConfig_FillerSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec";
  }
  protected:
  explicit Character_BrainSettings_ConversationConfig_FillerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillersDisabledFieldNumber = 1,
  };
  // bool fillers_disabled = 1;
  void clear_fillers_disabled();
  bool fillers_disabled() const;
  void set_fillers_disabled(bool value);
  private:
  bool _internal_fillers_disabled() const;
  void _internal_set_fillers_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool fillers_disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_BrainSettings_ConversationConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig) */ {
 public:
  inline Character_BrainSettings_ConversationConfig() : Character_BrainSettings_ConversationConfig(nullptr) {}
  virtual ~Character_BrainSettings_ConversationConfig();

  Character_BrainSettings_ConversationConfig(const Character_BrainSettings_ConversationConfig& from);
  Character_BrainSettings_ConversationConfig(Character_BrainSettings_ConversationConfig&& from) noexcept
    : Character_BrainSettings_ConversationConfig() {
    *this = ::std::move(from);
  }

  inline Character_BrainSettings_ConversationConfig& operator=(const Character_BrainSettings_ConversationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_BrainSettings_ConversationConfig& operator=(Character_BrainSettings_ConversationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_BrainSettings_ConversationConfig& default_instance();

  static inline const Character_BrainSettings_ConversationConfig* internal_default_instance() {
    return reinterpret_cast<const Character_BrainSettings_ConversationConfig*>(
               &_Character_BrainSettings_ConversationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Character_BrainSettings_ConversationConfig& a, Character_BrainSettings_ConversationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_BrainSettings_ConversationConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_BrainSettings_ConversationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_BrainSettings_ConversationConfig* New() const final {
    return CreateMaybeMessage<Character_BrainSettings_ConversationConfig>(nullptr);
  }

  Character_BrainSettings_ConversationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_BrainSettings_ConversationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_BrainSettings_ConversationConfig& from);
  void MergeFrom(const Character_BrainSettings_ConversationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_BrainSettings_ConversationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig";
  }
  protected:
  explicit Character_BrainSettings_ConversationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Character_BrainSettings_ConversationConfig_FillerSpec FillerSpec;

  // accessors -------------------------------------------------------

  enum : int {
    kFillerSpecFieldNumber = 2,
    kEmotionsDisabledFieldNumber = 4,
    kBehavioralContextsDisabledFieldNumber = 5,
  };
  // .ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec filler_spec = 2;
  bool has_filler_spec() const;
  private:
  bool _internal_has_filler_spec() const;
  public:
  void clear_filler_spec();
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec& filler_spec() const;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* release_filler_spec();
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* mutable_filler_spec();
  void set_allocated_filler_spec(::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* filler_spec);
  private:
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec& _internal_filler_spec() const;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* _internal_mutable_filler_spec();
  public:
  void unsafe_arena_set_allocated_filler_spec(
      ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* filler_spec);
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* unsafe_arena_release_filler_spec();

  // bool emotions_disabled = 4;
  void clear_emotions_disabled();
  bool emotions_disabled() const;
  void set_emotions_disabled(bool value);
  private:
  bool _internal_emotions_disabled() const;
  void _internal_set_emotions_disabled(bool value);
  public:

  // bool behavioral_contexts_disabled = 5;
  void clear_behavioral_contexts_disabled();
  bool behavioral_contexts_disabled() const;
  void set_behavioral_contexts_disabled(bool value);
  private:
  bool _internal_behavioral_contexts_disabled() const;
  void _internal_set_behavioral_contexts_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* filler_spec_;
  bool emotions_disabled_;
  bool behavioral_contexts_disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_BrainSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.BrainSettings) */ {
 public:
  inline Character_BrainSettings() : Character_BrainSettings(nullptr) {}
  virtual ~Character_BrainSettings();

  Character_BrainSettings(const Character_BrainSettings& from);
  Character_BrainSettings(Character_BrainSettings&& from) noexcept
    : Character_BrainSettings() {
    *this = ::std::move(from);
  }

  inline Character_BrainSettings& operator=(const Character_BrainSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_BrainSettings& operator=(Character_BrainSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_BrainSettings& default_instance();

  static inline const Character_BrainSettings* internal_default_instance() {
    return reinterpret_cast<const Character_BrainSettings*>(
               &_Character_BrainSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Character_BrainSettings& a, Character_BrainSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_BrainSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_BrainSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_BrainSettings* New() const final {
    return CreateMaybeMessage<Character_BrainSettings>(nullptr);
  }

  Character_BrainSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_BrainSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_BrainSettings& from);
  void MergeFrom(const Character_BrainSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_BrainSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.BrainSettings";
  }
  protected:
  explicit Character_BrainSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Character_BrainSettings_ConversationConfig ConversationConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kConversationConfigFieldNumber = 1,
  };
  // .ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig conversation_config = 1;
  bool has_conversation_config() const;
  private:
  bool _internal_has_conversation_config() const;
  public:
  void clear_conversation_config();
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig& conversation_config() const;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* release_conversation_config();
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* mutable_conversation_config();
  void set_allocated_conversation_config(::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* conversation_config);
  private:
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig& _internal_conversation_config() const;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* _internal_mutable_conversation_config();
  public:
  void unsafe_arena_set_allocated_conversation_config(
      ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* conversation_config);
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* unsafe_arena_release_conversation_config();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.BrainSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* conversation_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_BrainTrigger PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.BrainTrigger) */ {
 public:
  inline Character_BrainTrigger() : Character_BrainTrigger(nullptr) {}
  virtual ~Character_BrainTrigger();

  Character_BrainTrigger(const Character_BrainTrigger& from);
  Character_BrainTrigger(Character_BrainTrigger&& from) noexcept
    : Character_BrainTrigger() {
    *this = ::std::move(from);
  }

  inline Character_BrainTrigger& operator=(const Character_BrainTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_BrainTrigger& operator=(Character_BrainTrigger&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_BrainTrigger& default_instance();

  static inline const Character_BrainTrigger* internal_default_instance() {
    return reinterpret_cast<const Character_BrainTrigger*>(
               &_Character_BrainTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Character_BrainTrigger& a, Character_BrainTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_BrainTrigger* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_BrainTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_BrainTrigger* New() const final {
    return CreateMaybeMessage<Character_BrainTrigger>(nullptr);
  }

  Character_BrainTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_BrainTrigger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_BrainTrigger& from);
  void MergeFrom(const Character_BrainTrigger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_BrainTrigger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.BrainTrigger";
  }
  protected:
  explicit Character_BrainTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerFieldNumber = 1,
    kSituationDescriptionFieldNumber = 2,
    kStartConversationFieldNumber = 3,
  };
  // string trigger = 1 [(.google.api.resource_reference) = {
  void clear_trigger();
  const std::string& trigger() const;
  void set_trigger(const std::string& value);
  void set_trigger(std::string&& value);
  void set_trigger(const char* value);
  void set_trigger(const char* value, size_t size);
  std::string* mutable_trigger();
  std::string* release_trigger();
  void set_allocated_trigger(std::string* trigger);
  private:
  const std::string& _internal_trigger() const;
  void _internal_set_trigger(const std::string& value);
  std::string* _internal_mutable_trigger();
  public:

  // string situation_description = 2;
  void clear_situation_description();
  const std::string& situation_description() const;
  void set_situation_description(const std::string& value);
  void set_situation_description(std::string&& value);
  void set_situation_description(const char* value);
  void set_situation_description(const char* value, size_t size);
  std::string* mutable_situation_description();
  std::string* release_situation_description();
  void set_allocated_situation_description(std::string* situation_description);
  private:
  const std::string& _internal_situation_description() const;
  void _internal_set_situation_description(const std::string& value);
  std::string* _internal_mutable_situation_description();
  public:

  // bool start_conversation = 3;
  void clear_start_conversation();
  bool start_conversation() const;
  void set_start_conversation(bool value);
  private:
  bool _internal_start_conversation() const;
  void _internal_set_start_conversation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.BrainTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr situation_description_;
  bool start_conversation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_CharacterAssets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterAssets) */ {
 public:
  inline Character_CharacterAssets() : Character_CharacterAssets(nullptr) {}
  virtual ~Character_CharacterAssets();

  Character_CharacterAssets(const Character_CharacterAssets& from);
  Character_CharacterAssets(Character_CharacterAssets&& from) noexcept
    : Character_CharacterAssets() {
    *this = ::std::move(from);
  }

  inline Character_CharacterAssets& operator=(const Character_CharacterAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterAssets& operator=(Character_CharacterAssets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_CharacterAssets& default_instance();

  static inline const Character_CharacterAssets* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterAssets*>(
               &_Character_CharacterAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Character_CharacterAssets& a, Character_CharacterAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterAssets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_CharacterAssets* New() const final {
    return CreateMaybeMessage<Character_CharacterAssets>(nullptr);
  }

  Character_CharacterAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_CharacterAssets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_CharacterAssets& from);
  void MergeFrom(const Character_CharacterAssets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_CharacterAssets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterAssets";
  }
  protected:
  explicit Character_CharacterAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpmModelUriFieldNumber = 2,
    kRpmImageUriFieldNumber = 3,
    kRpmImageUriPortraitFieldNumber = 4,
    kRpmImageUriPostureFieldNumber = 5,
    kVoiceFieldNumber = 6,
  };
  // string rpm_model_uri = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_model_uri();
  const std::string& rpm_model_uri() const;
  void set_rpm_model_uri(const std::string& value);
  void set_rpm_model_uri(std::string&& value);
  void set_rpm_model_uri(const char* value);
  void set_rpm_model_uri(const char* value, size_t size);
  std::string* mutable_rpm_model_uri();
  std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* rpm_model_uri);
  private:
  const std::string& _internal_rpm_model_uri() const;
  void _internal_set_rpm_model_uri(const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();
  public:

  // string rpm_image_uri = 3 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
  PROTOBUF_DEPRECATED void clear_rpm_image_uri();
  PROTOBUF_DEPRECATED const std::string& rpm_image_uri() const;
  PROTOBUF_DEPRECATED void set_rpm_image_uri(const std::string& value);
  PROTOBUF_DEPRECATED void set_rpm_image_uri(std::string&& value);
  PROTOBUF_DEPRECATED void set_rpm_image_uri(const char* value);
  PROTOBUF_DEPRECATED void set_rpm_image_uri(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_rpm_image_uri();
  PROTOBUF_DEPRECATED std::string* release_rpm_image_uri();
  PROTOBUF_DEPRECATED void set_allocated_rpm_image_uri(std::string* rpm_image_uri);
  private:
  const std::string& _internal_rpm_image_uri() const;
  void _internal_set_rpm_image_uri(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri();
  public:

  // string rpm_image_uri_portrait = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_portrait();
  const std::string& rpm_image_uri_portrait() const;
  void set_rpm_image_uri_portrait(const std::string& value);
  void set_rpm_image_uri_portrait(std::string&& value);
  void set_rpm_image_uri_portrait(const char* value);
  void set_rpm_image_uri_portrait(const char* value, size_t size);
  std::string* mutable_rpm_image_uri_portrait();
  std::string* release_rpm_image_uri_portrait();
  void set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait);
  private:
  const std::string& _internal_rpm_image_uri_portrait() const;
  void _internal_set_rpm_image_uri_portrait(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_portrait();
  public:

  // string rpm_image_uri_posture = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_rpm_image_uri_posture();
  const std::string& rpm_image_uri_posture() const;
  void set_rpm_image_uri_posture(const std::string& value);
  void set_rpm_image_uri_posture(std::string&& value);
  void set_rpm_image_uri_posture(const char* value);
  void set_rpm_image_uri_posture(const char* value, size_t size);
  std::string* mutable_rpm_image_uri_posture();
  std::string* release_rpm_image_uri_posture();
  void set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture);
  private:
  const std::string& _internal_rpm_image_uri_posture() const;
  void _internal_set_rpm_image_uri_posture(const std::string& value);
  std::string* _internal_mutable_rpm_image_uri_posture();
  public:

  // .ai.inworld.voices.Voice voice = 6;
  bool has_voice() const;
  private:
  bool _internal_has_voice() const;
  public:
  void clear_voice();
  const ::ai::inworld::voices::Voice& voice() const;
  ::ai::inworld::voices::Voice* release_voice();
  ::ai::inworld::voices::Voice* mutable_voice();
  void set_allocated_voice(::ai::inworld::voices::Voice* voice);
  private:
  const ::ai::inworld::voices::Voice& _internal_voice() const;
  ::ai::inworld::voices::Voice* _internal_mutable_voice();
  public:
  void unsafe_arena_set_allocated_voice(
      ::ai::inworld::voices::Voice* voice);
  ::ai::inworld::voices::Voice* unsafe_arena_release_voice();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_model_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_portrait_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_image_uri_posture_;
  ::ai::inworld::voices::Voice* voice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_CharacterInitialMood PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterInitialMood) */ {
 public:
  inline Character_CharacterInitialMood() : Character_CharacterInitialMood(nullptr) {}
  virtual ~Character_CharacterInitialMood();

  Character_CharacterInitialMood(const Character_CharacterInitialMood& from);
  Character_CharacterInitialMood(Character_CharacterInitialMood&& from) noexcept
    : Character_CharacterInitialMood() {
    *this = ::std::move(from);
  }

  inline Character_CharacterInitialMood& operator=(const Character_CharacterInitialMood& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterInitialMood& operator=(Character_CharacterInitialMood&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_CharacterInitialMood& default_instance();

  static inline const Character_CharacterInitialMood* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterInitialMood*>(
               &_Character_CharacterInitialMood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Character_CharacterInitialMood& a, Character_CharacterInitialMood& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterInitialMood* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterInitialMood* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_CharacterInitialMood* New() const final {
    return CreateMaybeMessage<Character_CharacterInitialMood>(nullptr);
  }

  Character_CharacterInitialMood* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_CharacterInitialMood>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_CharacterInitialMood& from);
  void MergeFrom(const Character_CharacterInitialMood& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_CharacterInitialMood* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterInitialMood";
  }
  protected:
  explicit Character_CharacterInitialMood(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoyFieldNumber = 1,
    kFearFieldNumber = 2,
    kTrustFieldNumber = 3,
    kSurpriseFieldNumber = 4,
  };
  // int32 joy = 1;
  void clear_joy();
  ::PROTOBUF_NAMESPACE_ID::int32 joy() const;
  void set_joy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joy() const;
  void _internal_set_joy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fear = 2;
  void clear_fear();
  ::PROTOBUF_NAMESPACE_ID::int32 fear() const;
  void set_fear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fear() const;
  void _internal_set_fear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trust = 3;
  void clear_trust();
  ::PROTOBUF_NAMESPACE_ID::int32 trust() const;
  void set_trust(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trust() const;
  void _internal_set_trust(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 surprise = 4;
  void clear_surprise();
  ::PROTOBUF_NAMESPACE_ID::int32 surprise() const;
  void set_surprise(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_surprise() const;
  void _internal_set_surprise(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterInitialMood)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 joy_;
  ::PROTOBUF_NAMESPACE_ID::int32 fear_;
  ::PROTOBUF_NAMESPACE_ID::int32 trust_;
  ::PROTOBUF_NAMESPACE_ID::int32 surprise_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_CharacterPersonality PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.CharacterPersonality) */ {
 public:
  inline Character_CharacterPersonality() : Character_CharacterPersonality(nullptr) {}
  virtual ~Character_CharacterPersonality();

  Character_CharacterPersonality(const Character_CharacterPersonality& from);
  Character_CharacterPersonality(Character_CharacterPersonality&& from) noexcept
    : Character_CharacterPersonality() {
    *this = ::std::move(from);
  }

  inline Character_CharacterPersonality& operator=(const Character_CharacterPersonality& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_CharacterPersonality& operator=(Character_CharacterPersonality&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_CharacterPersonality& default_instance();

  static inline const Character_CharacterPersonality* internal_default_instance() {
    return reinterpret_cast<const Character_CharacterPersonality*>(
               &_Character_CharacterPersonality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Character_CharacterPersonality& a, Character_CharacterPersonality& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_CharacterPersonality* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_CharacterPersonality* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_CharacterPersonality* New() const final {
    return CreateMaybeMessage<Character_CharacterPersonality>(nullptr);
  }

  Character_CharacterPersonality* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_CharacterPersonality>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_CharacterPersonality& from);
  void MergeFrom(const Character_CharacterPersonality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_CharacterPersonality* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.CharacterPersonality";
  }
  protected:
  explicit Character_CharacterPersonality(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositiveFieldNumber = 1,
    kPeacefulFieldNumber = 2,
    kOpenFieldNumber = 3,
    kExtravertFieldNumber = 4,
  };
  // int32 positive = 1;
  void clear_positive();
  ::PROTOBUF_NAMESPACE_ID::int32 positive() const;
  void set_positive(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positive() const;
  void _internal_set_positive(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peaceful = 2;
  void clear_peaceful();
  ::PROTOBUF_NAMESPACE_ID::int32 peaceful() const;
  void set_peaceful(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peaceful() const;
  void _internal_set_peaceful(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 open = 3;
  void clear_open();
  ::PROTOBUF_NAMESPACE_ID::int32 open() const;
  void set_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open() const;
  void _internal_set_open(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extravert = 4;
  void clear_extravert();
  ::PROTOBUF_NAMESPACE_ID::int32 extravert() const;
  void set_extravert(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extravert() const;
  void _internal_set_extravert(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.CharacterPersonality)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 positive_;
  ::PROTOBUF_NAMESPACE_ID::int32 peaceful_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_;
  ::PROTOBUF_NAMESPACE_ID::int32 extravert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_Fact PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.Fact) */ {
 public:
  inline Character_Fact() : Character_Fact(nullptr) {}
  virtual ~Character_Fact();

  Character_Fact(const Character_Fact& from);
  Character_Fact(Character_Fact&& from) noexcept
    : Character_Fact() {
    *this = ::std::move(from);
  }

  inline Character_Fact& operator=(const Character_Fact& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_Fact& operator=(Character_Fact&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_Fact& default_instance();

  static inline const Character_Fact* internal_default_instance() {
    return reinterpret_cast<const Character_Fact*>(
               &_Character_Fact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Character_Fact& a, Character_Fact& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_Fact* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_Fact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_Fact* New() const final {
    return CreateMaybeMessage<Character_Fact>(nullptr);
  }

  Character_Fact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_Fact>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_Fact& from);
  void MergeFrom(const Character_Fact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_Fact* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.Fact";
  }
  protected:
  explicit Character_Fact(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTagsFieldNumber = 3,
    kUuidFieldNumber = 1,
  };
  // repeated string text = 2;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // repeated .ai.inworld.studio.v1alpha.Character.Tag tags = 3;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  ::ai::inworld::studio::v1alpha::Character_Tag _internal_tags(int index) const;
  void _internal_add_tags(::ai::inworld::studio::v1alpha::Character_Tag value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_tags();
  public:
  ::ai::inworld::studio::v1alpha::Character_Tag tags(int index) const;
  void set_tags(int index, ::ai::inworld::studio::v1alpha::Character_Tag value);
  void add_tags(::ai::inworld::studio::v1alpha::Character_Tag value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_tags();

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.Fact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> tags_;
  mutable std::atomic<int> _tags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character_Meta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character.Meta) */ {
 public:
  inline Character_Meta() : Character_Meta(nullptr) {}
  virtual ~Character_Meta();

  Character_Meta(const Character_Meta& from);
  Character_Meta(Character_Meta&& from) noexcept
    : Character_Meta() {
    *this = ::std::move(from);
  }

  inline Character_Meta& operator=(const Character_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character_Meta& operator=(Character_Meta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character_Meta& default_instance();

  static inline const Character_Meta* internal_default_instance() {
    return reinterpret_cast<const Character_Meta*>(
               &_Character_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Character_Meta& a, Character_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Character_Meta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character_Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character_Meta* New() const final {
    return CreateMaybeMessage<Character_Meta>(nullptr);
  }

  Character_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character_Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character_Meta& from);
  void MergeFrom(const Character_Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character_Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character.Meta";
  }
  protected:
  explicit Character_Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTriggersFieldNumber = 1,
    kTotalCommonKnowledgeFieldNumber = 2,
  };
  // int32 total_triggers = 1;
  void clear_total_triggers();
  ::PROTOBUF_NAMESPACE_ID::int32 total_triggers() const;
  void set_total_triggers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_triggers() const;
  void _internal_set_total_triggers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_common_knowledge = 2;
  void clear_total_common_knowledge();
  ::PROTOBUF_NAMESPACE_ID::int32 total_common_knowledge() const;
  void set_total_common_knowledge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_common_knowledge() const;
  void _internal_set_total_common_knowledge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_triggers_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_common_knowledge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class Character PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  virtual ~Character();

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Character& default_instance();

  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Character* New() const final {
    return CreateMaybeMessage<Character>(nullptr);
  }

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Character& from);
  void MergeFrom(const Character& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Character_CharacterDescription CharacterDescription;
  typedef Character_BrainSettings BrainSettings;
  typedef Character_BrainTrigger BrainTrigger;
  typedef Character_CharacterAssets CharacterAssets;
  typedef Character_CharacterInitialMood CharacterInitialMood;
  typedef Character_CharacterPersonality CharacterPersonality;
  typedef Character_Fact Fact;
  typedef Character_Meta Meta;

  typedef Character_Tag Tag;
  static constexpr Tag TAG_UNSPECIFIED =
    Character_Tag_TAG_UNSPECIFIED;
  static constexpr Tag TAG_MEMORY =
    Character_Tag_TAG_MEMORY;
  static constexpr Tag TAG_APPEARANCE =
    Character_Tag_TAG_APPEARANCE;
  static inline bool Tag_IsValid(int value) {
    return Character_Tag_IsValid(value);
  }
  static constexpr Tag Tag_MIN =
    Character_Tag_Tag_MIN;
  static constexpr Tag Tag_MAX =
    Character_Tag_Tag_MAX;
  static constexpr int Tag_ARRAYSIZE =
    Character_Tag_Tag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Tag_descriptor() {
    return Character_Tag_descriptor();
  }
  template<typename T>
  static inline const std::string& Tag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Tag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Tag_Name.");
    return Character_Tag_Name(enum_t_value);
  }
  static inline bool Tag_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Tag* value) {
    return Character_Tag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrainTriggersFieldNumber = 5,
    kCommonKnowledgesFieldNumber = 11,
    kScenesFieldNumber = 13,
    kFactsFieldNumber = 14,
    kBehavioralContextsFieldNumber = 15,
    kNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kDefaultCharacterDescriptionFieldNumber = 3,
    kBrainSettingsFieldNumber = 4,
    kDefaultCharacterAssetsFieldNumber = 7,
    kInitialMoodFieldNumber = 9,
    kPersonalityFieldNumber = 10,
    kMetaFieldNumber = 16,
    kSocialRankFieldNumber = 12,
    kEmotionalFluidityFieldNumber = 17,
  };
  // repeated .ai.inworld.studio.v1alpha.Character.BrainTrigger brain_triggers = 5;
  int brain_triggers_size() const;
  private:
  int _internal_brain_triggers_size() const;
  public:
  void clear_brain_triggers();
  ::ai::inworld::studio::v1alpha::Character_BrainTrigger* mutable_brain_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_BrainTrigger >*
      mutable_brain_triggers();
  private:
  const ::ai::inworld::studio::v1alpha::Character_BrainTrigger& _internal_brain_triggers(int index) const;
  ::ai::inworld::studio::v1alpha::Character_BrainTrigger* _internal_add_brain_triggers();
  public:
  const ::ai::inworld::studio::v1alpha::Character_BrainTrigger& brain_triggers(int index) const;
  ::ai::inworld::studio::v1alpha::Character_BrainTrigger* add_brain_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_BrainTrigger >&
      brain_triggers() const;

  // repeated string common_knowledges = 11;
  int common_knowledges_size() const;
  private:
  int _internal_common_knowledges_size() const;
  public:
  void clear_common_knowledges();
  const std::string& common_knowledges(int index) const;
  std::string* mutable_common_knowledges(int index);
  void set_common_knowledges(int index, const std::string& value);
  void set_common_knowledges(int index, std::string&& value);
  void set_common_knowledges(int index, const char* value);
  void set_common_knowledges(int index, const char* value, size_t size);
  std::string* add_common_knowledges();
  void add_common_knowledges(const std::string& value);
  void add_common_knowledges(std::string&& value);
  void add_common_knowledges(const char* value);
  void add_common_knowledges(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& common_knowledges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_common_knowledges();
  private:
  const std::string& _internal_common_knowledges(int index) const;
  std::string* _internal_add_common_knowledges();
  public:

  // repeated .ai.inworld.studio.v1alpha.Scene scenes = 13;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;
  public:
  void clear_scenes();
  ::ai::inworld::studio::v1alpha::Scene* mutable_scenes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >*
      mutable_scenes();
  private:
  const ::ai::inworld::studio::v1alpha::Scene& _internal_scenes(int index) const;
  ::ai::inworld::studio::v1alpha::Scene* _internal_add_scenes();
  public:
  const ::ai::inworld::studio::v1alpha::Scene& scenes(int index) const;
  ::ai::inworld::studio::v1alpha::Scene* add_scenes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >&
      scenes() const;

  // repeated .ai.inworld.studio.v1alpha.Character.Fact facts = 14;
  int facts_size() const;
  private:
  int _internal_facts_size() const;
  public:
  void clear_facts();
  ::ai::inworld::studio::v1alpha::Character_Fact* mutable_facts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact >*
      mutable_facts();
  private:
  const ::ai::inworld::studio::v1alpha::Character_Fact& _internal_facts(int index) const;
  ::ai::inworld::studio::v1alpha::Character_Fact* _internal_add_facts();
  public:
  const ::ai::inworld::studio::v1alpha::Character_Fact& facts(int index) const;
  ::ai::inworld::studio::v1alpha::Character_Fact* add_facts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact >&
      facts() const;

  // repeated .ai.inworld.studio.v1alpha.BehavioralContext behavioral_contexts = 15;
  int behavioral_contexts_size() const;
  private:
  int _internal_behavioral_contexts_size() const;
  public:
  void clear_behavioral_contexts();
  ::ai::inworld::studio::v1alpha::BehavioralContext* mutable_behavioral_contexts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext >*
      mutable_behavioral_contexts();
  private:
  const ::ai::inworld::studio::v1alpha::BehavioralContext& _internal_behavioral_contexts(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContext* _internal_add_behavioral_contexts();
  public:
  const ::ai::inworld::studio::v1alpha::BehavioralContext& behavioral_contexts(int index) const;
  ::ai::inworld::studio::v1alpha::BehavioralContext* add_behavioral_contexts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext >&
      behavioral_contexts() const;

  // string name = 1 [(.ai.inworld.options.examples) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // .ai.inworld.studio.v1alpha.Character.CharacterDescription default_character_description = 3;
  bool has_default_character_description() const;
  private:
  bool _internal_has_default_character_description() const;
  public:
  void clear_default_character_description();
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& default_character_description() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* release_default_character_description();
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* mutable_default_character_description();
  void set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Character_CharacterDescription* default_character_description);
  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& _internal_default_character_description() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* _internal_mutable_default_character_description();
  public:
  void unsafe_arena_set_allocated_default_character_description(
      ::ai::inworld::studio::v1alpha::Character_CharacterDescription* default_character_description);
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* unsafe_arena_release_default_character_description();

  // .ai.inworld.studio.v1alpha.Character.BrainSettings brain_settings = 4;
  bool has_brain_settings() const;
  private:
  bool _internal_has_brain_settings() const;
  public:
  void clear_brain_settings();
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings& brain_settings() const;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* release_brain_settings();
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* mutable_brain_settings();
  void set_allocated_brain_settings(::ai::inworld::studio::v1alpha::Character_BrainSettings* brain_settings);
  private:
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings& _internal_brain_settings() const;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* _internal_mutable_brain_settings();
  public:
  void unsafe_arena_set_allocated_brain_settings(
      ::ai::inworld::studio::v1alpha::Character_BrainSettings* brain_settings);
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* unsafe_arena_release_brain_settings();

  // .ai.inworld.studio.v1alpha.Character.CharacterAssets default_character_assets = 7;
  bool has_default_character_assets() const;
  private:
  bool _internal_has_default_character_assets() const;
  public:
  void clear_default_character_assets();
  const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& default_character_assets() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* release_default_character_assets();
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* mutable_default_character_assets();
  void set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Character_CharacterAssets* default_character_assets);
  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& _internal_default_character_assets() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* _internal_mutable_default_character_assets();
  public:
  void unsafe_arena_set_allocated_default_character_assets(
      ::ai::inworld::studio::v1alpha::Character_CharacterAssets* default_character_assets);
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* unsafe_arena_release_default_character_assets();

  // .ai.inworld.studio.v1alpha.Character.CharacterInitialMood initial_mood = 9;
  bool has_initial_mood() const;
  private:
  bool _internal_has_initial_mood() const;
  public:
  void clear_initial_mood();
  const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& initial_mood() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* release_initial_mood();
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* mutable_initial_mood();
  void set_allocated_initial_mood(::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* initial_mood);
  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& _internal_initial_mood() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* _internal_mutable_initial_mood();
  public:
  void unsafe_arena_set_allocated_initial_mood(
      ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* initial_mood);
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* unsafe_arena_release_initial_mood();

  // .ai.inworld.studio.v1alpha.Character.CharacterPersonality personality = 10;
  bool has_personality() const;
  private:
  bool _internal_has_personality() const;
  public:
  void clear_personality();
  const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& personality() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* release_personality();
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* mutable_personality();
  void set_allocated_personality(::ai::inworld::studio::v1alpha::Character_CharacterPersonality* personality);
  private:
  const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& _internal_personality() const;
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* _internal_mutable_personality();
  public:
  void unsafe_arena_set_allocated_personality(
      ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* personality);
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* unsafe_arena_release_personality();

  // .ai.inworld.studio.v1alpha.Character.Meta meta = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::ai::inworld::studio::v1alpha::Character_Meta& meta() const;
  ::ai::inworld::studio::v1alpha::Character_Meta* release_meta();
  ::ai::inworld::studio::v1alpha::Character_Meta* mutable_meta();
  void set_allocated_meta(::ai::inworld::studio::v1alpha::Character_Meta* meta);
  private:
  const ::ai::inworld::studio::v1alpha::Character_Meta& _internal_meta() const;
  ::ai::inworld::studio::v1alpha::Character_Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::ai::inworld::studio::v1alpha::Character_Meta* meta);
  ::ai::inworld::studio::v1alpha::Character_Meta* unsafe_arena_release_meta();

  // float social_rank = 12;
  void clear_social_rank();
  float social_rank() const;
  void set_social_rank(float value);
  private:
  float _internal_social_rank() const;
  void _internal_set_social_rank(float value);
  public:

  // float emotional_fluidity = 17;
  void clear_emotional_fluidity();
  float emotional_fluidity() const;
  void set_emotional_fluidity(float value);
  private:
  float _internal_emotional_fluidity() const;
  void _internal_set_emotional_fluidity(float value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_BrainTrigger > brain_triggers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> common_knowledges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene > scenes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact > facts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext > behavioral_contexts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* default_character_description_;
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* brain_settings_;
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* default_character_assets_;
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* initial_mood_;
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* personality_;
  ::ai::inworld::studio::v1alpha::Character_Meta* meta_;
  float social_rank_;
  float emotional_fluidity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCharacterRequest) */ {
 public:
  inline GetCharacterRequest() : GetCharacterRequest(nullptr) {}
  virtual ~GetCharacterRequest();

  GetCharacterRequest(const GetCharacterRequest& from);
  GetCharacterRequest(GetCharacterRequest&& from) noexcept
    : GetCharacterRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterRequest& operator=(const GetCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterRequest& operator=(GetCharacterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCharacterRequest& default_instance();

  static inline const GetCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterRequest*>(
               &_GetCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetCharacterRequest& a, GetCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCharacterRequest* New() const final {
    return CreateMaybeMessage<GetCharacterRequest>(nullptr);
  }

  GetCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCharacterRequest& from);
  void MergeFrom(const GetCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCharacterRequest";
  }
  protected:
  explicit GetCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kViewFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .ai.inworld.studio.v1alpha.CharacterItemView view = 2;
  void clear_view();
  ::ai::inworld::studio::v1alpha::CharacterItemView view() const;
  void set_view(::ai::inworld::studio::v1alpha::CharacterItemView value);
  private:
  ::ai::inworld::studio::v1alpha::CharacterItemView _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::CharacterItemView value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterAdvancedSettingsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest) */ {
 public:
  inline GetCharacterAdvancedSettingsRequest() : GetCharacterAdvancedSettingsRequest(nullptr) {}
  virtual ~GetCharacterAdvancedSettingsRequest();

  GetCharacterAdvancedSettingsRequest(const GetCharacterAdvancedSettingsRequest& from);
  GetCharacterAdvancedSettingsRequest(GetCharacterAdvancedSettingsRequest&& from) noexcept
    : GetCharacterAdvancedSettingsRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterAdvancedSettingsRequest& operator=(const GetCharacterAdvancedSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterAdvancedSettingsRequest& operator=(GetCharacterAdvancedSettingsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCharacterAdvancedSettingsRequest& default_instance();

  static inline const GetCharacterAdvancedSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterAdvancedSettingsRequest*>(
               &_GetCharacterAdvancedSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetCharacterAdvancedSettingsRequest& a, GetCharacterAdvancedSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCharacterAdvancedSettingsRequest* New() const final {
    return CreateMaybeMessage<GetCharacterAdvancedSettingsRequest>(nullptr);
  }

  GetCharacterAdvancedSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCharacterAdvancedSettingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCharacterAdvancedSettingsRequest& from);
  void MergeFrom(const GetCharacterAdvancedSettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterAdvancedSettingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest";
  }
  protected:
  explicit GetCharacterAdvancedSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class UpdateCharacterAdvancedSettingsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest) */ {
 public:
  inline UpdateCharacterAdvancedSettingsRequest() : UpdateCharacterAdvancedSettingsRequest(nullptr) {}
  virtual ~UpdateCharacterAdvancedSettingsRequest();

  UpdateCharacterAdvancedSettingsRequest(const UpdateCharacterAdvancedSettingsRequest& from);
  UpdateCharacterAdvancedSettingsRequest(UpdateCharacterAdvancedSettingsRequest&& from) noexcept
    : UpdateCharacterAdvancedSettingsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCharacterAdvancedSettingsRequest& operator=(const UpdateCharacterAdvancedSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCharacterAdvancedSettingsRequest& operator=(UpdateCharacterAdvancedSettingsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCharacterAdvancedSettingsRequest& default_instance();

  static inline const UpdateCharacterAdvancedSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCharacterAdvancedSettingsRequest*>(
               &_UpdateCharacterAdvancedSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateCharacterAdvancedSettingsRequest& a, UpdateCharacterAdvancedSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCharacterAdvancedSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCharacterAdvancedSettingsRequest* New() const final {
    return CreateMaybeMessage<UpdateCharacterAdvancedSettingsRequest>(nullptr);
  }

  UpdateCharacterAdvancedSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCharacterAdvancedSettingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCharacterAdvancedSettingsRequest& from);
  void MergeFrom(const UpdateCharacterAdvancedSettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCharacterAdvancedSettingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest";
  }
  protected:
  explicit UpdateCharacterAdvancedSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterAdvancedSettingsFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings character_advanced_settings = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_character_advanced_settings() const;
  private:
  bool _internal_has_character_advanced_settings() const;
  public:
  void clear_character_advanced_settings();
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& character_advanced_settings() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* release_character_advanced_settings();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* mutable_character_advanced_settings();
  void set_allocated_character_advanced_settings(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* character_advanced_settings);
  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& _internal_character_advanced_settings() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* _internal_mutable_character_advanced_settings();
  public:
  void unsafe_arena_set_allocated_character_advanced_settings(
      ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* character_advanced_settings);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* unsafe_arena_release_character_advanced_settings();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* character_advanced_settings_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class ListCharactersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListCharactersRequest) */ {
 public:
  inline ListCharactersRequest() : ListCharactersRequest(nullptr) {}
  virtual ~ListCharactersRequest();

  ListCharactersRequest(const ListCharactersRequest& from);
  ListCharactersRequest(ListCharactersRequest&& from) noexcept
    : ListCharactersRequest() {
    *this = ::std::move(from);
  }

  inline ListCharactersRequest& operator=(const ListCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCharactersRequest& operator=(ListCharactersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCharactersRequest& default_instance();

  static inline const ListCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const ListCharactersRequest*>(
               &_ListCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListCharactersRequest& a, ListCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCharactersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCharactersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCharactersRequest* New() const final {
    return CreateMaybeMessage<ListCharactersRequest>(nullptr);
  }

  ListCharactersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCharactersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCharactersRequest& from);
  void MergeFrom(const ListCharactersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCharactersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListCharactersRequest";
  }
  protected:
  explicit ListCharactersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kFilterFieldNumber = 5,
    kPageSizeFieldNumber = 2,
    kViewFieldNumber = 4,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // string filter = 5;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ai.inworld.studio.v1alpha.CharacterView view = 4;
  void clear_view();
  ::ai::inworld::studio::v1alpha::CharacterView view() const;
  void set_view(::ai::inworld::studio::v1alpha::CharacterView value);
  private:
  ::ai::inworld::studio::v1alpha::CharacterView _internal_view() const;
  void _internal_set_view(::ai::inworld::studio::v1alpha::CharacterView value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListCharactersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  int view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CreateCharacterRequest) */ {
 public:
  inline CreateCharacterRequest() : CreateCharacterRequest(nullptr) {}
  virtual ~CreateCharacterRequest();

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCharacterRequest& default_instance();

  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCharacterRequest* New() const final {
    return CreateMaybeMessage<CreateCharacterRequest>(nullptr);
  }

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCharacterRequest& from);
  void MergeFrom(const CreateCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CreateCharacterRequest";
  }
  protected:
  explicit CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .ai.inworld.studio.v1alpha.Character character = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::ai::inworld::studio::v1alpha::Character& character() const;
  ::ai::inworld::studio::v1alpha::Character* release_character();
  ::ai::inworld::studio::v1alpha::Character* mutable_character();
  void set_allocated_character(::ai::inworld::studio::v1alpha::Character* character);
  private:
  const ::ai::inworld::studio::v1alpha::Character& _internal_character() const;
  ::ai::inworld::studio::v1alpha::Character* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::ai::inworld::studio::v1alpha::Character* character);
  ::ai::inworld::studio::v1alpha::Character* unsafe_arena_release_character();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CreateCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::ai::inworld::studio::v1alpha::Character* character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class UpdateCharacterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateCharacterRequest) */ {
 public:
  inline UpdateCharacterRequest() : UpdateCharacterRequest(nullptr) {}
  virtual ~UpdateCharacterRequest();

  UpdateCharacterRequest(const UpdateCharacterRequest& from);
  UpdateCharacterRequest(UpdateCharacterRequest&& from) noexcept
    : UpdateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCharacterRequest& operator=(const UpdateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCharacterRequest& operator=(UpdateCharacterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCharacterRequest& default_instance();

  static inline const UpdateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCharacterRequest*>(
               &_UpdateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateCharacterRequest& a, UpdateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCharacterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCharacterRequest* New() const final {
    return CreateMaybeMessage<UpdateCharacterRequest>(nullptr);
  }

  UpdateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCharacterRequest& from);
  void MergeFrom(const UpdateCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateCharacterRequest";
  }
  protected:
  explicit UpdateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.Character character = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::ai::inworld::studio::v1alpha::Character& character() const;
  ::ai::inworld::studio::v1alpha::Character* release_character();
  ::ai::inworld::studio::v1alpha::Character* mutable_character();
  void set_allocated_character(::ai::inworld::studio::v1alpha::Character* character);
  private:
  const ::ai::inworld::studio::v1alpha::Character& _internal_character() const;
  ::ai::inworld::studio::v1alpha::Character* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::ai::inworld::studio::v1alpha::Character* character);
  ::ai::inworld::studio::v1alpha::Character* unsafe_arena_release_character();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::Character* character_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class DeleteCharacterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteCharacterRequest) */ {
 public:
  inline DeleteCharacterRequest() : DeleteCharacterRequest(nullptr) {}
  virtual ~DeleteCharacterRequest();

  DeleteCharacterRequest(const DeleteCharacterRequest& from);
  DeleteCharacterRequest(DeleteCharacterRequest&& from) noexcept
    : DeleteCharacterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCharacterRequest& operator=(const DeleteCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCharacterRequest& operator=(DeleteCharacterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCharacterRequest& default_instance();

  static inline const DeleteCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCharacterRequest*>(
               &_DeleteCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteCharacterRequest& a, DeleteCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCharacterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCharacterRequest* New() const final {
    return CreateMaybeMessage<DeleteCharacterRequest>(nullptr);
  }

  DeleteCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCharacterRequest& from);
  void MergeFrom(const DeleteCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteCharacterRequest";
  }
  protected:
  explicit DeleteCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class DeployCharacterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeployCharacterRequest) */ {
 public:
  inline DeployCharacterRequest() : DeployCharacterRequest(nullptr) {}
  virtual ~DeployCharacterRequest();

  DeployCharacterRequest(const DeployCharacterRequest& from);
  DeployCharacterRequest(DeployCharacterRequest&& from) noexcept
    : DeployCharacterRequest() {
    *this = ::std::move(from);
  }

  inline DeployCharacterRequest& operator=(const DeployCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployCharacterRequest& operator=(DeployCharacterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeployCharacterRequest& default_instance();

  static inline const DeployCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const DeployCharacterRequest*>(
               &_DeployCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeployCharacterRequest& a, DeployCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployCharacterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeployCharacterRequest* New() const final {
    return CreateMaybeMessage<DeployCharacterRequest>(nullptr);
  }

  DeployCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeployCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeployCharacterRequest& from);
  void MergeFrom(const DeployCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeployCharacterRequest";
  }
  protected:
  explicit DeployCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeployCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class ListCharactersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListCharactersResponse) */ {
 public:
  inline ListCharactersResponse() : ListCharactersResponse(nullptr) {}
  virtual ~ListCharactersResponse();

  ListCharactersResponse(const ListCharactersResponse& from);
  ListCharactersResponse(ListCharactersResponse&& from) noexcept
    : ListCharactersResponse() {
    *this = ::std::move(from);
  }

  inline ListCharactersResponse& operator=(const ListCharactersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCharactersResponse& operator=(ListCharactersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCharactersResponse& default_instance();

  static inline const ListCharactersResponse* internal_default_instance() {
    return reinterpret_cast<const ListCharactersResponse*>(
               &_ListCharactersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListCharactersResponse& a, ListCharactersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCharactersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCharactersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCharactersResponse* New() const final {
    return CreateMaybeMessage<ListCharactersResponse>(nullptr);
  }

  ListCharactersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCharactersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCharactersResponse& from);
  void MergeFrom(const ListCharactersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCharactersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListCharactersResponse";
  }
  protected:
  explicit ListCharactersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Character characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::ai::inworld::studio::v1alpha::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >*
      mutable_characters();
  private:
  const ::ai::inworld::studio::v1alpha::Character& _internal_characters(int index) const;
  ::ai::inworld::studio::v1alpha::Character* _internal_add_characters();
  public:
  const ::ai::inworld::studio::v1alpha::Character& characters(int index) const;
  ::ai::inworld::studio::v1alpha::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >&
      characters() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListCharactersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character > characters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class ReplaceCharacterRpmModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest) */ {
 public:
  inline ReplaceCharacterRpmModelRequest() : ReplaceCharacterRpmModelRequest(nullptr) {}
  virtual ~ReplaceCharacterRpmModelRequest();

  ReplaceCharacterRpmModelRequest(const ReplaceCharacterRpmModelRequest& from);
  ReplaceCharacterRpmModelRequest(ReplaceCharacterRpmModelRequest&& from) noexcept
    : ReplaceCharacterRpmModelRequest() {
    *this = ::std::move(from);
  }

  inline ReplaceCharacterRpmModelRequest& operator=(const ReplaceCharacterRpmModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceCharacterRpmModelRequest& operator=(ReplaceCharacterRpmModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaceCharacterRpmModelRequest& default_instance();

  static inline const ReplaceCharacterRpmModelRequest* internal_default_instance() {
    return reinterpret_cast<const ReplaceCharacterRpmModelRequest*>(
               &_ReplaceCharacterRpmModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReplaceCharacterRpmModelRequest& a, ReplaceCharacterRpmModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceCharacterRpmModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceCharacterRpmModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaceCharacterRpmModelRequest* New() const final {
    return CreateMaybeMessage<ReplaceCharacterRpmModelRequest>(nullptr);
  }

  ReplaceCharacterRpmModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaceCharacterRpmModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaceCharacterRpmModelRequest& from);
  void MergeFrom(const ReplaceCharacterRpmModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceCharacterRpmModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest";
  }
  protected:
  explicit ReplaceCharacterRpmModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kRpmModelUriFieldNumber = 2,
  };
  // string character = 1 [(.ai.inworld.options.examples) = {
  void clear_character();
  const std::string& character() const;
  void set_character(const std::string& value);
  void set_character(std::string&& value);
  void set_character(const char* value);
  void set_character(const char* value, size_t size);
  std::string* mutable_character();
  std::string* release_character();
  void set_allocated_character(std::string* character);
  private:
  const std::string& _internal_character() const;
  void _internal_set_character(const std::string& value);
  std::string* _internal_mutable_character();
  public:

  // string rpm_model_uri = 2;
  void clear_rpm_model_uri();
  const std::string& rpm_model_uri() const;
  void set_rpm_model_uri(const std::string& value);
  void set_rpm_model_uri(std::string&& value);
  void set_rpm_model_uri(const char* value);
  void set_rpm_model_uri(const char* value, size_t size);
  std::string* mutable_rpm_model_uri();
  std::string* release_rpm_model_uri();
  void set_allocated_rpm_model_uri(std::string* rpm_model_uri);
  private:
  const std::string& _internal_rpm_model_uri() const;
  void _internal_set_rpm_model_uri(const std::string& value);
  std::string* _internal_mutable_rpm_model_uri();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpm_model_uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class PreviewPromptTemplateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest) */ {
 public:
  inline PreviewPromptTemplateRequest() : PreviewPromptTemplateRequest(nullptr) {}
  virtual ~PreviewPromptTemplateRequest();

  PreviewPromptTemplateRequest(const PreviewPromptTemplateRequest& from);
  PreviewPromptTemplateRequest(PreviewPromptTemplateRequest&& from) noexcept
    : PreviewPromptTemplateRequest() {
    *this = ::std::move(from);
  }

  inline PreviewPromptTemplateRequest& operator=(const PreviewPromptTemplateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewPromptTemplateRequest& operator=(PreviewPromptTemplateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviewPromptTemplateRequest& default_instance();

  static inline const PreviewPromptTemplateRequest* internal_default_instance() {
    return reinterpret_cast<const PreviewPromptTemplateRequest*>(
               &_PreviewPromptTemplateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PreviewPromptTemplateRequest& a, PreviewPromptTemplateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewPromptTemplateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewPromptTemplateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviewPromptTemplateRequest* New() const final {
    return CreateMaybeMessage<PreviewPromptTemplateRequest>(nullptr);
  }

  PreviewPromptTemplateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviewPromptTemplateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviewPromptTemplateRequest& from);
  void MergeFrom(const PreviewPromptTemplateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewPromptTemplateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest";
  }
  protected:
  explicit PreviewPromptTemplateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kTemplateFieldNumber = 2,
  };
  // string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_character();
  const std::string& character() const;
  void set_character(const std::string& value);
  void set_character(std::string&& value);
  void set_character(const char* value);
  void set_character(const char* value, size_t size);
  std::string* mutable_character();
  std::string* release_character();
  void set_allocated_character(std::string* character);
  private:
  const std::string& _internal_character() const;
  void _internal_set_character(const std::string& value);
  std::string* _internal_mutable_character();
  public:

  // string template = 2;
  void clear_template_();
  const std::string& template_() const;
  void set_template_(const std::string& value);
  void set_template_(std::string&& value);
  void set_template_(const char* value);
  void set_template_(const char* value, size_t size);
  std::string* mutable_template_();
  std::string* release_template_();
  void set_allocated_template_(std::string* template_);
  private:
  const std::string& _internal_template_() const;
  void _internal_set_template_(const std::string& value);
  std::string* _internal_mutable_template_();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class PreviewPromptTempalteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse) */ {
 public:
  inline PreviewPromptTempalteResponse() : PreviewPromptTempalteResponse(nullptr) {}
  virtual ~PreviewPromptTempalteResponse();

  PreviewPromptTempalteResponse(const PreviewPromptTempalteResponse& from);
  PreviewPromptTempalteResponse(PreviewPromptTempalteResponse&& from) noexcept
    : PreviewPromptTempalteResponse() {
    *this = ::std::move(from);
  }

  inline PreviewPromptTempalteResponse& operator=(const PreviewPromptTempalteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreviewPromptTempalteResponse& operator=(PreviewPromptTempalteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PreviewPromptTempalteResponse& default_instance();

  static inline const PreviewPromptTempalteResponse* internal_default_instance() {
    return reinterpret_cast<const PreviewPromptTempalteResponse*>(
               &_PreviewPromptTempalteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PreviewPromptTempalteResponse& a, PreviewPromptTempalteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PreviewPromptTempalteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreviewPromptTempalteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PreviewPromptTempalteResponse* New() const final {
    return CreateMaybeMessage<PreviewPromptTempalteResponse>(nullptr);
  }

  PreviewPromptTempalteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PreviewPromptTempalteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PreviewPromptTempalteResponse& from);
  void MergeFrom(const PreviewPromptTempalteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreviewPromptTempalteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse";
  }
  protected:
  explicit PreviewPromptTempalteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 2,
    kPromptFieldNumber = 1,
  };
  // repeated string errors = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, size_t size);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();
  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();
  public:

  // string prompt = 1;
  void clear_prompt();
  const std::string& prompt() const;
  void set_prompt(const std::string& value);
  void set_prompt(std::string&& value);
  void set_prompt(const char* value);
  void set_prompt(const char* value, size_t size);
  std::string* mutable_prompt();
  std::string* release_prompt();
  void set_allocated_prompt(std::string* prompt);
  private:
  const std::string& _internal_prompt() const;
  void _internal_set_prompt(const std::string& value);
  std::string* _internal_mutable_prompt();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prompt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class ShareCharacterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ShareCharacterRequest) */ {
 public:
  inline ShareCharacterRequest() : ShareCharacterRequest(nullptr) {}
  virtual ~ShareCharacterRequest();

  ShareCharacterRequest(const ShareCharacterRequest& from);
  ShareCharacterRequest(ShareCharacterRequest&& from) noexcept
    : ShareCharacterRequest() {
    *this = ::std::move(from);
  }

  inline ShareCharacterRequest& operator=(const ShareCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareCharacterRequest& operator=(ShareCharacterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShareCharacterRequest& default_instance();

  static inline const ShareCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const ShareCharacterRequest*>(
               &_ShareCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ShareCharacterRequest& a, ShareCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareCharacterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareCharacterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShareCharacterRequest* New() const final {
    return CreateMaybeMessage<ShareCharacterRequest>(nullptr);
  }

  ShareCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShareCharacterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShareCharacterRequest& from);
  void MergeFrom(const ShareCharacterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShareCharacterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ShareCharacterRequest";
  }
  protected:
  explicit ShareCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalIdsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string external_ids = 2;
  int external_ids_size() const;
  private:
  int _internal_external_ids_size() const;
  public:
  void clear_external_ids();
  const std::string& external_ids(int index) const;
  std::string* mutable_external_ids(int index);
  void set_external_ids(int index, const std::string& value);
  void set_external_ids(int index, std::string&& value);
  void set_external_ids(int index, const char* value);
  void set_external_ids(int index, const char* value, size_t size);
  std::string* add_external_ids();
  void add_external_ids(const std::string& value);
  void add_external_ids(std::string&& value);
  void add_external_ids(const char* value);
  void add_external_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_ids();
  private:
  const std::string& _internal_external_ids(int index) const;
  std::string* _internal_add_external_ids();
  public:

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ShareCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class ListSharedCharactersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListSharedCharactersRequest) */ {
 public:
  inline ListSharedCharactersRequest() : ListSharedCharactersRequest(nullptr) {}
  virtual ~ListSharedCharactersRequest();

  ListSharedCharactersRequest(const ListSharedCharactersRequest& from);
  ListSharedCharactersRequest(ListSharedCharactersRequest&& from) noexcept
    : ListSharedCharactersRequest() {
    *this = ::std::move(from);
  }

  inline ListSharedCharactersRequest& operator=(const ListSharedCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSharedCharactersRequest& operator=(ListSharedCharactersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSharedCharactersRequest& default_instance();

  static inline const ListSharedCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const ListSharedCharactersRequest*>(
               &_ListSharedCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListSharedCharactersRequest& a, ListSharedCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSharedCharactersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSharedCharactersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSharedCharactersRequest* New() const final {
    return CreateMaybeMessage<ListSharedCharactersRequest>(nullptr);
  }

  ListSharedCharactersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSharedCharactersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSharedCharactersRequest& from);
  void MergeFrom(const ListSharedCharactersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSharedCharactersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListSharedCharactersRequest";
  }
  protected:
  explicit ListSharedCharactersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListSharedCharactersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class ListSharedCharactersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListSharedCharactersResponse) */ {
 public:
  inline ListSharedCharactersResponse() : ListSharedCharactersResponse(nullptr) {}
  virtual ~ListSharedCharactersResponse();

  ListSharedCharactersResponse(const ListSharedCharactersResponse& from);
  ListSharedCharactersResponse(ListSharedCharactersResponse&& from) noexcept
    : ListSharedCharactersResponse() {
    *this = ::std::move(from);
  }

  inline ListSharedCharactersResponse& operator=(const ListSharedCharactersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSharedCharactersResponse& operator=(ListSharedCharactersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSharedCharactersResponse& default_instance();

  static inline const ListSharedCharactersResponse* internal_default_instance() {
    return reinterpret_cast<const ListSharedCharactersResponse*>(
               &_ListSharedCharactersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListSharedCharactersResponse& a, ListSharedCharactersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSharedCharactersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSharedCharactersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSharedCharactersResponse* New() const final {
    return CreateMaybeMessage<ListSharedCharactersResponse>(nullptr);
  }

  ListSharedCharactersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSharedCharactersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSharedCharactersResponse& from);
  void MergeFrom(const ListSharedCharactersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSharedCharactersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListSharedCharactersResponse";
  }
  protected:
  explicit ListSharedCharactersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedCharactersFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.Character shared_characters = 1;
  int shared_characters_size() const;
  private:
  int _internal_shared_characters_size() const;
  public:
  void clear_shared_characters();
  ::ai::inworld::studio::v1alpha::Character* mutable_shared_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >*
      mutable_shared_characters();
  private:
  const ::ai::inworld::studio::v1alpha::Character& _internal_shared_characters(int index) const;
  ::ai::inworld::studio::v1alpha::Character* _internal_add_shared_characters();
  public:
  const ::ai::inworld::studio::v1alpha::Character& shared_characters(int index) const;
  ::ai::inworld::studio::v1alpha::Character* add_shared_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >&
      shared_characters() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListSharedCharactersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character > shared_characters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CharacterAdvancedSettings_ConversationConfig_EngineSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec) */ {
 public:
  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec() : CharacterAdvancedSettings_ConversationConfig_EngineSpec(nullptr) {}
  virtual ~CharacterAdvancedSettings_ConversationConfig_EngineSpec();

  CharacterAdvancedSettings_ConversationConfig_EngineSpec(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from);
  CharacterAdvancedSettings_ConversationConfig_EngineSpec(CharacterAdvancedSettings_ConversationConfig_EngineSpec&& from) noexcept
    : CharacterAdvancedSettings_ConversationConfig_EngineSpec() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec& operator=(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec& operator=(CharacterAdvancedSettings_ConversationConfig_EngineSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterAdvancedSettings_ConversationConfig_EngineSpec& default_instance();

  static inline const CharacterAdvancedSettings_ConversationConfig_EngineSpec* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings_ConversationConfig_EngineSpec*>(
               &_CharacterAdvancedSettings_ConversationConfig_EngineSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CharacterAdvancedSettings_ConversationConfig_EngineSpec& a, CharacterAdvancedSettings_ConversationConfig_EngineSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings_ConversationConfig_EngineSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings_ConversationConfig_EngineSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterAdvancedSettings_ConversationConfig_EngineSpec* New() const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_ConversationConfig_EngineSpec>(nullptr);
  }

  CharacterAdvancedSettings_ConversationConfig_EngineSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_ConversationConfig_EngineSpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from);
  void MergeFrom(const CharacterAdvancedSettings_ConversationConfig_EngineSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterAdvancedSettings_ConversationConfig_EngineSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec";
  }
  protected:
  explicit CharacterAdvancedSettings_ConversationConfig_EngineSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kMaxTokensFieldNumber = 3,
    kFrequencyPenaltyFieldNumber = 4,
    kPresencePenaltyFieldNumber = 5,
  };
  // string engine = 1;
  void clear_engine();
  const std::string& engine() const;
  void set_engine(const std::string& value);
  void set_engine(std::string&& value);
  void set_engine(const char* value);
  void set_engine(const char* value, size_t size);
  std::string* mutable_engine();
  std::string* release_engine();
  void set_allocated_engine(std::string* engine);
  private:
  const std::string& _internal_engine() const;
  void _internal_set_engine(const std::string& value);
  std::string* _internal_mutable_engine();
  public:

  // float temperature = 2;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // int32 max_tokens = 3;
  void clear_max_tokens();
  ::PROTOBUF_NAMESPACE_ID::int32 max_tokens() const;
  void set_max_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_tokens() const;
  void _internal_set_max_tokens(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float frequency_penalty = 4;
  void clear_frequency_penalty();
  float frequency_penalty() const;
  void set_frequency_penalty(float value);
  private:
  float _internal_frequency_penalty() const;
  void _internal_set_frequency_penalty(float value);
  public:

  // float presence_penalty = 5;
  void clear_presence_penalty();
  float presence_penalty() const;
  void set_presence_penalty(float value);
  private:
  float _internal_presence_penalty() const;
  void _internal_set_presence_penalty(float value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_;
  float temperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_tokens_;
  float frequency_penalty_;
  float presence_penalty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CharacterAdvancedSettings_ConversationConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig) */ {
 public:
  inline CharacterAdvancedSettings_ConversationConfig() : CharacterAdvancedSettings_ConversationConfig(nullptr) {}
  virtual ~CharacterAdvancedSettings_ConversationConfig();

  CharacterAdvancedSettings_ConversationConfig(const CharacterAdvancedSettings_ConversationConfig& from);
  CharacterAdvancedSettings_ConversationConfig(CharacterAdvancedSettings_ConversationConfig&& from) noexcept
    : CharacterAdvancedSettings_ConversationConfig() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings_ConversationConfig& operator=(const CharacterAdvancedSettings_ConversationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings_ConversationConfig& operator=(CharacterAdvancedSettings_ConversationConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterAdvancedSettings_ConversationConfig& default_instance();

  static inline const CharacterAdvancedSettings_ConversationConfig* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings_ConversationConfig*>(
               &_CharacterAdvancedSettings_ConversationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CharacterAdvancedSettings_ConversationConfig& a, CharacterAdvancedSettings_ConversationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings_ConversationConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings_ConversationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterAdvancedSettings_ConversationConfig* New() const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_ConversationConfig>(nullptr);
  }

  CharacterAdvancedSettings_ConversationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_ConversationConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterAdvancedSettings_ConversationConfig& from);
  void MergeFrom(const CharacterAdvancedSettings_ConversationConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterAdvancedSettings_ConversationConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig";
  }
  protected:
  explicit CharacterAdvancedSettings_ConversationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CharacterAdvancedSettings_ConversationConfig_EngineSpec EngineSpec;

  // accessors -------------------------------------------------------

  enum : int {
    kEngineSpecFieldNumber = 1,
  };
  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec engine_spec = 1;
  bool has_engine_spec() const;
  private:
  bool _internal_has_engine_spec() const;
  public:
  void clear_engine_spec();
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& engine_spec() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* release_engine_spec();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* mutable_engine_spec();
  void set_allocated_engine_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* engine_spec);
  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& _internal_engine_spec() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* _internal_mutable_engine_spec();
  public:
  void unsafe_arena_set_allocated_engine_spec(
      ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* engine_spec);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* unsafe_arena_release_engine_spec();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* engine_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CharacterAdvancedSettings_SafetySpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec) */ {
 public:
  inline CharacterAdvancedSettings_SafetySpec() : CharacterAdvancedSettings_SafetySpec(nullptr) {}
  virtual ~CharacterAdvancedSettings_SafetySpec();

  CharacterAdvancedSettings_SafetySpec(const CharacterAdvancedSettings_SafetySpec& from);
  CharacterAdvancedSettings_SafetySpec(CharacterAdvancedSettings_SafetySpec&& from) noexcept
    : CharacterAdvancedSettings_SafetySpec() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings_SafetySpec& operator=(const CharacterAdvancedSettings_SafetySpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings_SafetySpec& operator=(CharacterAdvancedSettings_SafetySpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterAdvancedSettings_SafetySpec& default_instance();

  static inline const CharacterAdvancedSettings_SafetySpec* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings_SafetySpec*>(
               &_CharacterAdvancedSettings_SafetySpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CharacterAdvancedSettings_SafetySpec& a, CharacterAdvancedSettings_SafetySpec& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings_SafetySpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings_SafetySpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterAdvancedSettings_SafetySpec* New() const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_SafetySpec>(nullptr);
  }

  CharacterAdvancedSettings_SafetySpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings_SafetySpec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterAdvancedSettings_SafetySpec& from);
  void MergeFrom(const CharacterAdvancedSettings_SafetySpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterAdvancedSettings_SafetySpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec";
  }
  protected:
  explicit CharacterAdvancedSettings_SafetySpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedTopicsFieldNumber = 1,
  };
  // repeated .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetyTopicName allowed_topics = 1;
  int allowed_topics_size() const;
  private:
  int _internal_allowed_topics_size() const;
  public:
  void clear_allowed_topics();
  private:
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName _internal_allowed_topics(int index) const;
  void _internal_add_allowed_topics(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_allowed_topics();
  public:
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName allowed_topics(int index) const;
  void set_allowed_topics(int index, ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value);
  void add_allowed_topics(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& allowed_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_allowed_topics();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> allowed_topics_;
  mutable std::atomic<int> _allowed_topics_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CharacterAdvancedSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterAdvancedSettings) */ {
 public:
  inline CharacterAdvancedSettings() : CharacterAdvancedSettings(nullptr) {}
  virtual ~CharacterAdvancedSettings();

  CharacterAdvancedSettings(const CharacterAdvancedSettings& from);
  CharacterAdvancedSettings(CharacterAdvancedSettings&& from) noexcept
    : CharacterAdvancedSettings() {
    *this = ::std::move(from);
  }

  inline CharacterAdvancedSettings& operator=(const CharacterAdvancedSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAdvancedSettings& operator=(CharacterAdvancedSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterAdvancedSettings& default_instance();

  static inline const CharacterAdvancedSettings* internal_default_instance() {
    return reinterpret_cast<const CharacterAdvancedSettings*>(
               &_CharacterAdvancedSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CharacterAdvancedSettings& a, CharacterAdvancedSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAdvancedSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAdvancedSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterAdvancedSettings* New() const final {
    return CreateMaybeMessage<CharacterAdvancedSettings>(nullptr);
  }

  CharacterAdvancedSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterAdvancedSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterAdvancedSettings& from);
  void MergeFrom(const CharacterAdvancedSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterAdvancedSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterAdvancedSettings";
  }
  protected:
  explicit CharacterAdvancedSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CharacterAdvancedSettings_ConversationConfig ConversationConfig;
  typedef CharacterAdvancedSettings_SafetySpec SafetySpec;

  typedef CharacterAdvancedSettings_SafetyTopicName SafetyTopicName;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_UNSPECIFIED =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_UNSPECIFIED;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_SAFE_TOPIC =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SAFE_TOPIC;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_POLITICS =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_POLITICS;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_FINANCES =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_FINANCES;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_DISGUSTING_STUFF =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_DISGUSTING_STUFF;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_GENDER_BIAS =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_GENDER_BIAS;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_SUBSTANCE_USE =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_SUBSTANCE_USE;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_HEALTH_ADVICE =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_HEALTH_ADVICE;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_RELIGION =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELIGION;
  static constexpr SafetyTopicName SAFETY_TOPIC_NAME_RELATIONSHIPS =
    CharacterAdvancedSettings_SafetyTopicName_SAFETY_TOPIC_NAME_RELATIONSHIPS;
  static inline bool SafetyTopicName_IsValid(int value) {
    return CharacterAdvancedSettings_SafetyTopicName_IsValid(value);
  }
  static constexpr SafetyTopicName SafetyTopicName_MIN =
    CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MIN;
  static constexpr SafetyTopicName SafetyTopicName_MAX =
    CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_MAX;
  static constexpr int SafetyTopicName_ARRAYSIZE =
    CharacterAdvancedSettings_SafetyTopicName_SafetyTopicName_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SafetyTopicName_descriptor() {
    return CharacterAdvancedSettings_SafetyTopicName_descriptor();
  }
  template<typename T>
  static inline const std::string& SafetyTopicName_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SafetyTopicName>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SafetyTopicName_Name.");
    return CharacterAdvancedSettings_SafetyTopicName_Name(enum_t_value);
  }
  static inline bool SafetyTopicName_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SafetyTopicName* value) {
    return CharacterAdvancedSettings_SafetyTopicName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCustomPromptTemplateFieldNumber = 4,
    kConversationConfigFieldNumber = 2,
    kSpeechSafetySpecFieldNumber = 5,
  };
  // string name = 1 [(.ai.inworld.options.examples) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string custom_prompt_template = 4;
  void clear_custom_prompt_template();
  const std::string& custom_prompt_template() const;
  void set_custom_prompt_template(const std::string& value);
  void set_custom_prompt_template(std::string&& value);
  void set_custom_prompt_template(const char* value);
  void set_custom_prompt_template(const char* value, size_t size);
  std::string* mutable_custom_prompt_template();
  std::string* release_custom_prompt_template();
  void set_allocated_custom_prompt_template(std::string* custom_prompt_template);
  private:
  const std::string& _internal_custom_prompt_template() const;
  void _internal_set_custom_prompt_template(const std::string& value);
  std::string* _internal_mutable_custom_prompt_template();
  public:

  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig conversation_config = 2;
  bool has_conversation_config() const;
  private:
  bool _internal_has_conversation_config() const;
  public:
  void clear_conversation_config();
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& conversation_config() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* release_conversation_config();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* mutable_conversation_config();
  void set_allocated_conversation_config(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* conversation_config);
  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& _internal_conversation_config() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* _internal_mutable_conversation_config();
  public:
  void unsafe_arena_set_allocated_conversation_config(
      ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* conversation_config);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* unsafe_arena_release_conversation_config();

  // .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec speech_safety_spec = 5;
  bool has_speech_safety_spec() const;
  private:
  bool _internal_has_speech_safety_spec() const;
  public:
  void clear_speech_safety_spec();
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& speech_safety_spec() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* release_speech_safety_spec();
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* mutable_speech_safety_spec();
  void set_allocated_speech_safety_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* speech_safety_spec);
  private:
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& _internal_speech_safety_spec() const;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* _internal_mutable_speech_safety_spec();
  public:
  void unsafe_arena_set_allocated_speech_safety_spec(
      ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* speech_safety_spec);
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* unsafe_arena_release_speech_safety_spec();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterAdvancedSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_prompt_template_;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* conversation_config_;
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* speech_safety_spec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterShareInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest) */ {
 public:
  inline GetCharacterShareInfoRequest() : GetCharacterShareInfoRequest(nullptr) {}
  virtual ~GetCharacterShareInfoRequest();

  GetCharacterShareInfoRequest(const GetCharacterShareInfoRequest& from);
  GetCharacterShareInfoRequest(GetCharacterShareInfoRequest&& from) noexcept
    : GetCharacterShareInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterShareInfoRequest& operator=(const GetCharacterShareInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterShareInfoRequest& operator=(GetCharacterShareInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCharacterShareInfoRequest& default_instance();

  static inline const GetCharacterShareInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterShareInfoRequest*>(
               &_GetCharacterShareInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetCharacterShareInfoRequest& a, GetCharacterShareInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterShareInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterShareInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCharacterShareInfoRequest* New() const final {
    return CreateMaybeMessage<GetCharacterShareInfoRequest>(nullptr);
  }

  GetCharacterShareInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCharacterShareInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCharacterShareInfoRequest& from);
  void MergeFrom(const GetCharacterShareInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterShareInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest";
  }
  protected:
  explicit GetCharacterShareInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CharacterShareInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CharacterShareInfo) */ {
 public:
  inline CharacterShareInfo() : CharacterShareInfo(nullptr) {}
  virtual ~CharacterShareInfo();

  CharacterShareInfo(const CharacterShareInfo& from);
  CharacterShareInfo(CharacterShareInfo&& from) noexcept
    : CharacterShareInfo() {
    *this = ::std::move(from);
  }

  inline CharacterShareInfo& operator=(const CharacterShareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterShareInfo& operator=(CharacterShareInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CharacterShareInfo& default_instance();

  static inline const CharacterShareInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterShareInfo*>(
               &_CharacterShareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CharacterShareInfo& a, CharacterShareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterShareInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterShareInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CharacterShareInfo* New() const final {
    return CreateMaybeMessage<CharacterShareInfo>(nullptr);
  }

  CharacterShareInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CharacterShareInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CharacterShareInfo& from);
  void MergeFrom(const CharacterShareInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterShareInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CharacterShareInfo";
  }
  protected:
  explicit CharacterShareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExternalIdsFieldNumber = 1,
  };
  // repeated string external_ids = 1;
  int external_ids_size() const;
  private:
  int _internal_external_ids_size() const;
  public:
  void clear_external_ids();
  const std::string& external_ids(int index) const;
  std::string* mutable_external_ids(int index);
  void set_external_ids(int index, const std::string& value);
  void set_external_ids(int index, std::string&& value);
  void set_external_ids(int index, const char* value);
  void set_external_ids(int index, const char* value, size_t size);
  std::string* add_external_ids();
  void add_external_ids(const std::string& value);
  void add_external_ids(std::string&& value);
  void add_external_ids(const char* value);
  void add_external_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& external_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_external_ids();
  private:
  const std::string& _internal_external_ids(int index) const;
  std::string* _internal_add_external_ids();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CharacterShareInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> external_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CheckDeployInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CheckDeployInfoRequest) */ {
 public:
  inline CheckDeployInfoRequest() : CheckDeployInfoRequest(nullptr) {}
  virtual ~CheckDeployInfoRequest();

  CheckDeployInfoRequest(const CheckDeployInfoRequest& from);
  CheckDeployInfoRequest(CheckDeployInfoRequest&& from) noexcept
    : CheckDeployInfoRequest() {
    *this = ::std::move(from);
  }

  inline CheckDeployInfoRequest& operator=(const CheckDeployInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDeployInfoRequest& operator=(CheckDeployInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDeployInfoRequest& default_instance();

  static inline const CheckDeployInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CheckDeployInfoRequest*>(
               &_CheckDeployInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CheckDeployInfoRequest& a, CheckDeployInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDeployInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDeployInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDeployInfoRequest* New() const final {
    return CreateMaybeMessage<CheckDeployInfoRequest>(nullptr);
  }

  CheckDeployInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDeployInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDeployInfoRequest& from);
  void MergeFrom(const CheckDeployInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDeployInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CheckDeployInfoRequest";
  }
  protected:
  explicit CheckDeployInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_character();
  const std::string& character() const;
  void set_character(const std::string& value);
  void set_character(std::string&& value);
  void set_character(const char* value);
  void set_character(const char* value, size_t size);
  std::string* mutable_character();
  std::string* release_character();
  void set_allocated_character(std::string* character);
  private:
  const std::string& _internal_character() const;
  void _internal_set_character(const std::string& value);
  std::string* _internal_mutable_character();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CheckDeployInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// -------------------------------------------------------------------

class CheckDeployInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.CheckDeployInfoResponse) */ {
 public:
  inline CheckDeployInfoResponse() : CheckDeployInfoResponse(nullptr) {}
  virtual ~CheckDeployInfoResponse();

  CheckDeployInfoResponse(const CheckDeployInfoResponse& from);
  CheckDeployInfoResponse(CheckDeployInfoResponse&& from) noexcept
    : CheckDeployInfoResponse() {
    *this = ::std::move(from);
  }

  inline CheckDeployInfoResponse& operator=(const CheckDeployInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDeployInfoResponse& operator=(CheckDeployInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDeployInfoResponse& default_instance();

  static inline const CheckDeployInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CheckDeployInfoResponse*>(
               &_CheckDeployInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CheckDeployInfoResponse& a, CheckDeployInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDeployInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDeployInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDeployInfoResponse* New() const final {
    return CreateMaybeMessage<CheckDeployInfoResponse>(nullptr);
  }

  CheckDeployInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDeployInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDeployInfoResponse& from);
  void MergeFrom(const CheckDeployInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDeployInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.CheckDeployInfoResponse";
  }
  protected:
  explicit CheckDeployInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_characters_2eproto);
    return ::descriptor_table_characters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsFreshFieldNumber = 1,
  };
  // bool is_fresh = 1;
  void clear_is_fresh();
  bool is_fresh() const;
  void set_is_fresh(bool value);
  private:
  bool _internal_is_fresh() const;
  void _internal_set_is_fresh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.CheckDeployInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_fresh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_characters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Character_CharacterDescription

// string given_name = 1 [(.ai.inworld.options.examples) = {
inline void Character_CharacterDescription::clear_given_name() {
  given_name_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::given_name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
  return _internal_given_name();
}
inline void Character_CharacterDescription::set_given_name(const std::string& value) {
  _internal_set_given_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}
inline std::string* Character_CharacterDescription::mutable_given_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
  return _internal_mutable_given_name();
}
inline const std::string& Character_CharacterDescription::_internal_given_name() const {
  return given_name_.Get();
}
inline void Character_CharacterDescription::_internal_set_given_name(const std::string& value) {
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_given_name(std::string&& value) {
  
  given_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}
inline void Character_CharacterDescription::set_given_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}
inline void Character_CharacterDescription::set_given_name(const char* value,
    size_t size) {
  
  given_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}
inline std::string* Character_CharacterDescription::_internal_mutable_given_name() {
  
  return given_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_given_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
  return given_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_given_name(std::string* given_name) {
  if (given_name != nullptr) {
    
  } else {
    
  }
  given_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), given_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.given_name)
}

// string description = 2;
inline void Character_CharacterDescription::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
  return _internal_description();
}
inline void Character_CharacterDescription::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}
inline std::string* Character_CharacterDescription::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
  return _internal_mutable_description();
}
inline const std::string& Character_CharacterDescription::_internal_description() const {
  return description_.Get();
}
inline void Character_CharacterDescription::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}
inline void Character_CharacterDescription::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}
inline void Character_CharacterDescription::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}
inline std::string* Character_CharacterDescription::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.description)
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.Pronoun pronoun = 3;
inline void Character_CharacterDescription::clear_pronoun() {
  pronoun_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun Character_CharacterDescription::_internal_pronoun() const {
  return static_cast< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun >(pronoun_);
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun Character_CharacterDescription::pronoun() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.pronoun)
  return _internal_pronoun();
}
inline void Character_CharacterDescription::_internal_set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value) {
  
  pronoun_ = value;
}
inline void Character_CharacterDescription::set_pronoun(::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun value) {
  _internal_set_pronoun(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.pronoun)
}

// repeated string nicknames = 4;
inline int Character_CharacterDescription::_internal_nicknames_size() const {
  return nicknames_.size();
}
inline int Character_CharacterDescription::nicknames_size() const {
  return _internal_nicknames_size();
}
inline void Character_CharacterDescription::clear_nicknames() {
  nicknames_.Clear();
}
inline std::string* Character_CharacterDescription::add_nicknames() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return _internal_add_nicknames();
}
inline const std::string& Character_CharacterDescription::_internal_nicknames(int index) const {
  return nicknames_.Get(index);
}
inline const std::string& Character_CharacterDescription::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return _internal_nicknames(index);
}
inline std::string* Character_CharacterDescription::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return nicknames_.Mutable(index);
}
inline void Character_CharacterDescription::set_nicknames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  nicknames_.Mutable(index)->assign(value);
}
inline void Character_CharacterDescription::set_nicknames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  nicknames_.Mutable(index)->assign(std::move(value));
}
inline void Character_CharacterDescription::set_nicknames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nicknames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::set_nicknames(int index, const char* value, size_t size) {
  nicknames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline std::string* Character_CharacterDescription::_internal_add_nicknames() {
  return nicknames_.Add();
}
inline void Character_CharacterDescription::add_nicknames(const std::string& value) {
  nicknames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(std::string&& value) {
  nicknames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nicknames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline void Character_CharacterDescription::add_nicknames(const char* value, size_t size) {
  nicknames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character_CharacterDescription::nicknames() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return nicknames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character_CharacterDescription::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.nicknames)
  return &nicknames_;
}

// string motivation = 5;
inline void Character_CharacterDescription::clear_motivation() {
  motivation_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::motivation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
  return _internal_motivation();
}
inline void Character_CharacterDescription::set_motivation(const std::string& value) {
  _internal_set_motivation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}
inline std::string* Character_CharacterDescription::mutable_motivation() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
  return _internal_mutable_motivation();
}
inline const std::string& Character_CharacterDescription::_internal_motivation() const {
  return motivation_.Get();
}
inline void Character_CharacterDescription::_internal_set_motivation(const std::string& value) {
  
  motivation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_motivation(std::string&& value) {
  
  motivation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}
inline void Character_CharacterDescription::set_motivation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  motivation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}
inline void Character_CharacterDescription::set_motivation(const char* value,
    size_t size) {
  
  motivation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}
inline std::string* Character_CharacterDescription::_internal_mutable_motivation() {
  
  return motivation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_motivation() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
  return motivation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_motivation(std::string* motivation) {
  if (motivation != nullptr) {
    
  } else {
    
  }
  motivation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), motivation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.motivation)
}

// string wikipedia_uri = 6;
inline void Character_CharacterDescription::clear_wikipedia_uri() {
  wikipedia_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::wikipedia_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
  return _internal_wikipedia_uri();
}
inline void Character_CharacterDescription::set_wikipedia_uri(const std::string& value) {
  _internal_set_wikipedia_uri(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}
inline std::string* Character_CharacterDescription::mutable_wikipedia_uri() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
  return _internal_mutable_wikipedia_uri();
}
inline const std::string& Character_CharacterDescription::_internal_wikipedia_uri() const {
  return wikipedia_uri_.Get();
}
inline void Character_CharacterDescription::_internal_set_wikipedia_uri(const std::string& value) {
  
  wikipedia_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_wikipedia_uri(std::string&& value) {
  
  wikipedia_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}
inline void Character_CharacterDescription::set_wikipedia_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wikipedia_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}
inline void Character_CharacterDescription::set_wikipedia_uri(const char* value,
    size_t size) {
  
  wikipedia_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}
inline std::string* Character_CharacterDescription::_internal_mutable_wikipedia_uri() {
  
  return wikipedia_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_wikipedia_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
  return wikipedia_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_wikipedia_uri(std::string* wikipedia_uri) {
  if (wikipedia_uri != nullptr) {
    
  } else {
    
  }
  wikipedia_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wikipedia_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.wikipedia_uri)
}

// string player_role = 7;
inline void Character_CharacterDescription::clear_player_role() {
  player_role_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::player_role() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
  return _internal_player_role();
}
inline void Character_CharacterDescription::set_player_role(const std::string& value) {
  _internal_set_player_role(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
}
inline std::string* Character_CharacterDescription::mutable_player_role() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
  return _internal_mutable_player_role();
}
inline const std::string& Character_CharacterDescription::_internal_player_role() const {
  return player_role_.Get();
}
inline void Character_CharacterDescription::_internal_set_player_role(const std::string& value) {
  
  player_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_player_role(std::string&& value) {
  
  player_role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
}
inline void Character_CharacterDescription::set_player_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
}
inline void Character_CharacterDescription::set_player_role(const char* value,
    size_t size) {
  
  player_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
}
inline std::string* Character_CharacterDescription::_internal_mutable_player_role() {
  
  return player_role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_player_role() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
  return player_role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_player_role(std::string* player_role) {
  if (player_role != nullptr) {
    
  } else {
    
  }
  player_role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.player_role)
}

// string default_context = 8;
inline void Character_CharacterDescription::clear_default_context() {
  default_context_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::default_context() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
  return _internal_default_context();
}
inline void Character_CharacterDescription::set_default_context(const std::string& value) {
  _internal_set_default_context(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
}
inline std::string* Character_CharacterDescription::mutable_default_context() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
  return _internal_mutable_default_context();
}
inline const std::string& Character_CharacterDescription::_internal_default_context() const {
  return default_context_.Get();
}
inline void Character_CharacterDescription::_internal_set_default_context(const std::string& value) {
  
  default_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_default_context(std::string&& value) {
  
  default_context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
}
inline void Character_CharacterDescription::set_default_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
}
inline void Character_CharacterDescription::set_default_context(const char* value,
    size_t size) {
  
  default_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
}
inline std::string* Character_CharacterDescription::_internal_mutable_default_context() {
  
  return default_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_default_context() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
  return default_context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_default_context(std::string* default_context) {
  if (default_context != nullptr) {
    
  } else {
    
  }
  default_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.default_context)
}

// string example_dialog = 9;
inline void Character_CharacterDescription::clear_example_dialog() {
  example_dialog_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::example_dialog() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
  return _internal_example_dialog();
}
inline void Character_CharacterDescription::set_example_dialog(const std::string& value) {
  _internal_set_example_dialog(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}
inline std::string* Character_CharacterDescription::mutable_example_dialog() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
  return _internal_mutable_example_dialog();
}
inline const std::string& Character_CharacterDescription::_internal_example_dialog() const {
  return example_dialog_.Get();
}
inline void Character_CharacterDescription::_internal_set_example_dialog(const std::string& value) {
  
  example_dialog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_example_dialog(std::string&& value) {
  
  example_dialog_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}
inline void Character_CharacterDescription::set_example_dialog(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  example_dialog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}
inline void Character_CharacterDescription::set_example_dialog(const char* value,
    size_t size) {
  
  example_dialog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}
inline std::string* Character_CharacterDescription::_internal_mutable_example_dialog() {
  
  return example_dialog_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_example_dialog() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
  return example_dialog_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_example_dialog(std::string* example_dialog) {
  if (example_dialog != nullptr) {
    
  } else {
    
  }
  example_dialog_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), example_dialog,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog)
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.ExampleDialogStyle example_dialog_style = 10;
inline void Character_CharacterDescription::clear_example_dialog_style() {
  example_dialog_style_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription::_internal_example_dialog_style() const {
  return static_cast< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle >(example_dialog_style_);
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle Character_CharacterDescription::example_dialog_style() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog_style)
  return _internal_example_dialog_style();
}
inline void Character_CharacterDescription::_internal_set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value) {
  
  example_dialog_style_ = value;
}
inline void Character_CharacterDescription::set_example_dialog_style(::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle value) {
  _internal_set_example_dialog_style(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.example_dialog_style)
}

// repeated string personality_adjectives = 11;
inline int Character_CharacterDescription::_internal_personality_adjectives_size() const {
  return personality_adjectives_.size();
}
inline int Character_CharacterDescription::personality_adjectives_size() const {
  return _internal_personality_adjectives_size();
}
inline void Character_CharacterDescription::clear_personality_adjectives() {
  personality_adjectives_.Clear();
}
inline std::string* Character_CharacterDescription::add_personality_adjectives() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return _internal_add_personality_adjectives();
}
inline const std::string& Character_CharacterDescription::_internal_personality_adjectives(int index) const {
  return personality_adjectives_.Get(index);
}
inline const std::string& Character_CharacterDescription::personality_adjectives(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return _internal_personality_adjectives(index);
}
inline std::string* Character_CharacterDescription::mutable_personality_adjectives(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return personality_adjectives_.Mutable(index);
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  personality_adjectives_.Mutable(index)->assign(value);
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  personality_adjectives_.Mutable(index)->assign(std::move(value));
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  personality_adjectives_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::set_personality_adjectives(int index, const char* value, size_t size) {
  personality_adjectives_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline std::string* Character_CharacterDescription::_internal_add_personality_adjectives() {
  return personality_adjectives_.Add();
}
inline void Character_CharacterDescription::add_personality_adjectives(const std::string& value) {
  personality_adjectives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(std::string&& value) {
  personality_adjectives_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  personality_adjectives_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline void Character_CharacterDescription::add_personality_adjectives(const char* value, size_t size) {
  personality_adjectives_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character_CharacterDescription::personality_adjectives() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return personality_adjectives_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character_CharacterDescription::mutable_personality_adjectives() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.personality_adjectives)
  return &personality_adjectives_;
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription.LifeStage life_stage = 12;
inline void Character_CharacterDescription::clear_life_stage() {
  life_stage_ = 0;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage Character_CharacterDescription::_internal_life_stage() const {
  return static_cast< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage >(life_stage_);
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage Character_CharacterDescription::life_stage() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.life_stage)
  return _internal_life_stage();
}
inline void Character_CharacterDescription::_internal_set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value) {
  
  life_stage_ = value;
}
inline void Character_CharacterDescription::set_life_stage(::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage value) {
  _internal_set_life_stage(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.life_stage)
}

// repeated string hobby_or_interests = 13;
inline int Character_CharacterDescription::_internal_hobby_or_interests_size() const {
  return hobby_or_interests_.size();
}
inline int Character_CharacterDescription::hobby_or_interests_size() const {
  return _internal_hobby_or_interests_size();
}
inline void Character_CharacterDescription::clear_hobby_or_interests() {
  hobby_or_interests_.Clear();
}
inline std::string* Character_CharacterDescription::add_hobby_or_interests() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return _internal_add_hobby_or_interests();
}
inline const std::string& Character_CharacterDescription::_internal_hobby_or_interests(int index) const {
  return hobby_or_interests_.Get(index);
}
inline const std::string& Character_CharacterDescription::hobby_or_interests(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return _internal_hobby_or_interests(index);
}
inline std::string* Character_CharacterDescription::mutable_hobby_or_interests(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return hobby_or_interests_.Mutable(index);
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  hobby_or_interests_.Mutable(index)->assign(value);
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  hobby_or_interests_.Mutable(index)->assign(std::move(value));
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hobby_or_interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::set_hobby_or_interests(int index, const char* value, size_t size) {
  hobby_or_interests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline std::string* Character_CharacterDescription::_internal_add_hobby_or_interests() {
  return hobby_or_interests_.Add();
}
inline void Character_CharacterDescription::add_hobby_or_interests(const std::string& value) {
  hobby_or_interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(std::string&& value) {
  hobby_or_interests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hobby_or_interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline void Character_CharacterDescription::add_hobby_or_interests(const char* value, size_t size) {
  hobby_or_interests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character_CharacterDescription::hobby_or_interests() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return hobby_or_interests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character_CharacterDescription::mutable_hobby_or_interests() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.CharacterDescription.hobby_or_interests)
  return &hobby_or_interests_;
}

// string character_role = 14;
inline void Character_CharacterDescription::clear_character_role() {
  character_role_.ClearToEmpty();
}
inline const std::string& Character_CharacterDescription::character_role() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
  return _internal_character_role();
}
inline void Character_CharacterDescription::set_character_role(const std::string& value) {
  _internal_set_character_role(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}
inline std::string* Character_CharacterDescription::mutable_character_role() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
  return _internal_mutable_character_role();
}
inline const std::string& Character_CharacterDescription::_internal_character_role() const {
  return character_role_.Get();
}
inline void Character_CharacterDescription::_internal_set_character_role(const std::string& value) {
  
  character_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterDescription::set_character_role(std::string&& value) {
  
  character_role_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}
inline void Character_CharacterDescription::set_character_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  character_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}
inline void Character_CharacterDescription::set_character_role(const char* value,
    size_t size) {
  
  character_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}
inline std::string* Character_CharacterDescription::_internal_mutable_character_role() {
  
  return character_role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterDescription::release_character_role() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
  return character_role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterDescription::set_allocated_character_role(std::string* character_role) {
  if (character_role != nullptr) {
    
  } else {
    
  }
  character_role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character_role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterDescription.character_role)
}

// -------------------------------------------------------------------

// Character_BrainSettings_ConversationConfig_FillerSpec

// bool fillers_disabled = 1;
inline void Character_BrainSettings_ConversationConfig_FillerSpec::clear_fillers_disabled() {
  fillers_disabled_ = false;
}
inline bool Character_BrainSettings_ConversationConfig_FillerSpec::_internal_fillers_disabled() const {
  return fillers_disabled_;
}
inline bool Character_BrainSettings_ConversationConfig_FillerSpec::fillers_disabled() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec.fillers_disabled)
  return _internal_fillers_disabled();
}
inline void Character_BrainSettings_ConversationConfig_FillerSpec::_internal_set_fillers_disabled(bool value) {
  
  fillers_disabled_ = value;
}
inline void Character_BrainSettings_ConversationConfig_FillerSpec::set_fillers_disabled(bool value) {
  _internal_set_fillers_disabled(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec.fillers_disabled)
}

// -------------------------------------------------------------------

// Character_BrainSettings_ConversationConfig

// .ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.FillerSpec filler_spec = 2;
inline bool Character_BrainSettings_ConversationConfig::_internal_has_filler_spec() const {
  return this != internal_default_instance() && filler_spec_ != nullptr;
}
inline bool Character_BrainSettings_ConversationConfig::has_filler_spec() const {
  return _internal_has_filler_spec();
}
inline void Character_BrainSettings_ConversationConfig::clear_filler_spec() {
  if (GetArena() == nullptr && filler_spec_ != nullptr) {
    delete filler_spec_;
  }
  filler_spec_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec& Character_BrainSettings_ConversationConfig::_internal_filler_spec() const {
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* p = filler_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec&>(
      ::ai::inworld::studio::v1alpha::_Character_BrainSettings_ConversationConfig_FillerSpec_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec& Character_BrainSettings_ConversationConfig::filler_spec() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.filler_spec)
  return _internal_filler_spec();
}
inline void Character_BrainSettings_ConversationConfig::unsafe_arena_set_allocated_filler_spec(
    ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* filler_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filler_spec_);
  }
  filler_spec_ = filler_spec;
  if (filler_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.filler_spec)
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* Character_BrainSettings_ConversationConfig::release_filler_spec() {
  
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* temp = filler_spec_;
  filler_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* Character_BrainSettings_ConversationConfig::unsafe_arena_release_filler_spec() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.filler_spec)
  
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* temp = filler_spec_;
  filler_spec_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* Character_BrainSettings_ConversationConfig::_internal_mutable_filler_spec() {
  
  if (filler_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec>(GetArena());
    filler_spec_ = p;
  }
  return filler_spec_;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* Character_BrainSettings_ConversationConfig::mutable_filler_spec() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.filler_spec)
  return _internal_mutable_filler_spec();
}
inline void Character_BrainSettings_ConversationConfig::set_allocated_filler_spec(::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig_FillerSpec* filler_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filler_spec_;
  }
  if (filler_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filler_spec);
    if (message_arena != submessage_arena) {
      filler_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filler_spec, submessage_arena);
    }
    
  } else {
    
  }
  filler_spec_ = filler_spec;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.filler_spec)
}

// bool emotions_disabled = 4;
inline void Character_BrainSettings_ConversationConfig::clear_emotions_disabled() {
  emotions_disabled_ = false;
}
inline bool Character_BrainSettings_ConversationConfig::_internal_emotions_disabled() const {
  return emotions_disabled_;
}
inline bool Character_BrainSettings_ConversationConfig::emotions_disabled() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.emotions_disabled)
  return _internal_emotions_disabled();
}
inline void Character_BrainSettings_ConversationConfig::_internal_set_emotions_disabled(bool value) {
  
  emotions_disabled_ = value;
}
inline void Character_BrainSettings_ConversationConfig::set_emotions_disabled(bool value) {
  _internal_set_emotions_disabled(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.emotions_disabled)
}

// bool behavioral_contexts_disabled = 5;
inline void Character_BrainSettings_ConversationConfig::clear_behavioral_contexts_disabled() {
  behavioral_contexts_disabled_ = false;
}
inline bool Character_BrainSettings_ConversationConfig::_internal_behavioral_contexts_disabled() const {
  return behavioral_contexts_disabled_;
}
inline bool Character_BrainSettings_ConversationConfig::behavioral_contexts_disabled() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.behavioral_contexts_disabled)
  return _internal_behavioral_contexts_disabled();
}
inline void Character_BrainSettings_ConversationConfig::_internal_set_behavioral_contexts_disabled(bool value) {
  
  behavioral_contexts_disabled_ = value;
}
inline void Character_BrainSettings_ConversationConfig::set_behavioral_contexts_disabled(bool value) {
  _internal_set_behavioral_contexts_disabled(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig.behavioral_contexts_disabled)
}

// -------------------------------------------------------------------

// Character_BrainSettings

// .ai.inworld.studio.v1alpha.Character.BrainSettings.ConversationConfig conversation_config = 1;
inline bool Character_BrainSettings::_internal_has_conversation_config() const {
  return this != internal_default_instance() && conversation_config_ != nullptr;
}
inline bool Character_BrainSettings::has_conversation_config() const {
  return _internal_has_conversation_config();
}
inline void Character_BrainSettings::clear_conversation_config() {
  if (GetArena() == nullptr && conversation_config_ != nullptr) {
    delete conversation_config_;
  }
  conversation_config_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig& Character_BrainSettings::_internal_conversation_config() const {
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* p = conversation_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig&>(
      ::ai::inworld::studio::v1alpha::_Character_BrainSettings_ConversationConfig_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig& Character_BrainSettings::conversation_config() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainSettings.conversation_config)
  return _internal_conversation_config();
}
inline void Character_BrainSettings::unsafe_arena_set_allocated_conversation_config(
    ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* conversation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conversation_config_);
  }
  conversation_config_ = conversation_config;
  if (conversation_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.BrainSettings.conversation_config)
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* Character_BrainSettings::release_conversation_config() {
  
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* temp = conversation_config_;
  conversation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* Character_BrainSettings::unsafe_arena_release_conversation_config() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.BrainSettings.conversation_config)
  
  ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* temp = conversation_config_;
  conversation_config_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* Character_BrainSettings::_internal_mutable_conversation_config() {
  
  if (conversation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig>(GetArena());
    conversation_config_ = p;
  }
  return conversation_config_;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* Character_BrainSettings::mutable_conversation_config() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.BrainSettings.conversation_config)
  return _internal_mutable_conversation_config();
}
inline void Character_BrainSettings::set_allocated_conversation_config(::ai::inworld::studio::v1alpha::Character_BrainSettings_ConversationConfig* conversation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conversation_config_;
  }
  if (conversation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conversation_config);
    if (message_arena != submessage_arena) {
      conversation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_config, submessage_arena);
    }
    
  } else {
    
  }
  conversation_config_ = conversation_config;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.BrainSettings.conversation_config)
}

// -------------------------------------------------------------------

// Character_BrainTrigger

// string trigger = 1 [(.google.api.resource_reference) = {
inline void Character_BrainTrigger::clear_trigger() {
  trigger_.ClearToEmpty();
}
inline const std::string& Character_BrainTrigger::trigger() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
  return _internal_trigger();
}
inline void Character_BrainTrigger::set_trigger(const std::string& value) {
  _internal_set_trigger(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
}
inline std::string* Character_BrainTrigger::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
  return _internal_mutable_trigger();
}
inline const std::string& Character_BrainTrigger::_internal_trigger() const {
  return trigger_.Get();
}
inline void Character_BrainTrigger::_internal_set_trigger(const std::string& value) {
  
  trigger_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_BrainTrigger::set_trigger(std::string&& value) {
  
  trigger_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
}
inline void Character_BrainTrigger::set_trigger(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trigger_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
}
inline void Character_BrainTrigger::set_trigger(const char* value,
    size_t size) {
  
  trigger_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
}
inline std::string* Character_BrainTrigger::_internal_mutable_trigger() {
  
  return trigger_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_BrainTrigger::release_trigger() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
  return trigger_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_BrainTrigger::set_allocated_trigger(std::string* trigger) {
  if (trigger != nullptr) {
    
  } else {
    
  }
  trigger_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trigger,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.BrainTrigger.trigger)
}

// string situation_description = 2;
inline void Character_BrainTrigger::clear_situation_description() {
  situation_description_.ClearToEmpty();
}
inline const std::string& Character_BrainTrigger::situation_description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
  return _internal_situation_description();
}
inline void Character_BrainTrigger::set_situation_description(const std::string& value) {
  _internal_set_situation_description(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
}
inline std::string* Character_BrainTrigger::mutable_situation_description() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
  return _internal_mutable_situation_description();
}
inline const std::string& Character_BrainTrigger::_internal_situation_description() const {
  return situation_description_.Get();
}
inline void Character_BrainTrigger::_internal_set_situation_description(const std::string& value) {
  
  situation_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_BrainTrigger::set_situation_description(std::string&& value) {
  
  situation_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
}
inline void Character_BrainTrigger::set_situation_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  situation_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
}
inline void Character_BrainTrigger::set_situation_description(const char* value,
    size_t size) {
  
  situation_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
}
inline std::string* Character_BrainTrigger::_internal_mutable_situation_description() {
  
  return situation_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_BrainTrigger::release_situation_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
  return situation_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_BrainTrigger::set_allocated_situation_description(std::string* situation_description) {
  if (situation_description != nullptr) {
    
  } else {
    
  }
  situation_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), situation_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.BrainTrigger.situation_description)
}

// bool start_conversation = 3;
inline void Character_BrainTrigger::clear_start_conversation() {
  start_conversation_ = false;
}
inline bool Character_BrainTrigger::_internal_start_conversation() const {
  return start_conversation_;
}
inline bool Character_BrainTrigger::start_conversation() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.BrainTrigger.start_conversation)
  return _internal_start_conversation();
}
inline void Character_BrainTrigger::_internal_set_start_conversation(bool value) {
  
  start_conversation_ = value;
}
inline void Character_BrainTrigger::set_start_conversation(bool value) {
  _internal_set_start_conversation(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.BrainTrigger.start_conversation)
}

// -------------------------------------------------------------------

// Character_CharacterAssets

// string rpm_model_uri = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_model_uri() {
  rpm_model_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_model_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
  return _internal_rpm_model_uri();
}
inline void Character_CharacterAssets::set_rpm_model_uri(const std::string& value) {
  _internal_set_rpm_model_uri(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}
inline std::string* Character_CharacterAssets::mutable_rpm_model_uri() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
  return _internal_mutable_rpm_model_uri();
}
inline const std::string& Character_CharacterAssets::_internal_rpm_model_uri() const {
  return rpm_model_uri_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_model_uri(const std::string& value) {
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterAssets::set_rpm_model_uri(std::string&& value) {
  
  rpm_model_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}
inline void Character_CharacterAssets::set_rpm_model_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}
inline void Character_CharacterAssets::set_rpm_model_uri(const char* value,
    size_t size) {
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_model_uri() {
  
  return rpm_model_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_model_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
  return rpm_model_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterAssets::set_allocated_rpm_model_uri(std::string* rpm_model_uri) {
  if (rpm_model_uri != nullptr) {
    
  } else {
    
  }
  rpm_model_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_model_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_model_uri)
}

// string rpm_image_uri = 3 [deprecated = true, (.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_image_uri() {
  rpm_image_uri_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_image_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
  return _internal_rpm_image_uri();
}
inline void Character_CharacterAssets::set_rpm_image_uri(const std::string& value) {
  _internal_set_rpm_image_uri(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}
inline std::string* Character_CharacterAssets::mutable_rpm_image_uri() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
  return _internal_mutable_rpm_image_uri();
}
inline const std::string& Character_CharacterAssets::_internal_rpm_image_uri() const {
  return rpm_image_uri_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_image_uri(const std::string& value) {
  
  rpm_image_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterAssets::set_rpm_image_uri(std::string&& value) {
  
  rpm_image_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}
inline void Character_CharacterAssets::set_rpm_image_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_image_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}
inline void Character_CharacterAssets::set_rpm_image_uri(const char* value,
    size_t size) {
  
  rpm_image_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_image_uri() {
  
  return rpm_image_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_image_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
  return rpm_image_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterAssets::set_allocated_rpm_image_uri(std::string* rpm_image_uri) {
  if (rpm_image_uri != nullptr) {
    
  } else {
    
  }
  rpm_image_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_image_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri)
}

// string rpm_image_uri_portrait = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_image_uri_portrait() {
  rpm_image_uri_portrait_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_image_uri_portrait() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
  return _internal_rpm_image_uri_portrait();
}
inline void Character_CharacterAssets::set_rpm_image_uri_portrait(const std::string& value) {
  _internal_set_rpm_image_uri_portrait(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* Character_CharacterAssets::mutable_rpm_image_uri_portrait() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
  return _internal_mutable_rpm_image_uri_portrait();
}
inline const std::string& Character_CharacterAssets::_internal_rpm_image_uri_portrait() const {
  return rpm_image_uri_portrait_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_image_uri_portrait(const std::string& value) {
  
  rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterAssets::set_rpm_image_uri_portrait(std::string&& value) {
  
  rpm_image_uri_portrait_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline void Character_CharacterAssets::set_rpm_image_uri_portrait(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline void Character_CharacterAssets::set_rpm_image_uri_portrait(const char* value,
    size_t size) {
  
  rpm_image_uri_portrait_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_image_uri_portrait() {
  
  return rpm_image_uri_portrait_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_image_uri_portrait() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
  return rpm_image_uri_portrait_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterAssets::set_allocated_rpm_image_uri_portrait(std::string* rpm_image_uri_portrait) {
  if (rpm_image_uri_portrait != nullptr) {
    
  } else {
    
  }
  rpm_image_uri_portrait_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_image_uri_portrait,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_portrait)
}

// string rpm_image_uri_posture = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Character_CharacterAssets::clear_rpm_image_uri_posture() {
  rpm_image_uri_posture_.ClearToEmpty();
}
inline const std::string& Character_CharacterAssets::rpm_image_uri_posture() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
  return _internal_rpm_image_uri_posture();
}
inline void Character_CharacterAssets::set_rpm_image_uri_posture(const std::string& value) {
  _internal_set_rpm_image_uri_posture(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* Character_CharacterAssets::mutable_rpm_image_uri_posture() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
  return _internal_mutable_rpm_image_uri_posture();
}
inline const std::string& Character_CharacterAssets::_internal_rpm_image_uri_posture() const {
  return rpm_image_uri_posture_.Get();
}
inline void Character_CharacterAssets::_internal_set_rpm_image_uri_posture(const std::string& value) {
  
  rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_CharacterAssets::set_rpm_image_uri_posture(std::string&& value) {
  
  rpm_image_uri_posture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}
inline void Character_CharacterAssets::set_rpm_image_uri_posture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}
inline void Character_CharacterAssets::set_rpm_image_uri_posture(const char* value,
    size_t size) {
  
  rpm_image_uri_posture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}
inline std::string* Character_CharacterAssets::_internal_mutable_rpm_image_uri_posture() {
  
  return rpm_image_uri_posture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_CharacterAssets::release_rpm_image_uri_posture() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
  return rpm_image_uri_posture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_CharacterAssets::set_allocated_rpm_image_uri_posture(std::string* rpm_image_uri_posture) {
  if (rpm_image_uri_posture != nullptr) {
    
  } else {
    
  }
  rpm_image_uri_posture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_image_uri_posture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.rpm_image_uri_posture)
}

// .ai.inworld.voices.Voice voice = 6;
inline bool Character_CharacterAssets::_internal_has_voice() const {
  return this != internal_default_instance() && voice_ != nullptr;
}
inline bool Character_CharacterAssets::has_voice() const {
  return _internal_has_voice();
}
inline const ::ai::inworld::voices::Voice& Character_CharacterAssets::_internal_voice() const {
  const ::ai::inworld::voices::Voice* p = voice_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::voices::Voice&>(
      ::ai::inworld::voices::_Voice_default_instance_);
}
inline const ::ai::inworld::voices::Voice& Character_CharacterAssets::voice() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
  return _internal_voice();
}
inline void Character_CharacterAssets::unsafe_arena_set_allocated_voice(
    ::ai::inworld::voices::Voice* voice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  voice_ = voice;
  if (voice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::release_voice() {
  
  ::ai::inworld::voices::Voice* temp = voice_;
  voice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::unsafe_arena_release_voice() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
  
  ::ai::inworld::voices::Voice* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::_internal_mutable_voice() {
  
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::voices::Voice>(GetArena());
    voice_ = p;
  }
  return voice_;
}
inline ::ai::inworld::voices::Voice* Character_CharacterAssets::mutable_voice() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
  return _internal_mutable_voice();
}
inline void Character_CharacterAssets::set_allocated_voice(::ai::inworld::voices::Voice* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice)->GetArena();
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    
  } else {
    
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.CharacterAssets.voice)
}

// -------------------------------------------------------------------

// Character_CharacterInitialMood

// int32 joy = 1;
inline void Character_CharacterInitialMood::clear_joy() {
  joy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::_internal_joy() const {
  return joy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::joy() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.joy)
  return _internal_joy();
}
inline void Character_CharacterInitialMood::_internal_set_joy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  joy_ = value;
}
inline void Character_CharacterInitialMood::set_joy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_joy(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.joy)
}

// int32 fear = 2;
inline void Character_CharacterInitialMood::clear_fear() {
  fear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::_internal_fear() const {
  return fear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::fear() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.fear)
  return _internal_fear();
}
inline void Character_CharacterInitialMood::_internal_set_fear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fear_ = value;
}
inline void Character_CharacterInitialMood::set_fear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fear(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.fear)
}

// int32 trust = 3;
inline void Character_CharacterInitialMood::clear_trust() {
  trust_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::_internal_trust() const {
  return trust_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::trust() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.trust)
  return _internal_trust();
}
inline void Character_CharacterInitialMood::_internal_set_trust(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trust_ = value;
}
inline void Character_CharacterInitialMood::set_trust(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trust(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.trust)
}

// int32 surprise = 4;
inline void Character_CharacterInitialMood::clear_surprise() {
  surprise_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::_internal_surprise() const {
  return surprise_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterInitialMood::surprise() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.surprise)
  return _internal_surprise();
}
inline void Character_CharacterInitialMood::_internal_set_surprise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  surprise_ = value;
}
inline void Character_CharacterInitialMood::set_surprise(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_surprise(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterInitialMood.surprise)
}

// -------------------------------------------------------------------

// Character_CharacterPersonality

// int32 positive = 1;
inline void Character_CharacterPersonality::clear_positive() {
  positive_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::_internal_positive() const {
  return positive_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::positive() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.positive)
  return _internal_positive();
}
inline void Character_CharacterPersonality::_internal_set_positive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positive_ = value;
}
inline void Character_CharacterPersonality::set_positive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positive(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.positive)
}

// int32 peaceful = 2;
inline void Character_CharacterPersonality::clear_peaceful() {
  peaceful_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::_internal_peaceful() const {
  return peaceful_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::peaceful() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.peaceful)
  return _internal_peaceful();
}
inline void Character_CharacterPersonality::_internal_set_peaceful(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peaceful_ = value;
}
inline void Character_CharacterPersonality::set_peaceful(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peaceful(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.peaceful)
}

// int32 open = 3;
inline void Character_CharacterPersonality::clear_open() {
  open_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::_internal_open() const {
  return open_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::open() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.open)
  return _internal_open();
}
inline void Character_CharacterPersonality::_internal_set_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_ = value;
}
inline void Character_CharacterPersonality::set_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.open)
}

// int32 extravert = 4;
inline void Character_CharacterPersonality::clear_extravert() {
  extravert_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::_internal_extravert() const {
  return extravert_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_CharacterPersonality::extravert() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.CharacterPersonality.extravert)
  return _internal_extravert();
}
inline void Character_CharacterPersonality::_internal_set_extravert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extravert_ = value;
}
inline void Character_CharacterPersonality::set_extravert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extravert(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.CharacterPersonality.extravert)
}

// -------------------------------------------------------------------

// Character_Fact

// string uuid = 1;
inline void Character_Fact::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Character_Fact::uuid() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Fact.uuid)
  return _internal_uuid();
}
inline void Character_Fact::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}
inline std::string* Character_Fact::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.Fact.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Character_Fact::_internal_uuid() const {
  return uuid_.Get();
}
inline void Character_Fact::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character_Fact::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}
inline void Character_Fact::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}
inline void Character_Fact::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}
inline std::string* Character_Fact::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character_Fact::release_uuid() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.Fact.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character_Fact::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.Fact.uuid)
}

// repeated string text = 2;
inline int Character_Fact::_internal_text_size() const {
  return text_.size();
}
inline int Character_Fact::text_size() const {
  return _internal_text_size();
}
inline void Character_Fact::clear_text() {
  text_.Clear();
}
inline std::string* Character_Fact::add_text() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.Fact.text)
  return _internal_add_text();
}
inline const std::string& Character_Fact::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& Character_Fact::text(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Fact.text)
  return _internal_text(index);
}
inline std::string* Character_Fact::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.Fact.text)
  return text_.Mutable(index);
}
inline void Character_Fact::set_text(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.text)
  text_.Mutable(index)->assign(value);
}
inline void Character_Fact::set_text(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.text)
  text_.Mutable(index)->assign(std::move(value));
}
inline void Character_Fact::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline std::string* Character_Fact::_internal_add_text() {
  return text_.Add();
}
inline void Character_Fact::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline void Character_Fact::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.Fact.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character_Fact::text() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.Fact.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character_Fact::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.Fact.text)
  return &text_;
}

// repeated .ai.inworld.studio.v1alpha.Character.Tag tags = 3;
inline int Character_Fact::_internal_tags_size() const {
  return tags_.size();
}
inline int Character_Fact::tags_size() const {
  return _internal_tags_size();
}
inline void Character_Fact::clear_tags() {
  tags_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character_Tag Character_Fact::_internal_tags(int index) const {
  return static_cast< ::ai::inworld::studio::v1alpha::Character_Tag >(tags_.Get(index));
}
inline ::ai::inworld::studio::v1alpha::Character_Tag Character_Fact::tags(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Fact.tags)
  return _internal_tags(index);
}
inline void Character_Fact::set_tags(int index, ::ai::inworld::studio::v1alpha::Character_Tag value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Fact.tags)
}
inline void Character_Fact::_internal_add_tags(::ai::inworld::studio::v1alpha::Character_Tag value) {
  tags_.Add(value);
}
inline void Character_Fact::add_tags(::ai::inworld::studio::v1alpha::Character_Tag value) {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.Fact.tags)
  _internal_add_tags(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Character_Fact::tags() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.Fact.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Character_Fact::_internal_mutable_tags() {
  return &tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Character_Fact::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.Fact.tags)
  return _internal_mutable_tags();
}

// -------------------------------------------------------------------

// Character_Meta

// int32 total_triggers = 1;
inline void Character_Meta::clear_total_triggers() {
  total_triggers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_Meta::_internal_total_triggers() const {
  return total_triggers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_Meta::total_triggers() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Meta.total_triggers)
  return _internal_total_triggers();
}
inline void Character_Meta::_internal_set_total_triggers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_triggers_ = value;
}
inline void Character_Meta::set_total_triggers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_triggers(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Meta.total_triggers)
}

// int32 total_common_knowledge = 2;
inline void Character_Meta::clear_total_common_knowledge() {
  total_common_knowledge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_Meta::_internal_total_common_knowledge() const {
  return total_common_knowledge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Character_Meta::total_common_knowledge() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.Meta.total_common_knowledge)
  return _internal_total_common_knowledge();
}
inline void Character_Meta::_internal_set_total_common_knowledge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_common_knowledge_ = value;
}
inline void Character_Meta::set_total_common_knowledge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_common_knowledge(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.Meta.total_common_knowledge)
}

// -------------------------------------------------------------------

// Character

// string name = 1 [(.ai.inworld.options.examples) = {
inline void Character::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Character::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.name)
  return _internal_name();
}
inline void Character::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.name)
}
inline std::string* Character::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.name)
  return _internal_mutable_name();
}
inline const std::string& Character::_internal_name() const {
  return name_.Get();
}
inline void Character::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.name)
}
inline void Character::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.name)
}
inline void Character::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.name)
}
inline std::string* Character::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.name)
}

// string language_code = 2;
inline void Character::clear_language_code() {
  language_code_.ClearToEmpty();
}
inline const std::string& Character::language_code() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.language_code)
  return _internal_language_code();
}
inline void Character::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.language_code)
}
inline std::string* Character::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& Character::_internal_language_code() const {
  return language_code_.Get();
}
inline void Character::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Character::set_language_code(std::string&& value) {
  
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.Character.language_code)
}
inline void Character::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.language_code)
}
inline void Character::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.language_code)
}
inline std::string* Character::_internal_mutable_language_code() {
  
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Character::release_language_code() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Character::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.language_code)
}

// .ai.inworld.studio.v1alpha.Character.CharacterDescription default_character_description = 3;
inline bool Character::_internal_has_default_character_description() const {
  return this != internal_default_instance() && default_character_description_ != nullptr;
}
inline bool Character::has_default_character_description() const {
  return _internal_has_default_character_description();
}
inline void Character::clear_default_character_description() {
  if (GetArena() == nullptr && default_character_description_ != nullptr) {
    delete default_character_description_;
  }
  default_character_description_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& Character::_internal_default_character_description() const {
  const ::ai::inworld::studio::v1alpha::Character_CharacterDescription* p = default_character_description_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterDescription&>(
      ::ai::inworld::studio::v1alpha::_Character_CharacterDescription_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterDescription& Character::default_character_description() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.default_character_description)
  return _internal_default_character_description();
}
inline void Character::unsafe_arena_set_allocated_default_character_description(
    ::ai::inworld::studio::v1alpha::Character_CharacterDescription* default_character_description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_character_description_);
  }
  default_character_description_ = default_character_description;
  if (default_character_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_description)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::release_default_character_description() {
  
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* temp = default_character_description_;
  default_character_description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::unsafe_arena_release_default_character_description() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.default_character_description)
  
  ::ai::inworld::studio::v1alpha::Character_CharacterDescription* temp = default_character_description_;
  default_character_description_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::_internal_mutable_default_character_description() {
  
  if (default_character_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterDescription>(GetArena());
    default_character_description_ = p;
  }
  return default_character_description_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterDescription* Character::mutable_default_character_description() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.default_character_description)
  return _internal_mutable_default_character_description();
}
inline void Character::set_allocated_default_character_description(::ai::inworld::studio::v1alpha::Character_CharacterDescription* default_character_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete default_character_description_;
  }
  if (default_character_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(default_character_description);
    if (message_arena != submessage_arena) {
      default_character_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_character_description, submessage_arena);
    }
    
  } else {
    
  }
  default_character_description_ = default_character_description;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_description)
}

// .ai.inworld.studio.v1alpha.Character.BrainSettings brain_settings = 4;
inline bool Character::_internal_has_brain_settings() const {
  return this != internal_default_instance() && brain_settings_ != nullptr;
}
inline bool Character::has_brain_settings() const {
  return _internal_has_brain_settings();
}
inline void Character::clear_brain_settings() {
  if (GetArena() == nullptr && brain_settings_ != nullptr) {
    delete brain_settings_;
  }
  brain_settings_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainSettings& Character::_internal_brain_settings() const {
  const ::ai::inworld::studio::v1alpha::Character_BrainSettings* p = brain_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_BrainSettings&>(
      ::ai::inworld::studio::v1alpha::_Character_BrainSettings_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainSettings& Character::brain_settings() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.brain_settings)
  return _internal_brain_settings();
}
inline void Character::unsafe_arena_set_allocated_brain_settings(
    ::ai::inworld::studio::v1alpha::Character_BrainSettings* brain_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brain_settings_);
  }
  brain_settings_ = brain_settings;
  if (brain_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.brain_settings)
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings* Character::release_brain_settings() {
  
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* temp = brain_settings_;
  brain_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings* Character::unsafe_arena_release_brain_settings() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.brain_settings)
  
  ::ai::inworld::studio::v1alpha::Character_BrainSettings* temp = brain_settings_;
  brain_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings* Character::_internal_mutable_brain_settings() {
  
  if (brain_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_BrainSettings>(GetArena());
    brain_settings_ = p;
  }
  return brain_settings_;
}
inline ::ai::inworld::studio::v1alpha::Character_BrainSettings* Character::mutable_brain_settings() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.brain_settings)
  return _internal_mutable_brain_settings();
}
inline void Character::set_allocated_brain_settings(::ai::inworld::studio::v1alpha::Character_BrainSettings* brain_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete brain_settings_;
  }
  if (brain_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(brain_settings);
    if (message_arena != submessage_arena) {
      brain_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brain_settings, submessage_arena);
    }
    
  } else {
    
  }
  brain_settings_ = brain_settings;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.brain_settings)
}

// repeated .ai.inworld.studio.v1alpha.Character.BrainTrigger brain_triggers = 5;
inline int Character::_internal_brain_triggers_size() const {
  return brain_triggers_.size();
}
inline int Character::brain_triggers_size() const {
  return _internal_brain_triggers_size();
}
inline void Character::clear_brain_triggers() {
  brain_triggers_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character_BrainTrigger* Character::mutable_brain_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.brain_triggers)
  return brain_triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_BrainTrigger >*
Character::mutable_brain_triggers() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.brain_triggers)
  return &brain_triggers_;
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainTrigger& Character::_internal_brain_triggers(int index) const {
  return brain_triggers_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Character_BrainTrigger& Character::brain_triggers(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.brain_triggers)
  return _internal_brain_triggers(index);
}
inline ::ai::inworld::studio::v1alpha::Character_BrainTrigger* Character::_internal_add_brain_triggers() {
  return brain_triggers_.Add();
}
inline ::ai::inworld::studio::v1alpha::Character_BrainTrigger* Character::add_brain_triggers() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.brain_triggers)
  return _internal_add_brain_triggers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_BrainTrigger >&
Character::brain_triggers() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.brain_triggers)
  return brain_triggers_;
}

// .ai.inworld.studio.v1alpha.Character.CharacterAssets default_character_assets = 7;
inline bool Character::_internal_has_default_character_assets() const {
  return this != internal_default_instance() && default_character_assets_ != nullptr;
}
inline bool Character::has_default_character_assets() const {
  return _internal_has_default_character_assets();
}
inline void Character::clear_default_character_assets() {
  if (GetArena() == nullptr && default_character_assets_ != nullptr) {
    delete default_character_assets_;
  }
  default_character_assets_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& Character::_internal_default_character_assets() const {
  const ::ai::inworld::studio::v1alpha::Character_CharacterAssets* p = default_character_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterAssets&>(
      ::ai::inworld::studio::v1alpha::_Character_CharacterAssets_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterAssets& Character::default_character_assets() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.default_character_assets)
  return _internal_default_character_assets();
}
inline void Character::unsafe_arena_set_allocated_default_character_assets(
    ::ai::inworld::studio::v1alpha::Character_CharacterAssets* default_character_assets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_character_assets_);
  }
  default_character_assets_ = default_character_assets;
  if (default_character_assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_assets)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::release_default_character_assets() {
  
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* temp = default_character_assets_;
  default_character_assets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::unsafe_arena_release_default_character_assets() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.default_character_assets)
  
  ::ai::inworld::studio::v1alpha::Character_CharacterAssets* temp = default_character_assets_;
  default_character_assets_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::_internal_mutable_default_character_assets() {
  
  if (default_character_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterAssets>(GetArena());
    default_character_assets_ = p;
  }
  return default_character_assets_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterAssets* Character::mutable_default_character_assets() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.default_character_assets)
  return _internal_mutable_default_character_assets();
}
inline void Character::set_allocated_default_character_assets(::ai::inworld::studio::v1alpha::Character_CharacterAssets* default_character_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete default_character_assets_;
  }
  if (default_character_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(default_character_assets);
    if (message_arena != submessage_arena) {
      default_character_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_character_assets, submessage_arena);
    }
    
  } else {
    
  }
  default_character_assets_ = default_character_assets;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.default_character_assets)
}

// .ai.inworld.studio.v1alpha.Character.CharacterInitialMood initial_mood = 9;
inline bool Character::_internal_has_initial_mood() const {
  return this != internal_default_instance() && initial_mood_ != nullptr;
}
inline bool Character::has_initial_mood() const {
  return _internal_has_initial_mood();
}
inline void Character::clear_initial_mood() {
  if (GetArena() == nullptr && initial_mood_ != nullptr) {
    delete initial_mood_;
  }
  initial_mood_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& Character::_internal_initial_mood() const {
  const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* p = initial_mood_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood&>(
      ::ai::inworld::studio::v1alpha::_Character_CharacterInitialMood_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood& Character::initial_mood() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.initial_mood)
  return _internal_initial_mood();
}
inline void Character::unsafe_arena_set_allocated_initial_mood(
    ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* initial_mood) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_mood_);
  }
  initial_mood_ = initial_mood;
  if (initial_mood) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.initial_mood)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::release_initial_mood() {
  
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* temp = initial_mood_;
  initial_mood_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::unsafe_arena_release_initial_mood() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.initial_mood)
  
  ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* temp = initial_mood_;
  initial_mood_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::_internal_mutable_initial_mood() {
  
  if (initial_mood_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterInitialMood>(GetArena());
    initial_mood_ = p;
  }
  return initial_mood_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* Character::mutable_initial_mood() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.initial_mood)
  return _internal_mutable_initial_mood();
}
inline void Character::set_allocated_initial_mood(::ai::inworld::studio::v1alpha::Character_CharacterInitialMood* initial_mood) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initial_mood_;
  }
  if (initial_mood) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initial_mood);
    if (message_arena != submessage_arena) {
      initial_mood = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_mood, submessage_arena);
    }
    
  } else {
    
  }
  initial_mood_ = initial_mood;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.initial_mood)
}

// .ai.inworld.studio.v1alpha.Character.CharacterPersonality personality = 10;
inline bool Character::_internal_has_personality() const {
  return this != internal_default_instance() && personality_ != nullptr;
}
inline bool Character::has_personality() const {
  return _internal_has_personality();
}
inline void Character::clear_personality() {
  if (GetArena() == nullptr && personality_ != nullptr) {
    delete personality_;
  }
  personality_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& Character::_internal_personality() const {
  const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* p = personality_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality&>(
      ::ai::inworld::studio::v1alpha::_Character_CharacterPersonality_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_CharacterPersonality& Character::personality() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.personality)
  return _internal_personality();
}
inline void Character::unsafe_arena_set_allocated_personality(
    ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* personality) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(personality_);
  }
  personality_ = personality;
  if (personality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.personality)
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::release_personality() {
  
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* temp = personality_;
  personality_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::unsafe_arena_release_personality() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.personality)
  
  ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* temp = personality_;
  personality_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::_internal_mutable_personality() {
  
  if (personality_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_CharacterPersonality>(GetArena());
    personality_ = p;
  }
  return personality_;
}
inline ::ai::inworld::studio::v1alpha::Character_CharacterPersonality* Character::mutable_personality() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.personality)
  return _internal_mutable_personality();
}
inline void Character::set_allocated_personality(::ai::inworld::studio::v1alpha::Character_CharacterPersonality* personality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete personality_;
  }
  if (personality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(personality);
    if (message_arena != submessage_arena) {
      personality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, personality, submessage_arena);
    }
    
  } else {
    
  }
  personality_ = personality;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.personality)
}

// repeated string common_knowledges = 11;
inline int Character::_internal_common_knowledges_size() const {
  return common_knowledges_.size();
}
inline int Character::common_knowledges_size() const {
  return _internal_common_knowledges_size();
}
inline void Character::clear_common_knowledges() {
  common_knowledges_.Clear();
}
inline std::string* Character::add_common_knowledges() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return _internal_add_common_knowledges();
}
inline const std::string& Character::_internal_common_knowledges(int index) const {
  return common_knowledges_.Get(index);
}
inline const std::string& Character::common_knowledges(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return _internal_common_knowledges(index);
}
inline std::string* Character::mutable_common_knowledges(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return common_knowledges_.Mutable(index);
}
inline void Character::set_common_knowledges(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.common_knowledges)
  common_knowledges_.Mutable(index)->assign(value);
}
inline void Character::set_common_knowledges(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.common_knowledges)
  common_knowledges_.Mutable(index)->assign(std::move(value));
}
inline void Character::set_common_knowledges(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  common_knowledges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::set_common_knowledges(int index, const char* value, size_t size) {
  common_knowledges_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline std::string* Character::_internal_add_common_knowledges() {
  return common_knowledges_.Add();
}
inline void Character::add_common_knowledges(const std::string& value) {
  common_knowledges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(std::string&& value) {
  common_knowledges_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  common_knowledges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline void Character::add_common_knowledges(const char* value, size_t size) {
  common_knowledges_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.Character.common_knowledges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Character::common_knowledges() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return common_knowledges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Character::mutable_common_knowledges() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.common_knowledges)
  return &common_knowledges_;
}

// float social_rank = 12;
inline void Character::clear_social_rank() {
  social_rank_ = 0;
}
inline float Character::_internal_social_rank() const {
  return social_rank_;
}
inline float Character::social_rank() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.social_rank)
  return _internal_social_rank();
}
inline void Character::_internal_set_social_rank(float value) {
  
  social_rank_ = value;
}
inline void Character::set_social_rank(float value) {
  _internal_set_social_rank(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.social_rank)
}

// repeated .ai.inworld.studio.v1alpha.Scene scenes = 13;
inline int Character::_internal_scenes_size() const {
  return scenes_.size();
}
inline int Character::scenes_size() const {
  return _internal_scenes_size();
}
inline ::ai::inworld::studio::v1alpha::Scene* Character::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.scenes)
  return scenes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >*
Character::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.scenes)
  return &scenes_;
}
inline const ::ai::inworld::studio::v1alpha::Scene& Character::_internal_scenes(int index) const {
  return scenes_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Scene& Character::scenes(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.scenes)
  return _internal_scenes(index);
}
inline ::ai::inworld::studio::v1alpha::Scene* Character::_internal_add_scenes() {
  return scenes_.Add();
}
inline ::ai::inworld::studio::v1alpha::Scene* Character::add_scenes() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.scenes)
  return _internal_add_scenes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Scene >&
Character::scenes() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.scenes)
  return scenes_;
}

// repeated .ai.inworld.studio.v1alpha.Character.Fact facts = 14;
inline int Character::_internal_facts_size() const {
  return facts_.size();
}
inline int Character::facts_size() const {
  return _internal_facts_size();
}
inline void Character::clear_facts() {
  facts_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character_Fact* Character::mutable_facts(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.facts)
  return facts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact >*
Character::mutable_facts() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.facts)
  return &facts_;
}
inline const ::ai::inworld::studio::v1alpha::Character_Fact& Character::_internal_facts(int index) const {
  return facts_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Character_Fact& Character::facts(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.facts)
  return _internal_facts(index);
}
inline ::ai::inworld::studio::v1alpha::Character_Fact* Character::_internal_add_facts() {
  return facts_.Add();
}
inline ::ai::inworld::studio::v1alpha::Character_Fact* Character::add_facts() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.facts)
  return _internal_add_facts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character_Fact >&
Character::facts() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.facts)
  return facts_;
}

// repeated .ai.inworld.studio.v1alpha.BehavioralContext behavioral_contexts = 15;
inline int Character::_internal_behavioral_contexts_size() const {
  return behavioral_contexts_.size();
}
inline int Character::behavioral_contexts_size() const {
  return _internal_behavioral_contexts_size();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContext* Character::mutable_behavioral_contexts(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return behavioral_contexts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext >*
Character::mutable_behavioral_contexts() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return &behavioral_contexts_;
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContext& Character::_internal_behavioral_contexts(int index) const {
  return behavioral_contexts_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::BehavioralContext& Character::behavioral_contexts(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return _internal_behavioral_contexts(index);
}
inline ::ai::inworld::studio::v1alpha::BehavioralContext* Character::_internal_add_behavioral_contexts() {
  return behavioral_contexts_.Add();
}
inline ::ai::inworld::studio::v1alpha::BehavioralContext* Character::add_behavioral_contexts() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return _internal_add_behavioral_contexts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::BehavioralContext >&
Character::behavioral_contexts() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.Character.behavioral_contexts)
  return behavioral_contexts_;
}

// .ai.inworld.studio.v1alpha.Character.Meta meta = 16 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Character::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool Character::has_meta() const {
  return _internal_has_meta();
}
inline void Character::clear_meta() {
  if (GetArena() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character_Meta& Character::_internal_meta() const {
  const ::ai::inworld::studio::v1alpha::Character_Meta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character_Meta&>(
      ::ai::inworld::studio::v1alpha::_Character_Meta_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character_Meta& Character::meta() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.meta)
  return _internal_meta();
}
inline void Character::unsafe_arena_set_allocated_meta(
    ::ai::inworld::studio::v1alpha::Character_Meta* meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.Character.meta)
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::release_meta() {
  
  ::ai::inworld::studio::v1alpha::Character_Meta* temp = meta_;
  meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.Character.meta)
  
  ::ai::inworld::studio::v1alpha::Character_Meta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character_Meta>(GetArena());
    meta_ = p;
  }
  return meta_;
}
inline ::ai::inworld::studio::v1alpha::Character_Meta* Character::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.Character.meta)
  return _internal_mutable_meta();
}
inline void Character::set_allocated_meta(::ai::inworld::studio::v1alpha::Character_Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.Character.meta)
}

// float emotional_fluidity = 17;
inline void Character::clear_emotional_fluidity() {
  emotional_fluidity_ = 0;
}
inline float Character::_internal_emotional_fluidity() const {
  return emotional_fluidity_;
}
inline float Character::emotional_fluidity() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.Character.emotional_fluidity)
  return _internal_emotional_fluidity();
}
inline void Character::_internal_set_emotional_fluidity(float value) {
  
  emotional_fluidity_ = value;
}
inline void Character::set_emotional_fluidity(float value) {
  _internal_set_emotional_fluidity(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.Character.emotional_fluidity)
}

// -------------------------------------------------------------------

// GetCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCharacterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
  return _internal_name();
}
inline void GetCharacterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}
inline std::string* GetCharacterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetCharacterRequest::_internal_name() const {
  return name_.Get();
}
inline void GetCharacterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCharacterRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}
inline void GetCharacterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}
inline void GetCharacterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}
inline std::string* GetCharacterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCharacterRequest.name)
}

// .ai.inworld.studio.v1alpha.CharacterItemView view = 2;
inline void GetCharacterRequest::clear_view() {
  view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CharacterItemView GetCharacterRequest::_internal_view() const {
  return static_cast< ::ai::inworld::studio::v1alpha::CharacterItemView >(view_);
}
inline ::ai::inworld::studio::v1alpha::CharacterItemView GetCharacterRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterRequest.view)
  return _internal_view();
}
inline void GetCharacterRequest::_internal_set_view(::ai::inworld::studio::v1alpha::CharacterItemView value) {
  
  view_ = value;
}
inline void GetCharacterRequest::set_view(::ai::inworld::studio::v1alpha::CharacterItemView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterRequest.view)
}

// -------------------------------------------------------------------

// GetCharacterAdvancedSettingsRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCharacterAdvancedSettingsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetCharacterAdvancedSettingsRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
  return _internal_name();
}
inline void GetCharacterAdvancedSettingsRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}
inline std::string* GetCharacterAdvancedSettingsRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetCharacterAdvancedSettingsRequest::_internal_name() const {
  return name_.Get();
}
inline void GetCharacterAdvancedSettingsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCharacterAdvancedSettingsRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}
inline void GetCharacterAdvancedSettingsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}
inline void GetCharacterAdvancedSettingsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}
inline std::string* GetCharacterAdvancedSettingsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCharacterAdvancedSettingsRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCharacterAdvancedSettingsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCharacterAdvancedSettingsRequest.name)
}

// -------------------------------------------------------------------

// UpdateCharacterAdvancedSettingsRequest

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings character_advanced_settings = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterAdvancedSettingsRequest::_internal_has_character_advanced_settings() const {
  return this != internal_default_instance() && character_advanced_settings_ != nullptr;
}
inline bool UpdateCharacterAdvancedSettingsRequest::has_character_advanced_settings() const {
  return _internal_has_character_advanced_settings();
}
inline void UpdateCharacterAdvancedSettingsRequest::clear_character_advanced_settings() {
  if (GetArena() == nullptr && character_advanced_settings_ != nullptr) {
    delete character_advanced_settings_;
  }
  character_advanced_settings_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& UpdateCharacterAdvancedSettingsRequest::_internal_character_advanced_settings() const {
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* p = character_advanced_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings&>(
      ::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings& UpdateCharacterAdvancedSettingsRequest::character_advanced_settings() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
  return _internal_character_advanced_settings();
}
inline void UpdateCharacterAdvancedSettingsRequest::unsafe_arena_set_allocated_character_advanced_settings(
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* character_advanced_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_advanced_settings_);
  }
  character_advanced_settings_ = character_advanced_settings;
  if (character_advanced_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::release_character_advanced_settings() {
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* temp = character_advanced_settings_;
  character_advanced_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::unsafe_arena_release_character_advanced_settings() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* temp = character_advanced_settings_;
  character_advanced_settings_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::_internal_mutable_character_advanced_settings() {
  
  if (character_advanced_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings>(GetArena());
    character_advanced_settings_ = p;
  }
  return character_advanced_settings_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* UpdateCharacterAdvancedSettingsRequest::mutable_character_advanced_settings() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
  return _internal_mutable_character_advanced_settings();
}
inline void UpdateCharacterAdvancedSettingsRequest::set_allocated_character_advanced_settings(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings* character_advanced_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete character_advanced_settings_;
  }
  if (character_advanced_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(character_advanced_settings);
    if (message_arena != submessage_arena) {
      character_advanced_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_advanced_settings, submessage_arena);
    }
    
  } else {
    
  }
  character_advanced_settings_ = character_advanced_settings;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.character_advanced_settings)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterAdvancedSettingsRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateCharacterAdvancedSettingsRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCharacterAdvancedSettingsRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCharacterAdvancedSettingsRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCharacterAdvancedSettingsRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterAdvancedSettingsRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterAdvancedSettingsRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterAdvancedSettingsRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterAdvancedSettingsRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateCharacterAdvancedSettingsRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterAdvancedSettingsRequest.update_mask)
}

// -------------------------------------------------------------------

// ListCharactersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListCharactersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListCharactersRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
  return _internal_parent();
}
inline void ListCharactersRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}
inline std::string* ListCharactersRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListCharactersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListCharactersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListCharactersRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}
inline void ListCharactersRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}
inline void ListCharactersRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}
inline std::string* ListCharactersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListCharactersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListCharactersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersRequest.parent)
}

// int32 page_size = 2;
inline void ListCharactersRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListCharactersRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListCharactersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.page_size)
  return _internal_page_size();
}
inline void ListCharactersRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListCharactersRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.page_size)
}

// string page_token = 3;
inline void ListCharactersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListCharactersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
  return _internal_page_token();
}
inline void ListCharactersRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}
inline std::string* ListCharactersRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListCharactersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListCharactersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListCharactersRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}
inline void ListCharactersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}
inline void ListCharactersRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}
inline std::string* ListCharactersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListCharactersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListCharactersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersRequest.page_token)
}

// .ai.inworld.studio.v1alpha.CharacterView view = 4;
inline void ListCharactersRequest::clear_view() {
  view_ = 0;
}
inline ::ai::inworld::studio::v1alpha::CharacterView ListCharactersRequest::_internal_view() const {
  return static_cast< ::ai::inworld::studio::v1alpha::CharacterView >(view_);
}
inline ::ai::inworld::studio::v1alpha::CharacterView ListCharactersRequest::view() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.view)
  return _internal_view();
}
inline void ListCharactersRequest::_internal_set_view(::ai::inworld::studio::v1alpha::CharacterView value) {
  
  view_ = value;
}
inline void ListCharactersRequest::set_view(::ai::inworld::studio::v1alpha::CharacterView value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.view)
}

// string filter = 5;
inline void ListCharactersRequest::clear_filter() {
  filter_.ClearToEmpty();
}
inline const std::string& ListCharactersRequest::filter() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
  return _internal_filter();
}
inline void ListCharactersRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}
inline std::string* ListCharactersRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListCharactersRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListCharactersRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListCharactersRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}
inline void ListCharactersRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}
inline void ListCharactersRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}
inline std::string* ListCharactersRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListCharactersRequest::release_filter() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListCharactersRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersRequest.filter)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CreateCharacterRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
  return _internal_parent();
}
inline void CreateCharacterRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}
inline std::string* CreateCharacterRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateCharacterRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateCharacterRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateCharacterRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}
inline void CreateCharacterRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}
inline void CreateCharacterRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}
inline std::string* CreateCharacterRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateCharacterRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateCharacterRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateCharacterRequest.parent)
}

// .ai.inworld.studio.v1alpha.Character character = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateCharacterRequest::_internal_has_character() const {
  return this != internal_default_instance() && character_ != nullptr;
}
inline bool CreateCharacterRequest::has_character() const {
  return _internal_has_character();
}
inline void CreateCharacterRequest::clear_character() {
  if (GetArena() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character& CreateCharacterRequest::_internal_character() const {
  const ::ai::inworld::studio::v1alpha::Character* p = character_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character&>(
      ::ai::inworld::studio::v1alpha::_Character_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character& CreateCharacterRequest::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
  return _internal_character();
}
inline void CreateCharacterRequest::unsafe_arena_set_allocated_character(
    ::ai::inworld::studio::v1alpha::Character* character) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_);
  }
  character_ = character;
  if (character) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::release_character() {
  
  ::ai::inworld::studio::v1alpha::Character* temp = character_;
  character_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
  
  ::ai::inworld::studio::v1alpha::Character* temp = character_;
  character_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::_internal_mutable_character() {
  
  if (character_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character>(GetArena());
    character_ = p;
  }
  return character_;
}
inline ::ai::inworld::studio::v1alpha::Character* CreateCharacterRequest::mutable_character() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
  return _internal_mutable_character();
}
inline void CreateCharacterRequest::set_allocated_character(::ai::inworld::studio::v1alpha::Character* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete character_;
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(character);
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  character_ = character;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CreateCharacterRequest.character)
}

// -------------------------------------------------------------------

// UpdateCharacterRequest

// .ai.inworld.studio.v1alpha.Character character = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterRequest::_internal_has_character() const {
  return this != internal_default_instance() && character_ != nullptr;
}
inline bool UpdateCharacterRequest::has_character() const {
  return _internal_has_character();
}
inline void UpdateCharacterRequest::clear_character() {
  if (GetArena() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::Character& UpdateCharacterRequest::_internal_character() const {
  const ::ai::inworld::studio::v1alpha::Character* p = character_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::Character&>(
      ::ai::inworld::studio::v1alpha::_Character_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::Character& UpdateCharacterRequest::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
  return _internal_character();
}
inline void UpdateCharacterRequest::unsafe_arena_set_allocated_character(
    ::ai::inworld::studio::v1alpha::Character* character) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_);
  }
  character_ = character;
  if (character) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::release_character() {
  
  ::ai::inworld::studio::v1alpha::Character* temp = character_;
  character_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
  
  ::ai::inworld::studio::v1alpha::Character* temp = character_;
  character_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::_internal_mutable_character() {
  
  if (character_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::Character>(GetArena());
    character_ = p;
  }
  return character_;
}
inline ::ai::inworld::studio::v1alpha::Character* UpdateCharacterRequest::mutable_character() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
  return _internal_mutable_character();
}
inline void UpdateCharacterRequest::set_allocated_character(::ai::inworld::studio::v1alpha::Character* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete character_;
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(character);
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  character_ = character;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.character)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateCharacterRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateCharacterRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCharacterRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCharacterRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateCharacterRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCharacterRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateCharacterRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateCharacterRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteCharacterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
  return _internal_name();
}
inline void DeleteCharacterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}
inline std::string* DeleteCharacterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteCharacterRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteCharacterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCharacterRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}
inline void DeleteCharacterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}
inline void DeleteCharacterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}
inline std::string* DeleteCharacterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteCharacterRequest.name)
}

// -------------------------------------------------------------------

// DeployCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeployCharacterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeployCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
  return _internal_name();
}
inline void DeployCharacterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}
inline std::string* DeployCharacterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeployCharacterRequest::_internal_name() const {
  return name_.Get();
}
inline void DeployCharacterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeployCharacterRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}
inline void DeployCharacterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}
inline void DeployCharacterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}
inline std::string* DeployCharacterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeployCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeployCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeployCharacterRequest.name)
}

// -------------------------------------------------------------------

// ListCharactersResponse

// repeated .ai.inworld.studio.v1alpha.Character characters = 1;
inline int ListCharactersResponse::_internal_characters_size() const {
  return characters_.size();
}
inline int ListCharactersResponse::characters_size() const {
  return _internal_characters_size();
}
inline void ListCharactersResponse::clear_characters() {
  characters_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character* ListCharactersResponse::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >*
ListCharactersResponse::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return &characters_;
}
inline const ::ai::inworld::studio::v1alpha::Character& ListCharactersResponse::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Character& ListCharactersResponse::characters(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return _internal_characters(index);
}
inline ::ai::inworld::studio::v1alpha::Character* ListCharactersResponse::_internal_add_characters() {
  return characters_.Add();
}
inline ::ai::inworld::studio::v1alpha::Character* ListCharactersResponse::add_characters() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return _internal_add_characters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >&
ListCharactersResponse::characters() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListCharactersResponse.characters)
  return characters_;
}

// string next_page_token = 2;
inline void ListCharactersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListCharactersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListCharactersResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}
inline std::string* ListCharactersResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListCharactersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListCharactersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListCharactersResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}
inline void ListCharactersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}
inline void ListCharactersResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}
inline std::string* ListCharactersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListCharactersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListCharactersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListCharactersResponse.next_page_token)
}

// -------------------------------------------------------------------

// ReplaceCharacterRpmModelRequest

// string character = 1 [(.ai.inworld.options.examples) = {
inline void ReplaceCharacterRpmModelRequest::clear_character() {
  character_.ClearToEmpty();
}
inline const std::string& ReplaceCharacterRpmModelRequest::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
  return _internal_character();
}
inline void ReplaceCharacterRpmModelRequest::set_character(const std::string& value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}
inline std::string* ReplaceCharacterRpmModelRequest::mutable_character() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
  return _internal_mutable_character();
}
inline const std::string& ReplaceCharacterRpmModelRequest::_internal_character() const {
  return character_.Get();
}
inline void ReplaceCharacterRpmModelRequest::_internal_set_character(const std::string& value) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceCharacterRpmModelRequest::set_character(std::string&& value) {
  
  character_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}
inline void ReplaceCharacterRpmModelRequest::set_character(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}
inline void ReplaceCharacterRpmModelRequest::set_character(const char* value,
    size_t size) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}
inline std::string* ReplaceCharacterRpmModelRequest::_internal_mutable_character() {
  
  return character_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceCharacterRpmModelRequest::release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
  return character_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceCharacterRpmModelRequest::set_allocated_character(std::string* character) {
  if (character != nullptr) {
    
  } else {
    
  }
  character_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.character)
}

// string rpm_model_uri = 2;
inline void ReplaceCharacterRpmModelRequest::clear_rpm_model_uri() {
  rpm_model_uri_.ClearToEmpty();
}
inline const std::string& ReplaceCharacterRpmModelRequest::rpm_model_uri() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
  return _internal_rpm_model_uri();
}
inline void ReplaceCharacterRpmModelRequest::set_rpm_model_uri(const std::string& value) {
  _internal_set_rpm_model_uri(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}
inline std::string* ReplaceCharacterRpmModelRequest::mutable_rpm_model_uri() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
  return _internal_mutable_rpm_model_uri();
}
inline const std::string& ReplaceCharacterRpmModelRequest::_internal_rpm_model_uri() const {
  return rpm_model_uri_.Get();
}
inline void ReplaceCharacterRpmModelRequest::_internal_set_rpm_model_uri(const std::string& value) {
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaceCharacterRpmModelRequest::set_rpm_model_uri(std::string&& value) {
  
  rpm_model_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}
inline void ReplaceCharacterRpmModelRequest::set_rpm_model_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}
inline void ReplaceCharacterRpmModelRequest::set_rpm_model_uri(const char* value,
    size_t size) {
  
  rpm_model_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}
inline std::string* ReplaceCharacterRpmModelRequest::_internal_mutable_rpm_model_uri() {
  
  return rpm_model_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaceCharacterRpmModelRequest::release_rpm_model_uri() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
  return rpm_model_uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaceCharacterRpmModelRequest::set_allocated_rpm_model_uri(std::string* rpm_model_uri) {
  if (rpm_model_uri != nullptr) {
    
  } else {
    
  }
  rpm_model_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpm_model_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ReplaceCharacterRpmModelRequest.rpm_model_uri)
}

// -------------------------------------------------------------------

// PreviewPromptTemplateRequest

// string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void PreviewPromptTemplateRequest::clear_character() {
  character_.ClearToEmpty();
}
inline const std::string& PreviewPromptTemplateRequest::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
  return _internal_character();
}
inline void PreviewPromptTemplateRequest::set_character(const std::string& value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}
inline std::string* PreviewPromptTemplateRequest::mutable_character() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
  return _internal_mutable_character();
}
inline const std::string& PreviewPromptTemplateRequest::_internal_character() const {
  return character_.Get();
}
inline void PreviewPromptTemplateRequest::_internal_set_character(const std::string& value) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewPromptTemplateRequest::set_character(std::string&& value) {
  
  character_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}
inline void PreviewPromptTemplateRequest::set_character(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}
inline void PreviewPromptTemplateRequest::set_character(const char* value,
    size_t size) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}
inline std::string* PreviewPromptTemplateRequest::_internal_mutable_character() {
  
  return character_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewPromptTemplateRequest::release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
  return character_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewPromptTemplateRequest::set_allocated_character(std::string* character) {
  if (character != nullptr) {
    
  } else {
    
  }
  character_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.character)
}

// string template = 2;
inline void PreviewPromptTemplateRequest::clear_template_() {
  template__.ClearToEmpty();
}
inline const std::string& PreviewPromptTemplateRequest::template_() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
  return _internal_template_();
}
inline void PreviewPromptTemplateRequest::set_template_(const std::string& value) {
  _internal_set_template_(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}
inline std::string* PreviewPromptTemplateRequest::mutable_template_() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
  return _internal_mutable_template_();
}
inline const std::string& PreviewPromptTemplateRequest::_internal_template_() const {
  return template__.Get();
}
inline void PreviewPromptTemplateRequest::_internal_set_template_(const std::string& value) {
  
  template__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewPromptTemplateRequest::set_template_(std::string&& value) {
  
  template__.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}
inline void PreviewPromptTemplateRequest::set_template_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  template__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}
inline void PreviewPromptTemplateRequest::set_template_(const char* value,
    size_t size) {
  
  template__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}
inline std::string* PreviewPromptTemplateRequest::_internal_mutable_template_() {
  
  return template__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewPromptTemplateRequest::release_template_() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
  return template__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewPromptTemplateRequest::set_allocated_template_(std::string* template_) {
  if (template_ != nullptr) {
    
  } else {
    
  }
  template__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), template_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PreviewPromptTemplateRequest.template)
}

// -------------------------------------------------------------------

// PreviewPromptTempalteResponse

// string prompt = 1;
inline void PreviewPromptTempalteResponse::clear_prompt() {
  prompt_.ClearToEmpty();
}
inline const std::string& PreviewPromptTempalteResponse::prompt() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
  return _internal_prompt();
}
inline void PreviewPromptTempalteResponse::set_prompt(const std::string& value) {
  _internal_set_prompt(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}
inline std::string* PreviewPromptTempalteResponse::mutable_prompt() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
  return _internal_mutable_prompt();
}
inline const std::string& PreviewPromptTempalteResponse::_internal_prompt() const {
  return prompt_.Get();
}
inline void PreviewPromptTempalteResponse::_internal_set_prompt(const std::string& value) {
  
  prompt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PreviewPromptTempalteResponse::set_prompt(std::string&& value) {
  
  prompt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}
inline void PreviewPromptTempalteResponse::set_prompt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prompt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}
inline void PreviewPromptTempalteResponse::set_prompt(const char* value,
    size_t size) {
  
  prompt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}
inline std::string* PreviewPromptTempalteResponse::_internal_mutable_prompt() {
  
  return prompt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PreviewPromptTempalteResponse::release_prompt() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
  return prompt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PreviewPromptTempalteResponse::set_allocated_prompt(std::string* prompt) {
  if (prompt != nullptr) {
    
  } else {
    
  }
  prompt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prompt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.prompt)
}

// repeated string errors = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline int PreviewPromptTempalteResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int PreviewPromptTempalteResponse::errors_size() const {
  return _internal_errors_size();
}
inline void PreviewPromptTempalteResponse::clear_errors() {
  errors_.Clear();
}
inline std::string* PreviewPromptTempalteResponse::add_errors() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return _internal_add_errors();
}
inline const std::string& PreviewPromptTempalteResponse::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const std::string& PreviewPromptTempalteResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return _internal_errors(index);
}
inline std::string* PreviewPromptTempalteResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return errors_.Mutable(index);
}
inline void PreviewPromptTempalteResponse::set_errors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  errors_.Mutable(index)->assign(value);
}
inline void PreviewPromptTempalteResponse::set_errors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  errors_.Mutable(index)->assign(std::move(value));
}
inline void PreviewPromptTempalteResponse::set_errors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::set_errors(int index, const char* value, size_t size) {
  errors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline std::string* PreviewPromptTempalteResponse::_internal_add_errors() {
  return errors_.Add();
}
inline void PreviewPromptTempalteResponse::add_errors(const std::string& value) {
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(std::string&& value) {
  errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline void PreviewPromptTempalteResponse::add_errors(const char* value, size_t size) {
  errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PreviewPromptTempalteResponse::errors() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PreviewPromptTempalteResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.PreviewPromptTempalteResponse.errors)
  return &errors_;
}

// -------------------------------------------------------------------

// ShareCharacterRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ShareCharacterRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ShareCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
  return _internal_name();
}
inline void ShareCharacterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}
inline std::string* ShareCharacterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ShareCharacterRequest::_internal_name() const {
  return name_.Get();
}
inline void ShareCharacterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShareCharacterRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}
inline void ShareCharacterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}
inline void ShareCharacterRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}
inline std::string* ShareCharacterRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShareCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShareCharacterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ShareCharacterRequest.name)
}

// repeated string external_ids = 2;
inline int ShareCharacterRequest::_internal_external_ids_size() const {
  return external_ids_.size();
}
inline int ShareCharacterRequest::external_ids_size() const {
  return _internal_external_ids_size();
}
inline void ShareCharacterRequest::clear_external_ids() {
  external_ids_.Clear();
}
inline std::string* ShareCharacterRequest::add_external_ids() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return _internal_add_external_ids();
}
inline const std::string& ShareCharacterRequest::_internal_external_ids(int index) const {
  return external_ids_.Get(index);
}
inline const std::string& ShareCharacterRequest::external_ids(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return _internal_external_ids(index);
}
inline std::string* ShareCharacterRequest::mutable_external_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return external_ids_.Mutable(index);
}
inline void ShareCharacterRequest::set_external_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  external_ids_.Mutable(index)->assign(value);
}
inline void ShareCharacterRequest::set_external_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  external_ids_.Mutable(index)->assign(std::move(value));
}
inline void ShareCharacterRequest::set_external_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::set_external_ids(int index, const char* value, size_t size) {
  external_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline std::string* ShareCharacterRequest::_internal_add_external_ids() {
  return external_ids_.Add();
}
inline void ShareCharacterRequest::add_external_ids(const std::string& value) {
  external_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(std::string&& value) {
  external_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline void ShareCharacterRequest::add_external_ids(const char* value, size_t size) {
  external_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShareCharacterRequest::external_ids() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return external_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShareCharacterRequest::mutable_external_ids() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ShareCharacterRequest.external_ids)
  return &external_ids_;
}

// -------------------------------------------------------------------

// ListSharedCharactersRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListSharedCharactersRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListSharedCharactersRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
  return _internal_parent();
}
inline void ListSharedCharactersRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}
inline std::string* ListSharedCharactersRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListSharedCharactersRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSharedCharactersRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSharedCharactersRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}
inline void ListSharedCharactersRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}
inline void ListSharedCharactersRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}
inline std::string* ListSharedCharactersRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSharedCharactersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSharedCharactersRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.parent)
}

// int32 page_size = 2;
inline void ListSharedCharactersRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSharedCharactersRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSharedCharactersRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_size)
  return _internal_page_size();
}
inline void ListSharedCharactersRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListSharedCharactersRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_size)
}

// string page_token = 3;
inline void ListSharedCharactersRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListSharedCharactersRequest::page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
  return _internal_page_token();
}
inline void ListSharedCharactersRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}
inline std::string* ListSharedCharactersRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListSharedCharactersRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSharedCharactersRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSharedCharactersRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}
inline void ListSharedCharactersRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}
inline void ListSharedCharactersRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}
inline std::string* ListSharedCharactersRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSharedCharactersRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSharedCharactersRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListSharedCharactersRequest.page_token)
}

// -------------------------------------------------------------------

// ListSharedCharactersResponse

// repeated .ai.inworld.studio.v1alpha.Character shared_characters = 1;
inline int ListSharedCharactersResponse::_internal_shared_characters_size() const {
  return shared_characters_.size();
}
inline int ListSharedCharactersResponse::shared_characters_size() const {
  return _internal_shared_characters_size();
}
inline void ListSharedCharactersResponse::clear_shared_characters() {
  shared_characters_.Clear();
}
inline ::ai::inworld::studio::v1alpha::Character* ListSharedCharactersResponse::mutable_shared_characters(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return shared_characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >*
ListSharedCharactersResponse::mutable_shared_characters() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return &shared_characters_;
}
inline const ::ai::inworld::studio::v1alpha::Character& ListSharedCharactersResponse::_internal_shared_characters(int index) const {
  return shared_characters_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::Character& ListSharedCharactersResponse::shared_characters(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return _internal_shared_characters(index);
}
inline ::ai::inworld::studio::v1alpha::Character* ListSharedCharactersResponse::_internal_add_shared_characters() {
  return shared_characters_.Add();
}
inline ::ai::inworld::studio::v1alpha::Character* ListSharedCharactersResponse::add_shared_characters() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return _internal_add_shared_characters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::Character >&
ListSharedCharactersResponse::shared_characters() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.shared_characters)
  return shared_characters_;
}

// string next_page_token = 2;
inline void ListSharedCharactersResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListSharedCharactersResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListSharedCharactersResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}
inline std::string* ListSharedCharactersResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListSharedCharactersResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSharedCharactersResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListSharedCharactersResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}
inline void ListSharedCharactersResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}
inline void ListSharedCharactersResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}
inline std::string* ListSharedCharactersResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListSharedCharactersResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListSharedCharactersResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListSharedCharactersResponse.next_page_token)
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings_ConversationConfig_EngineSpec

// string engine = 1;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_engine() {
  engine_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings_ConversationConfig_EngineSpec::engine() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
  return _internal_engine();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_engine(const std::string& value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}
inline std::string* CharacterAdvancedSettings_ConversationConfig_EngineSpec::mutable_engine() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
  return _internal_mutable_engine();
}
inline const std::string& CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_engine() const {
  return engine_.Get();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_engine(const std::string& value) {
  
  engine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_engine(std::string&& value) {
  
  engine_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_engine(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  engine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_engine(const char* value,
    size_t size) {
  
  engine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}
inline std::string* CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_mutable_engine() {
  
  return engine_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterAdvancedSettings_ConversationConfig_EngineSpec::release_engine() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
  return engine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_allocated_engine(std::string* engine) {
  if (engine != nullptr) {
    
  } else {
    
  }
  engine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.engine)
}

// float temperature = 2;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_temperature() {
  temperature_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_temperature() const {
  return temperature_;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::temperature() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.temperature)
  return _internal_temperature();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_temperature(float value) {
  
  temperature_ = value;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.temperature)
}

// int32 max_tokens = 3;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_max_tokens() {
  max_tokens_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_max_tokens() const {
  return max_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CharacterAdvancedSettings_ConversationConfig_EngineSpec::max_tokens() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.max_tokens)
  return _internal_max_tokens();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_max_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_tokens_ = value;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_max_tokens(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_tokens(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.max_tokens)
}

// float frequency_penalty = 4;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_frequency_penalty() {
  frequency_penalty_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_frequency_penalty() const {
  return frequency_penalty_;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::frequency_penalty() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.frequency_penalty)
  return _internal_frequency_penalty();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_frequency_penalty(float value) {
  
  frequency_penalty_ = value;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_frequency_penalty(float value) {
  _internal_set_frequency_penalty(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.frequency_penalty)
}

// float presence_penalty = 5;
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::clear_presence_penalty() {
  presence_penalty_ = 0;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_presence_penalty() const {
  return presence_penalty_;
}
inline float CharacterAdvancedSettings_ConversationConfig_EngineSpec::presence_penalty() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.presence_penalty)
  return _internal_presence_penalty();
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::_internal_set_presence_penalty(float value) {
  
  presence_penalty_ = value;
}
inline void CharacterAdvancedSettings_ConversationConfig_EngineSpec::set_presence_penalty(float value) {
  _internal_set_presence_penalty(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec.presence_penalty)
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings_ConversationConfig

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.EngineSpec engine_spec = 1;
inline bool CharacterAdvancedSettings_ConversationConfig::_internal_has_engine_spec() const {
  return this != internal_default_instance() && engine_spec_ != nullptr;
}
inline bool CharacterAdvancedSettings_ConversationConfig::has_engine_spec() const {
  return _internal_has_engine_spec();
}
inline void CharacterAdvancedSettings_ConversationConfig::clear_engine_spec() {
  if (GetArena() == nullptr && engine_spec_ != nullptr) {
    delete engine_spec_;
  }
  engine_spec_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& CharacterAdvancedSettings_ConversationConfig::_internal_engine_spec() const {
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* p = engine_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec&>(
      ::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_ConversationConfig_EngineSpec_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec& CharacterAdvancedSettings_ConversationConfig::engine_spec() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
  return _internal_engine_spec();
}
inline void CharacterAdvancedSettings_ConversationConfig::unsafe_arena_set_allocated_engine_spec(
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* engine_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engine_spec_);
  }
  engine_spec_ = engine_spec;
  if (engine_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::release_engine_spec() {
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* temp = engine_spec_;
  engine_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::unsafe_arena_release_engine_spec() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* temp = engine_spec_;
  engine_spec_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::_internal_mutable_engine_spec() {
  
  if (engine_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec>(GetArena());
    engine_spec_ = p;
  }
  return engine_spec_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* CharacterAdvancedSettings_ConversationConfig::mutable_engine_spec() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
  return _internal_mutable_engine_spec();
}
inline void CharacterAdvancedSettings_ConversationConfig::set_allocated_engine_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig_EngineSpec* engine_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete engine_spec_;
  }
  if (engine_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(engine_spec);
    if (message_arena != submessage_arena) {
      engine_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engine_spec, submessage_arena);
    }
    
  } else {
    
  }
  engine_spec_ = engine_spec;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig.engine_spec)
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings_SafetySpec

// repeated .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetyTopicName allowed_topics = 1;
inline int CharacterAdvancedSettings_SafetySpec::_internal_allowed_topics_size() const {
  return allowed_topics_.size();
}
inline int CharacterAdvancedSettings_SafetySpec::allowed_topics_size() const {
  return _internal_allowed_topics_size();
}
inline void CharacterAdvancedSettings_SafetySpec::clear_allowed_topics() {
  allowed_topics_.Clear();
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetySpec::_internal_allowed_topics(int index) const {
  return static_cast< ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName >(allowed_topics_.Get(index));
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName CharacterAdvancedSettings_SafetySpec::allowed_topics(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  return _internal_allowed_topics(index);
}
inline void CharacterAdvancedSettings_SafetySpec::set_allowed_topics(int index, ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value) {
  allowed_topics_.Set(index, value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
}
inline void CharacterAdvancedSettings_SafetySpec::_internal_add_allowed_topics(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value) {
  allowed_topics_.Add(value);
}
inline void CharacterAdvancedSettings_SafetySpec::add_allowed_topics(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName value) {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  _internal_add_allowed_topics(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CharacterAdvancedSettings_SafetySpec::allowed_topics() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  return allowed_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CharacterAdvancedSettings_SafetySpec::_internal_mutable_allowed_topics() {
  return &allowed_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CharacterAdvancedSettings_SafetySpec::mutable_allowed_topics() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec.allowed_topics)
  return _internal_mutable_allowed_topics();
}

// -------------------------------------------------------------------

// CharacterAdvancedSettings

// string name = 1 [(.ai.inworld.options.examples) = {
inline void CharacterAdvancedSettings::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
  return _internal_name();
}
inline void CharacterAdvancedSettings::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}
inline std::string* CharacterAdvancedSettings::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
  return _internal_mutable_name();
}
inline const std::string& CharacterAdvancedSettings::_internal_name() const {
  return name_.Get();
}
inline void CharacterAdvancedSettings::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CharacterAdvancedSettings::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}
inline void CharacterAdvancedSettings::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}
inline void CharacterAdvancedSettings::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}
inline std::string* CharacterAdvancedSettings::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterAdvancedSettings::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterAdvancedSettings::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.name)
}

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.ConversationConfig conversation_config = 2;
inline bool CharacterAdvancedSettings::_internal_has_conversation_config() const {
  return this != internal_default_instance() && conversation_config_ != nullptr;
}
inline bool CharacterAdvancedSettings::has_conversation_config() const {
  return _internal_has_conversation_config();
}
inline void CharacterAdvancedSettings::clear_conversation_config() {
  if (GetArena() == nullptr && conversation_config_ != nullptr) {
    delete conversation_config_;
  }
  conversation_config_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& CharacterAdvancedSettings::_internal_conversation_config() const {
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* p = conversation_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig&>(
      ::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_ConversationConfig_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig& CharacterAdvancedSettings::conversation_config() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
  return _internal_conversation_config();
}
inline void CharacterAdvancedSettings::unsafe_arena_set_allocated_conversation_config(
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* conversation_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conversation_config_);
  }
  conversation_config_ = conversation_config;
  if (conversation_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::release_conversation_config() {
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* temp = conversation_config_;
  conversation_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::unsafe_arena_release_conversation_config() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* temp = conversation_config_;
  conversation_config_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::_internal_mutable_conversation_config() {
  
  if (conversation_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig>(GetArena());
    conversation_config_ = p;
  }
  return conversation_config_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* CharacterAdvancedSettings::mutable_conversation_config() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
  return _internal_mutable_conversation_config();
}
inline void CharacterAdvancedSettings::set_allocated_conversation_config(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_ConversationConfig* conversation_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conversation_config_;
  }
  if (conversation_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conversation_config);
    if (message_arena != submessage_arena) {
      conversation_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conversation_config, submessage_arena);
    }
    
  } else {
    
  }
  conversation_config_ = conversation_config;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.conversation_config)
}

// string custom_prompt_template = 4;
inline void CharacterAdvancedSettings::clear_custom_prompt_template() {
  custom_prompt_template_.ClearToEmpty();
}
inline const std::string& CharacterAdvancedSettings::custom_prompt_template() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
  return _internal_custom_prompt_template();
}
inline void CharacterAdvancedSettings::set_custom_prompt_template(const std::string& value) {
  _internal_set_custom_prompt_template(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}
inline std::string* CharacterAdvancedSettings::mutable_custom_prompt_template() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
  return _internal_mutable_custom_prompt_template();
}
inline const std::string& CharacterAdvancedSettings::_internal_custom_prompt_template() const {
  return custom_prompt_template_.Get();
}
inline void CharacterAdvancedSettings::_internal_set_custom_prompt_template(const std::string& value) {
  
  custom_prompt_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CharacterAdvancedSettings::set_custom_prompt_template(std::string&& value) {
  
  custom_prompt_template_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}
inline void CharacterAdvancedSettings::set_custom_prompt_template(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_prompt_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}
inline void CharacterAdvancedSettings::set_custom_prompt_template(const char* value,
    size_t size) {
  
  custom_prompt_template_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}
inline std::string* CharacterAdvancedSettings::_internal_mutable_custom_prompt_template() {
  
  return custom_prompt_template_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CharacterAdvancedSettings::release_custom_prompt_template() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
  return custom_prompt_template_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CharacterAdvancedSettings::set_allocated_custom_prompt_template(std::string* custom_prompt_template) {
  if (custom_prompt_template != nullptr) {
    
  } else {
    
  }
  custom_prompt_template_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_prompt_template,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.custom_prompt_template)
}

// .ai.inworld.studio.v1alpha.CharacterAdvancedSettings.SafetySpec speech_safety_spec = 5;
inline bool CharacterAdvancedSettings::_internal_has_speech_safety_spec() const {
  return this != internal_default_instance() && speech_safety_spec_ != nullptr;
}
inline bool CharacterAdvancedSettings::has_speech_safety_spec() const {
  return _internal_has_speech_safety_spec();
}
inline void CharacterAdvancedSettings::clear_speech_safety_spec() {
  if (GetArena() == nullptr && speech_safety_spec_ != nullptr) {
    delete speech_safety_spec_;
  }
  speech_safety_spec_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& CharacterAdvancedSettings::_internal_speech_safety_spec() const {
  const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* p = speech_safety_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec&>(
      ::ai::inworld::studio::v1alpha::_CharacterAdvancedSettings_SafetySpec_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec& CharacterAdvancedSettings::speech_safety_spec() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
  return _internal_speech_safety_spec();
}
inline void CharacterAdvancedSettings::unsafe_arena_set_allocated_speech_safety_spec(
    ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* speech_safety_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speech_safety_spec_);
  }
  speech_safety_spec_ = speech_safety_spec;
  if (speech_safety_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::release_speech_safety_spec() {
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* temp = speech_safety_spec_;
  speech_safety_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::unsafe_arena_release_speech_safety_spec() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
  
  ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* temp = speech_safety_spec_;
  speech_safety_spec_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::_internal_mutable_speech_safety_spec() {
  
  if (speech_safety_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec>(GetArena());
    speech_safety_spec_ = p;
  }
  return speech_safety_spec_;
}
inline ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* CharacterAdvancedSettings::mutable_speech_safety_spec() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
  return _internal_mutable_speech_safety_spec();
}
inline void CharacterAdvancedSettings::set_allocated_speech_safety_spec(::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetySpec* speech_safety_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete speech_safety_spec_;
  }
  if (speech_safety_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(speech_safety_spec);
    if (message_arena != submessage_arena) {
      speech_safety_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speech_safety_spec, submessage_arena);
    }
    
  } else {
    
  }
  speech_safety_spec_ = speech_safety_spec;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CharacterAdvancedSettings.speech_safety_spec)
}

// -------------------------------------------------------------------

// GetCharacterShareInfoRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetCharacterShareInfoRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetCharacterShareInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
  return _internal_name();
}
inline void GetCharacterShareInfoRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}
inline std::string* GetCharacterShareInfoRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetCharacterShareInfoRequest::_internal_name() const {
  return name_.Get();
}
inline void GetCharacterShareInfoRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCharacterShareInfoRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}
inline void GetCharacterShareInfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}
inline void GetCharacterShareInfoRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}
inline std::string* GetCharacterShareInfoRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCharacterShareInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCharacterShareInfoRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetCharacterShareInfoRequest.name)
}

// -------------------------------------------------------------------

// CharacterShareInfo

// repeated string external_ids = 1;
inline int CharacterShareInfo::_internal_external_ids_size() const {
  return external_ids_.size();
}
inline int CharacterShareInfo::external_ids_size() const {
  return _internal_external_ids_size();
}
inline void CharacterShareInfo::clear_external_ids() {
  external_ids_.Clear();
}
inline std::string* CharacterShareInfo::add_external_ids() {
  // @@protoc_insertion_point(field_add_mutable:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return _internal_add_external_ids();
}
inline const std::string& CharacterShareInfo::_internal_external_ids(int index) const {
  return external_ids_.Get(index);
}
inline const std::string& CharacterShareInfo::external_ids(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return _internal_external_ids(index);
}
inline std::string* CharacterShareInfo::mutable_external_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return external_ids_.Mutable(index);
}
inline void CharacterShareInfo::set_external_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  external_ids_.Mutable(index)->assign(value);
}
inline void CharacterShareInfo::set_external_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  external_ids_.Mutable(index)->assign(std::move(value));
}
inline void CharacterShareInfo::set_external_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::set_external_ids(int index, const char* value, size_t size) {
  external_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline std::string* CharacterShareInfo::_internal_add_external_ids() {
  return external_ids_.Add();
}
inline void CharacterShareInfo::add_external_ids(const std::string& value) {
  external_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(std::string&& value) {
  external_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  external_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline void CharacterShareInfo::add_external_ids(const char* value, size_t size) {
  external_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CharacterShareInfo::external_ids() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return external_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CharacterShareInfo::mutable_external_ids() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.CharacterShareInfo.external_ids)
  return &external_ids_;
}

// -------------------------------------------------------------------

// CheckDeployInfoRequest

// string character = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void CheckDeployInfoRequest::clear_character() {
  character_.ClearToEmpty();
}
inline const std::string& CheckDeployInfoRequest::character() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
  return _internal_character();
}
inline void CheckDeployInfoRequest::set_character(const std::string& value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}
inline std::string* CheckDeployInfoRequest::mutable_character() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
  return _internal_mutable_character();
}
inline const std::string& CheckDeployInfoRequest::_internal_character() const {
  return character_.Get();
}
inline void CheckDeployInfoRequest::_internal_set_character(const std::string& value) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CheckDeployInfoRequest::set_character(std::string&& value) {
  
  character_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}
inline void CheckDeployInfoRequest::set_character(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}
inline void CheckDeployInfoRequest::set_character(const char* value,
    size_t size) {
  
  character_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}
inline std::string* CheckDeployInfoRequest::_internal_mutable_character() {
  
  return character_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CheckDeployInfoRequest::release_character() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
  return character_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CheckDeployInfoRequest::set_allocated_character(std::string* character) {
  if (character != nullptr) {
    
  } else {
    
  }
  character_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), character,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.CheckDeployInfoRequest.character)
}

// -------------------------------------------------------------------

// CheckDeployInfoResponse

// bool is_fresh = 1;
inline void CheckDeployInfoResponse::clear_is_fresh() {
  is_fresh_ = false;
}
inline bool CheckDeployInfoResponse::_internal_is_fresh() const {
  return is_fresh_;
}
inline bool CheckDeployInfoResponse::is_fresh() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.CheckDeployInfoResponse.is_fresh)
  return _internal_is_fresh();
}
inline void CheckDeployInfoResponse::_internal_set_is_fresh(bool value) {
  
  is_fresh_ = value;
}
inline void CheckDeployInfoResponse::set_is_fresh(bool value) {
  _internal_set_is_fresh(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.CheckDeployInfoResponse.is_fresh)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_Pronoun_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_ExampleDialogStyle_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage>() {
  return ::ai::inworld::studio::v1alpha::Character_CharacterDescription_LifeStage_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::Character_Tag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::Character_Tag>() {
  return ::ai::inworld::studio::v1alpha::Character_Tag_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName>() {
  return ::ai::inworld::studio::v1alpha::CharacterAdvancedSettings_SafetyTopicName_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::CharacterView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::CharacterView>() {
  return ::ai::inworld::studio::v1alpha::CharacterView_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::CharacterItemView> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::CharacterItemView>() {
  return ::ai::inworld::studio::v1alpha::CharacterItemView_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_characters_2eproto
