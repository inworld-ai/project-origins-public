// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scenes.proto
#ifndef GRPC_scenes_2eproto__INCLUDED
#define GRPC_scenes_2eproto__INCLUDED

#include "scenes.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// Scenes management service
class Scenes final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.studio.v1alpha.Scenes";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPC to deploy the scene: store scene character composition with
    // character overloads and related information (triggers etc) in an
    // storage(GSC).
    virtual ::grpc::Status DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeploySceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeploySceneRaw(context, request, cq));
    }
    // RPC to get one scene
    virtual ::grpc::Status GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>> AsyncGetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>>(AsyncGetSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>> PrepareAsyncGetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>>(PrepareAsyncGetSceneRaw(context, request, cq));
    }
    // RPC to get list of scenes
    virtual ::grpc::Status ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListScenesResponse>> AsyncListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListScenesResponse>>(AsyncListScenesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListScenesResponse>> PrepareAsyncListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListScenesResponse>>(PrepareAsyncListScenesRaw(context, request, cq));
    }
    // RPC to update a scene
    virtual ::grpc::Status UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>> AsyncUpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>>(AsyncUpdateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>> PrepareAsyncUpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>>(PrepareAsyncUpdateSceneRaw(context, request, cq));
    }
    // RPC to create a scene
    virtual ::grpc::Status CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>> AsyncCreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>>(AsyncCreateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>> PrepareAsyncCreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>>(PrepareAsyncCreateSceneRaw(context, request, cq));
    }
    // RPC to delete a scene
    virtual ::grpc::Status DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteSceneRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // RPC to deploy the scene: store scene character composition with
      // character overloads and related information (triggers etc) in an
      // storage(GSC).
      virtual void DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to get one scene
      virtual void GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to get list of scenes
      virtual void ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to update a scene
      virtual void UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to create a scene
      virtual void CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to delete a scene
      virtual void DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeploySceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeploySceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>* AsyncGetSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>* PrepareAsyncGetSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListScenesResponse>* AsyncListScenesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::ListScenesResponse>* PrepareAsyncListScenesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>* AsyncUpdateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>* PrepareAsyncUpdateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>* AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::studio::v1alpha::Scene>* PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeploySceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeploySceneRaw(context, request, cq));
    }
    ::grpc::Status GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>> AsyncGetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>>(AsyncGetSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>> PrepareAsyncGetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>>(PrepareAsyncGetSceneRaw(context, request, cq));
    }
    ::grpc::Status ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>> AsyncListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>>(AsyncListScenesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>> PrepareAsyncListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>>(PrepareAsyncListScenesRaw(context, request, cq));
    }
    ::grpc::Status UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>> AsyncUpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>>(AsyncUpdateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>> PrepareAsyncUpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>>(PrepareAsyncUpdateSceneRaw(context, request, cq));
    }
    ::grpc::Status CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::ai::inworld::studio::v1alpha::Scene* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>> AsyncCreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>>(AsyncCreateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>> PrepareAsyncCreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>>(PrepareAsyncCreateSceneRaw(context, request, cq));
    }
    ::grpc::Status DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteSceneRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeployScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListScenes(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteScene(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeploySceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeploySceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* AsyncGetSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* PrepareAsyncGetSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>* AsyncListScenesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListScenesResponse>* PrepareAsyncListScenesRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* AsyncUpdateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* PrepareAsyncUpdateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::Scene>* PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DeployScene_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScene_;
    const ::grpc::internal::RpcMethod rpcmethod_ListScenes_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateScene_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateScene_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteScene_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPC to deploy the scene: store scene character composition with
    // character overloads and related information (triggers etc) in an
    // storage(GSC).
    virtual ::grpc::Status DeployScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response);
    // RPC to get one scene
    virtual ::grpc::Status GetScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response);
    // RPC to get list of scenes
    virtual ::grpc::Status ListScenes(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response);
    // RPC to update a scene
    virtual ::grpc::Status UpdateScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response);
    // RPC to create a scene
    virtual ::grpc::Status CreateScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response);
    // RPC to delete a scene
    virtual ::grpc::Status DeleteScene(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeployScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeployScene() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeployScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeployScene(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetScene() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScene(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Scene>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListScenes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListScenes() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListScenes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScenes(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListScenes(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::ListScenesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateScene() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScene(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Scene>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateScene() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScene(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::studio::v1alpha::Scene>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteScene() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteScene(::grpc::ServerContext* context, ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeployScene<WithAsyncMethod_GetScene<WithAsyncMethod_ListScenes<WithAsyncMethod_UpdateScene<WithAsyncMethod_CreateScene<WithAsyncMethod_DeleteScene<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeployScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeployScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* request, ::google::protobuf::Empty* response) { return this->DeployScene(context, request, response); }));}
    void SetMessageAllocatorFor_DeployScene(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeployScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeployScene(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeployScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::GetSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response) { return this->GetScene(context, request, response); }));}
    void SetMessageAllocatorFor_GetScene(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetScene(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListScenes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListScenes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::ListScenesRequest* request, ::ai::inworld::studio::v1alpha::ListScenesResponse* response) { return this->ListScenes(context, request, response); }));}
    void SetMessageAllocatorFor_ListScenes(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListScenes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScenes(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListScenes(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListScenes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response) { return this->UpdateScene(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateScene(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* request, ::ai::inworld::studio::v1alpha::Scene* response) { return this->CreateScene(context, request, response); }));}
    void SetMessageAllocatorFor_CreateScene(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* request, ::google::protobuf::Empty* response) { return this->DeleteScene(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteScene(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteScene(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DeployScene<ExperimentalWithCallbackMethod_GetScene<ExperimentalWithCallbackMethod_ListScenes<ExperimentalWithCallbackMethod_UpdateScene<ExperimentalWithCallbackMethod_CreateScene<ExperimentalWithCallbackMethod_DeleteScene<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DeployScene<ExperimentalWithCallbackMethod_GetScene<ExperimentalWithCallbackMethod_ListScenes<ExperimentalWithCallbackMethod_UpdateScene<ExperimentalWithCallbackMethod_CreateScene<ExperimentalWithCallbackMethod_DeleteScene<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DeployScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeployScene() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeployScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetScene() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListScenes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListScenes() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListScenes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScenes(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateScene() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateScene() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteScene() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeployScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeployScene() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DeployScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeployScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetScene() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListScenes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListScenes() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListScenes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScenes(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListScenes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateScene() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateScene() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteScene() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeployScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeployScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeployScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeployScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeployScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeployScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeployScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListScenes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListScenes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListScenes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListScenes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListScenes(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListScenes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListScenes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeployScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeployScene() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeploySceneRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeployScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeployScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeployScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeploySceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeployScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeploySceneRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetScene() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::GetSceneRequest, ::ai::inworld::studio::v1alpha::Scene>* streamer) {
                       return this->StreamedGetScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::GetSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::GetSceneRequest,::ai::inworld::studio::v1alpha::Scene>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListScenes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListScenes() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::ListScenesRequest, ::ai::inworld::studio::v1alpha::ListScenesResponse>* streamer) {
                       return this->StreamedListScenes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListScenes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListScenes(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::ListScenesRequest* /*request*/, ::ai::inworld::studio::v1alpha::ListScenesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListScenes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::ListScenesRequest,::ai::inworld::studio::v1alpha::ListScenesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateScene() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::UpdateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>* streamer) {
                       return this->StreamedUpdateScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::UpdateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::UpdateSceneRequest,::ai::inworld::studio::v1alpha::Scene>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateScene() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::CreateSceneRequest, ::ai::inworld::studio::v1alpha::Scene>* streamer) {
                       return this->StreamedCreateScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::CreateSceneRequest* /*request*/, ::ai::inworld::studio::v1alpha::Scene* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::CreateSceneRequest,::ai::inworld::studio::v1alpha::Scene>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteScene() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::studio::v1alpha::DeleteSceneRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::studio::v1alpha::DeleteSceneRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::studio::v1alpha::DeleteSceneRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeployScene<WithStreamedUnaryMethod_GetScene<WithStreamedUnaryMethod_ListScenes<WithStreamedUnaryMethod_UpdateScene<WithStreamedUnaryMethod_CreateScene<WithStreamedUnaryMethod_DeleteScene<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeployScene<WithStreamedUnaryMethod_GetScene<WithStreamedUnaryMethod_ListScenes<WithStreamedUnaryMethod_UpdateScene<WithStreamedUnaryMethod_CreateScene<WithStreamedUnaryMethod_DeleteScene<Service > > > > > > StreamedService;
};

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_scenes_2eproto__INCLUDED
