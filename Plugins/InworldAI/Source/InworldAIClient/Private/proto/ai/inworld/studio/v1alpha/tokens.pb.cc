// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai/inworld/studio/v1alpha/tokens.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/tokens.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class SessionAccessTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionAccessToken> _instance;
} _SessionAccessToken_default_instance_;
class GenerateSessionTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateSessionTokenRequest> _instance;
} _GenerateSessionTokenRequest_default_instance_;
class GenerateDefaultSessionTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateDefaultSessionTokenRequest> _instance;
} _GenerateDefaultSessionTokenRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
static void InitDefaultsscc_info_GenerateDefaultSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GenerateDefaultSessionTokenRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateDefaultSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateDefaultSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto}, {}};

static void InitDefaultsscc_info_GenerateSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_GenerateSessionTokenRequest_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto}, {}};

static void InitDefaultsscc_info_SessionAccessToken_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ai::inworld::studio::v1alpha::_SessionAccessToken_default_instance_;
    new (ptr) ::ai::inworld::studio::v1alpha::SessionAccessToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionAccessToken_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SessionAccessToken_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SessionAccessToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SessionAccessToken, token_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SessionAccessToken, type_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SessionAccessToken, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::SessionAccessToken, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest, parent_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ai::inworld::studio::v1alpha::SessionAccessToken)},
  { 9, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest)},
  { 15, -1, sizeof(::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_SessionAccessToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GenerateSessionTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ai::inworld::studio::v1alpha::_GenerateDefaultSessionTokenRequest_default_instance_),
};

const char descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&ai/inworld/studio/v1alpha/tokens.proto"
  "\022\031ai.inworld.studio.v1alpha\032\034google/api/"
  "annotations.proto\032\027google/api/client.pro"
  "to\032\037google/api/field_behavior.proto\032\031goo"
  "gle/api/resource.proto\032\033google/protobuf/"
  "empty.proto\032\037google/protobuf/timestamp.p"
  "roto\"z\n\022SessionAccessToken\022\r\n\005token\030\001 \001("
  "\t\022\014\n\004type\030\002 \001(\t\0223\n\017expiration_time\030\003 \001(\013"
  "2\032.google.protobuf.Timestamp\022\022\n\nsession_"
  "id\030\004 \001(\t\"/\n\033GenerateSessionTokenRequest\022"
  "\020\n\003key\030\001 \001(\tB\003\340A\002\"V\n\"GenerateDefaultSess"
  "ionTokenRequest\0220\n\006parent\030\001 \001(\tB \340A\002\372A\032\n"
  "\030api.inworld.ai/Workspace2\213\003\n\006Tokens\022\257\001\n"
  "\024GenerateSessionToken\0226.ai.inworld.studi"
  "o.v1alpha.GenerateSessionTokenRequest\032-."
  "ai.inworld.studio.v1alpha.SessionAccessT"
  "oken\"0\202\323\344\223\002*\"%/v1alpha/tokens/sessionTok"
  "en:generate:\001*\022\316\001\n\033GenerateDefaultSessio"
  "nToken\022=.ai.inworld.studio.v1alpha.Gener"
  "ateDefaultSessionTokenRequest\032-.ai.inwor"
  "ld.studio.v1alpha.SessionAccessToken\"A\202\323"
  "\344\223\0022\"-/v1alpha/{parent=workspaces/*}/tok"
  "en:generate:\001*\332A\006parentB\225\001\n\031ai.inworld.s"
  "tudio.v1alphaB\013TokensProtoP\001ZMgithub.com"
  "/inworld-ai/inworld/serving/grpc-gateway"
  "/build/proto/studio/v1alpha\252\002\031Ai.Inworld"
  ".Studio.V1Alphab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_sccs[3] = {
  &scc_info_GenerateDefaultSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base,
  &scc_info_GenerateSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base,
  &scc_info_SessionAccessToken_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto = {
  false, false, descriptor_table_protodef_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto, "ai/inworld/studio/v1alpha/tokens.proto", 1063,
  &descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_once, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_sccs, descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto_deps, 3, 6,
  schemas, file_default_instances, TableStruct_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto::offsets,
  file_level_metadata_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto, 3, file_level_enum_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto, file_level_service_descriptors_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto)), true);
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

// ===================================================================

class SessionAccessToken::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time(const SessionAccessToken* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SessionAccessToken::_Internal::expiration_time(const SessionAccessToken* msg) {
  return *msg->expiration_time_;
}
void SessionAccessToken::clear_expiration_time() {
  if (GetArena() == nullptr && expiration_time_ != nullptr) {
    delete expiration_time_;
  }
  expiration_time_ = nullptr;
}
SessionAccessToken::SessionAccessToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.SessionAccessToken)
}
SessionAccessToken::SessionAccessToken(const SessionAccessToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_expiration_time()) {
    expiration_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiration_time_);
  } else {
    expiration_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.SessionAccessToken)
}

void SessionAccessToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionAccessToken_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiration_time_ = nullptr;
}

SessionAccessToken::~SessionAccessToken() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.SessionAccessToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionAccessToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expiration_time_;
}

void SessionAccessToken::ArenaDtor(void* object) {
  SessionAccessToken* _this = reinterpret_cast< SessionAccessToken* >(object);
  (void)_this;
}
void SessionAccessToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionAccessToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionAccessToken& SessionAccessToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionAccessToken_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base);
  return *internal_default_instance();
}


void SessionAccessToken::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  type_.ClearToEmpty();
  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && expiration_time_ != nullptr) {
    delete expiration_time_;
  }
  expiration_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionAccessToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.SessionAccessToken.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.SessionAccessToken.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.SessionAccessToken.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionAccessToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.SessionAccessToken.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.SessionAccessToken.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp expiration_time = 3;
  if (this->has_expiration_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expiration_time(this), target, stream);
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.SessionAccessToken.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.SessionAccessToken)
  return target;
}

size_t SessionAccessToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string session_id = 4;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .google.protobuf.Timestamp expiration_time = 3;
  if (this->has_expiration_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionAccessToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionAccessToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionAccessToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.SessionAccessToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.SessionAccessToken)
    MergeFrom(*source);
  }
}

void SessionAccessToken::MergeFrom(const SessionAccessToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_expiration_time()) {
    _internal_mutable_expiration_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiration_time());
  }
}

void SessionAccessToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionAccessToken::CopyFrom(const SessionAccessToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.SessionAccessToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionAccessToken::IsInitialized() const {
  return true;
}

void SessionAccessToken::InternalSwap(SessionAccessToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expiration_time_, other->expiration_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionAccessToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateSessionTokenRequest::_Internal {
 public:
};

GenerateSessionTokenRequest::GenerateSessionTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
}
GenerateSessionTokenRequest::GenerateSessionTokenRequest(const GenerateSessionTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
}

void GenerateSessionTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenerateSessionTokenRequest::~GenerateSessionTokenRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateSessionTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateSessionTokenRequest::ArenaDtor(void* object) {
  GenerateSessionTokenRequest* _this = reinterpret_cast< GenerateSessionTokenRequest* >(object);
  (void)_this;
}
void GenerateSessionTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateSessionTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateSessionTokenRequest& GenerateSessionTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base);
  return *internal_default_instance();
}


void GenerateSessionTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateSessionTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateSessionTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateSessionTokenRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  return target;
}

size_t GenerateSessionTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateSessionTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateSessionTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateSessionTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
    MergeFrom(*source);
  }
}

void GenerateSessionTokenRequest::MergeFrom(const GenerateSessionTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void GenerateSessionTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateSessionTokenRequest::CopyFrom(const GenerateSessionTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateSessionTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateSessionTokenRequest::IsInitialized() const {
  return true;
}

void GenerateSessionTokenRequest::InternalSwap(GenerateSessionTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateSessionTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateDefaultSessionTokenRequest::_Internal {
 public:
};

GenerateDefaultSessionTokenRequest::GenerateDefaultSessionTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
}
GenerateDefaultSessionTokenRequest::GenerateDefaultSessionTokenRequest(const GenerateDefaultSessionTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
}

void GenerateDefaultSessionTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateDefaultSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenerateDefaultSessionTokenRequest::~GenerateDefaultSessionTokenRequest() {
  // @@protoc_insertion_point(destructor:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateDefaultSessionTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateDefaultSessionTokenRequest::ArenaDtor(void* object) {
  GenerateDefaultSessionTokenRequest* _this = reinterpret_cast< GenerateDefaultSessionTokenRequest* >(object);
  (void)_this;
}
void GenerateDefaultSessionTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateDefaultSessionTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateDefaultSessionTokenRequest& GenerateDefaultSessionTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateDefaultSessionTokenRequest_ai_2finworld_2fstudio_2fv1alpha_2ftokens_2eproto.base);
  return *internal_default_instance();
}


void GenerateDefaultSessionTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateDefaultSessionTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateDefaultSessionTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  return target;
}

size_t GenerateDefaultSessionTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateDefaultSessionTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateDefaultSessionTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateDefaultSessionTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
    MergeFrom(*source);
  }
}

void GenerateDefaultSessionTokenRequest::MergeFrom(const GenerateDefaultSessionTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
}

void GenerateDefaultSessionTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateDefaultSessionTokenRequest::CopyFrom(const GenerateDefaultSessionTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateDefaultSessionTokenRequest::IsInitialized() const {
  return true;
}

void GenerateDefaultSessionTokenRequest::InternalSwap(GenerateDefaultSessionTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateDefaultSessionTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::SessionAccessToken* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::SessionAccessToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::SessionAccessToken >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest* Arena::CreateMaybeMessage< ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
