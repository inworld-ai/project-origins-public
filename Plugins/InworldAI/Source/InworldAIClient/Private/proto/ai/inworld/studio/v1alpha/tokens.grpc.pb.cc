// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ai/inworld/studio/v1alpha/tokens.proto

#include "ProtoDisableWarning.h"

#include "ai/inworld/studio/v1alpha/tokens.pb.h"
#include "ai/inworld/studio/v1alpha/tokens.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* Tokens_method_names[] = {
  "/ai.inworld.studio.v1alpha.Tokens/GenerateSessionToken",
  "/ai.inworld.studio.v1alpha.Tokens/GenerateDefaultSessionToken",
};

std::unique_ptr< Tokens::Stub> Tokens::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tokens::Stub> stub(new Tokens::Stub(channel));
  return stub;
}

Tokens::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GenerateSessionToken_(Tokens_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateDefaultSessionToken_(Tokens_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tokens::Stub::GenerateSessionToken(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest& request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest, ::ai::inworld::studio::v1alpha::SessionAccessToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateSessionToken_, context, request, response);
}

void Tokens::Stub::experimental_async::GenerateSessionToken(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest* request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest, ::ai::inworld::studio::v1alpha::SessionAccessToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateSessionToken_, context, request, response, std::move(f));
}

void Tokens::Stub::experimental_async::GenerateSessionToken(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest* request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateSessionToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::SessionAccessToken>* Tokens::Stub::PrepareAsyncGenerateSessionTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::SessionAccessToken, ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateSessionToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::SessionAccessToken>* Tokens::Stub::AsyncGenerateSessionTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateSessionTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Tokens::Stub::GenerateDefaultSessionToken(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest& request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest, ::ai::inworld::studio::v1alpha::SessionAccessToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateDefaultSessionToken_, context, request, response);
}

void Tokens::Stub::experimental_async::GenerateDefaultSessionToken(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest* request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest, ::ai::inworld::studio::v1alpha::SessionAccessToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateDefaultSessionToken_, context, request, response, std::move(f));
}

void Tokens::Stub::experimental_async::GenerateDefaultSessionToken(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest* request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateDefaultSessionToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::SessionAccessToken>* Tokens::Stub::PrepareAsyncGenerateDefaultSessionTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::SessionAccessToken, ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateDefaultSessionToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::SessionAccessToken>* Tokens::Stub::AsyncGenerateDefaultSessionTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateDefaultSessionTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

Tokens::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tokens_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tokens::Service, ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest, ::ai::inworld::studio::v1alpha::SessionAccessToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tokens::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest* req,
             ::ai::inworld::studio::v1alpha::SessionAccessToken* resp) {
               return service->GenerateSessionToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tokens_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tokens::Service, ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest, ::ai::inworld::studio::v1alpha::SessionAccessToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Tokens::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest* req,
             ::ai::inworld::studio::v1alpha::SessionAccessToken* resp) {
               return service->GenerateDefaultSessionToken(ctx, req, resp);
             }, this)));
}

Tokens::Service::~Service() {
}

::grpc::Status Tokens::Service::GenerateSessionToken(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateSessionTokenRequest* request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tokens::Service::GenerateDefaultSessionToken(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateDefaultSessionTokenRequest* request, ::ai::inworld::studio::v1alpha::SessionAccessToken* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

