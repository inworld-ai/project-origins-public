// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apikeys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apikeys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apikeys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apikeys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apikeys_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apikeys_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class ActivateApiKeyRequest;
class ActivateApiKeyRequestDefaultTypeInternal;
extern ActivateApiKeyRequestDefaultTypeInternal _ActivateApiKeyRequest_default_instance_;
class ApiKey;
class ApiKeyDefaultTypeInternal;
extern ApiKeyDefaultTypeInternal _ApiKey_default_instance_;
class DeleteApiKeyRequest;
class DeleteApiKeyRequestDefaultTypeInternal;
extern DeleteApiKeyRequestDefaultTypeInternal _DeleteApiKeyRequest_default_instance_;
class GenerateApiKeyRequest;
class GenerateApiKeyRequestDefaultTypeInternal;
extern GenerateApiKeyRequestDefaultTypeInternal _GenerateApiKeyRequest_default_instance_;
class ListApiKeysRequest;
class ListApiKeysRequestDefaultTypeInternal;
extern ListApiKeysRequestDefaultTypeInternal _ListApiKeysRequest_default_instance_;
class ListApiKeysResponse;
class ListApiKeysResponseDefaultTypeInternal;
extern ListApiKeysResponseDefaultTypeInternal _ListApiKeysResponse_default_instance_;
class SuspendApiKeyRequest;
class SuspendApiKeyRequestDefaultTypeInternal;
extern SuspendApiKeyRequestDefaultTypeInternal _SuspendApiKeyRequest_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ActivateApiKeyRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ApiKey* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ApiKey>(Arena*);
template<> ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::DeleteApiKeyRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GenerateApiKeyRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListApiKeysRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListApiKeysRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::ListApiKeysResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::ListApiKeysResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::SuspendApiKeyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

enum ApiKey_State : int {
  ApiKey_State_STATE_UNSPECIFIED = 0,
  ApiKey_State_ACTIVE = 1,
  ApiKey_State_SUSPENDED = 2,
  ApiKey_State_DELETED = 3,
  ApiKey_State_ApiKey_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ApiKey_State_ApiKey_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ApiKey_State_IsValid(int value);
constexpr ApiKey_State ApiKey_State_State_MIN = ApiKey_State_STATE_UNSPECIFIED;
constexpr ApiKey_State ApiKey_State_State_MAX = ApiKey_State_DELETED;
constexpr int ApiKey_State_State_ARRAYSIZE = ApiKey_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApiKey_State_descriptor();
template<typename T>
inline const std::string& ApiKey_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApiKey_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApiKey_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApiKey_State_descriptor(), enum_t_value);
}
inline bool ApiKey_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApiKey_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApiKey_State>(
    ApiKey_State_descriptor(), name, value);
}
// ===================================================================

class ApiKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ApiKey) */ {
 public:
  inline ApiKey() : ApiKey(nullptr) {}
  virtual ~ApiKey();

  ApiKey(const ApiKey& from);
  ApiKey(ApiKey&& from) noexcept
    : ApiKey() {
    *this = ::std::move(from);
  }

  inline ApiKey& operator=(const ApiKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiKey& operator=(ApiKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApiKey& default_instance();

  static inline const ApiKey* internal_default_instance() {
    return reinterpret_cast<const ApiKey*>(
               &_ApiKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApiKey& a, ApiKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApiKey* New() const final {
    return CreateMaybeMessage<ApiKey>(nullptr);
  }

  ApiKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApiKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApiKey& from);
  void MergeFrom(const ApiKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ApiKey";
  }
  protected:
  explicit ApiKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ApiKey_State State;
  static constexpr State STATE_UNSPECIFIED =
    ApiKey_State_STATE_UNSPECIFIED;
  static constexpr State ACTIVE =
    ApiKey_State_ACTIVE;
  static constexpr State SUSPENDED =
    ApiKey_State_SUSPENDED;
  static constexpr State DELETED =
    ApiKey_State_DELETED;
  static inline bool State_IsValid(int value) {
    return ApiKey_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ApiKey_State_State_MIN;
  static constexpr State State_MAX =
    ApiKey_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ApiKey_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ApiKey_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ApiKey_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ApiKey_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kKeyFieldNumber = 2,
    kSecretFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string secret = 3;
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const char* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
  void clear_state();
  ::ai::inworld::studio::v1alpha::ApiKey_State state() const;
  void set_state(::ai::inworld::studio::v1alpha::ApiKey_State value);
  private:
  ::ai::inworld::studio::v1alpha::ApiKey_State _internal_state() const;
  void _internal_set_state(::ai::inworld::studio::v1alpha::ApiKey_State value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ApiKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// -------------------------------------------------------------------

class GenerateApiKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateApiKeyRequest) */ {
 public:
  inline GenerateApiKeyRequest() : GenerateApiKeyRequest(nullptr) {}
  virtual ~GenerateApiKeyRequest();

  GenerateApiKeyRequest(const GenerateApiKeyRequest& from);
  GenerateApiKeyRequest(GenerateApiKeyRequest&& from) noexcept
    : GenerateApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline GenerateApiKeyRequest& operator=(const GenerateApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateApiKeyRequest& operator=(GenerateApiKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateApiKeyRequest& default_instance();

  static inline const GenerateApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateApiKeyRequest*>(
               &_GenerateApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateApiKeyRequest& a, GenerateApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateApiKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateApiKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateApiKeyRequest* New() const final {
    return CreateMaybeMessage<GenerateApiKeyRequest>(nullptr);
  }

  GenerateApiKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateApiKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateApiKeyRequest& from);
  void MergeFrom(const GenerateApiKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateApiKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateApiKeyRequest";
  }
  protected:
  explicit GenerateApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateApiKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// -------------------------------------------------------------------

class ListApiKeysRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListApiKeysRequest) */ {
 public:
  inline ListApiKeysRequest() : ListApiKeysRequest(nullptr) {}
  virtual ~ListApiKeysRequest();

  ListApiKeysRequest(const ListApiKeysRequest& from);
  ListApiKeysRequest(ListApiKeysRequest&& from) noexcept
    : ListApiKeysRequest() {
    *this = ::std::move(from);
  }

  inline ListApiKeysRequest& operator=(const ListApiKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApiKeysRequest& operator=(ListApiKeysRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListApiKeysRequest& default_instance();

  static inline const ListApiKeysRequest* internal_default_instance() {
    return reinterpret_cast<const ListApiKeysRequest*>(
               &_ListApiKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListApiKeysRequest& a, ListApiKeysRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApiKeysRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApiKeysRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListApiKeysRequest* New() const final {
    return CreateMaybeMessage<ListApiKeysRequest>(nullptr);
  }

  ListApiKeysRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListApiKeysRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListApiKeysRequest& from);
  void MergeFrom(const ListApiKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListApiKeysRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListApiKeysRequest";
  }
  protected:
  explicit ListApiKeysRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListApiKeysRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// -------------------------------------------------------------------

class SuspendApiKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.SuspendApiKeyRequest) */ {
 public:
  inline SuspendApiKeyRequest() : SuspendApiKeyRequest(nullptr) {}
  virtual ~SuspendApiKeyRequest();

  SuspendApiKeyRequest(const SuspendApiKeyRequest& from);
  SuspendApiKeyRequest(SuspendApiKeyRequest&& from) noexcept
    : SuspendApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline SuspendApiKeyRequest& operator=(const SuspendApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuspendApiKeyRequest& operator=(SuspendApiKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuspendApiKeyRequest& default_instance();

  static inline const SuspendApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const SuspendApiKeyRequest*>(
               &_SuspendApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SuspendApiKeyRequest& a, SuspendApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuspendApiKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuspendApiKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuspendApiKeyRequest* New() const final {
    return CreateMaybeMessage<SuspendApiKeyRequest>(nullptr);
  }

  SuspendApiKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuspendApiKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuspendApiKeyRequest& from);
  void MergeFrom(const SuspendApiKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuspendApiKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.SuspendApiKeyRequest";
  }
  protected:
  explicit SuspendApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.SuspendApiKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// -------------------------------------------------------------------

class ActivateApiKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ActivateApiKeyRequest) */ {
 public:
  inline ActivateApiKeyRequest() : ActivateApiKeyRequest(nullptr) {}
  virtual ~ActivateApiKeyRequest();

  ActivateApiKeyRequest(const ActivateApiKeyRequest& from);
  ActivateApiKeyRequest(ActivateApiKeyRequest&& from) noexcept
    : ActivateApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline ActivateApiKeyRequest& operator=(const ActivateApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivateApiKeyRequest& operator=(ActivateApiKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivateApiKeyRequest& default_instance();

  static inline const ActivateApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const ActivateApiKeyRequest*>(
               &_ActivateApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActivateApiKeyRequest& a, ActivateApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivateApiKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivateApiKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivateApiKeyRequest* New() const final {
    return CreateMaybeMessage<ActivateApiKeyRequest>(nullptr);
  }

  ActivateApiKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivateApiKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivateApiKeyRequest& from);
  void MergeFrom(const ActivateApiKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivateApiKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ActivateApiKeyRequest";
  }
  protected:
  explicit ActivateApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ActivateApiKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// -------------------------------------------------------------------

class DeleteApiKeyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.DeleteApiKeyRequest) */ {
 public:
  inline DeleteApiKeyRequest() : DeleteApiKeyRequest(nullptr) {}
  virtual ~DeleteApiKeyRequest();

  DeleteApiKeyRequest(const DeleteApiKeyRequest& from);
  DeleteApiKeyRequest(DeleteApiKeyRequest&& from) noexcept
    : DeleteApiKeyRequest() {
    *this = ::std::move(from);
  }

  inline DeleteApiKeyRequest& operator=(const DeleteApiKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteApiKeyRequest& operator=(DeleteApiKeyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteApiKeyRequest& default_instance();

  static inline const DeleteApiKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteApiKeyRequest*>(
               &_DeleteApiKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteApiKeyRequest& a, DeleteApiKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteApiKeyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteApiKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteApiKeyRequest* New() const final {
    return CreateMaybeMessage<DeleteApiKeyRequest>(nullptr);
  }

  DeleteApiKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteApiKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteApiKeyRequest& from);
  void MergeFrom(const DeleteApiKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteApiKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.DeleteApiKeyRequest";
  }
  protected:
  explicit DeleteApiKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.DeleteApiKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// -------------------------------------------------------------------

class ListApiKeysResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.ListApiKeysResponse) */ {
 public:
  inline ListApiKeysResponse() : ListApiKeysResponse(nullptr) {}
  virtual ~ListApiKeysResponse();

  ListApiKeysResponse(const ListApiKeysResponse& from);
  ListApiKeysResponse(ListApiKeysResponse&& from) noexcept
    : ListApiKeysResponse() {
    *this = ::std::move(from);
  }

  inline ListApiKeysResponse& operator=(const ListApiKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListApiKeysResponse& operator=(ListApiKeysResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListApiKeysResponse& default_instance();

  static inline const ListApiKeysResponse* internal_default_instance() {
    return reinterpret_cast<const ListApiKeysResponse*>(
               &_ListApiKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListApiKeysResponse& a, ListApiKeysResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListApiKeysResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListApiKeysResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListApiKeysResponse* New() const final {
    return CreateMaybeMessage<ListApiKeysResponse>(nullptr);
  }

  ListApiKeysResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListApiKeysResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListApiKeysResponse& from);
  void MergeFrom(const ListApiKeysResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListApiKeysResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.ListApiKeysResponse";
  }
  protected:
  explicit ListApiKeysResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apikeys_2eproto);
    return ::descriptor_table_apikeys_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiKeysFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
  int api_keys_size() const;
  private:
  int _internal_api_keys_size() const;
  public:
  void clear_api_keys();
  ::ai::inworld::studio::v1alpha::ApiKey* mutable_api_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey >*
      mutable_api_keys();
  private:
  const ::ai::inworld::studio::v1alpha::ApiKey& _internal_api_keys(int index) const;
  ::ai::inworld::studio::v1alpha::ApiKey* _internal_add_api_keys();
  public:
  const ::ai::inworld::studio::v1alpha::ApiKey& api_keys(int index) const;
  ::ai::inworld::studio::v1alpha::ApiKey* add_api_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey >&
      api_keys() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.ListApiKeysResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey > api_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apikeys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApiKey

// string name = 1;
inline void ApiKey::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ApiKey::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.name)
  return _internal_name();
}
inline void ApiKey::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.name)
}
inline std::string* ApiKey::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.name)
  return _internal_mutable_name();
}
inline const std::string& ApiKey::_internal_name() const {
  return name_.Get();
}
inline void ApiKey::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApiKey::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ApiKey.name)
}
inline void ApiKey::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ApiKey.name)
}
inline void ApiKey::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ApiKey.name)
}
inline std::string* ApiKey::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApiKey::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApiKey::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.name)
}

// string key = 2;
inline void ApiKey::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ApiKey::key() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.key)
  return _internal_key();
}
inline void ApiKey::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.key)
}
inline std::string* ApiKey::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.key)
  return _internal_mutable_key();
}
inline const std::string& ApiKey::_internal_key() const {
  return key_.Get();
}
inline void ApiKey::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApiKey::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ApiKey.key)
}
inline void ApiKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ApiKey.key)
}
inline void ApiKey::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ApiKey.key)
}
inline std::string* ApiKey::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApiKey::release_key() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApiKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.key)
}

// string secret = 3;
inline void ApiKey::clear_secret() {
  secret_.ClearToEmpty();
}
inline const std::string& ApiKey::secret() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.secret)
  return _internal_secret();
}
inline void ApiKey::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.secret)
}
inline std::string* ApiKey::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ApiKey.secret)
  return _internal_mutable_secret();
}
inline const std::string& ApiKey::_internal_secret() const {
  return secret_.Get();
}
inline void ApiKey::_internal_set_secret(const std::string& value) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ApiKey::set_secret(std::string&& value) {
  
  secret_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ApiKey.secret)
}
inline void ApiKey::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ApiKey.secret)
}
inline void ApiKey::set_secret(const char* value,
    size_t size) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ApiKey.secret)
}
inline std::string* ApiKey::_internal_mutable_secret() {
  
  return secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ApiKey::release_secret() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ApiKey.secret)
  return secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ApiKey::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ApiKey.secret)
}

// .ai.inworld.studio.v1alpha.ApiKey.State state = 4;
inline void ApiKey::clear_state() {
  state_ = 0;
}
inline ::ai::inworld::studio::v1alpha::ApiKey_State ApiKey::_internal_state() const {
  return static_cast< ::ai::inworld::studio::v1alpha::ApiKey_State >(state_);
}
inline ::ai::inworld::studio::v1alpha::ApiKey_State ApiKey::state() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ApiKey.state)
  return _internal_state();
}
inline void ApiKey::_internal_set_state(::ai::inworld::studio::v1alpha::ApiKey_State value) {
  
  state_ = value;
}
inline void ApiKey::set_state(::ai::inworld::studio::v1alpha::ApiKey_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ApiKey.state)
}

// -------------------------------------------------------------------

// GenerateApiKeyRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GenerateApiKeyRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& GenerateApiKeyRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
  return _internal_parent();
}
inline void GenerateApiKeyRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}
inline std::string* GenerateApiKeyRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& GenerateApiKeyRequest::_internal_parent() const {
  return parent_.Get();
}
inline void GenerateApiKeyRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateApiKeyRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}
inline void GenerateApiKeyRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}
inline void GenerateApiKeyRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}
inline std::string* GenerateApiKeyRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateApiKeyRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateApiKeyRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateApiKeyRequest.parent)
}

// -------------------------------------------------------------------

// ListApiKeysRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ListApiKeysRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& ListApiKeysRequest::parent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
  return _internal_parent();
}
inline void ListApiKeysRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}
inline std::string* ListApiKeysRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListApiKeysRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListApiKeysRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListApiKeysRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}
inline void ListApiKeysRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}
inline void ListApiKeysRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}
inline std::string* ListApiKeysRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListApiKeysRequest::release_parent() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListApiKeysRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListApiKeysRequest.parent)
}

// int32 page_size = 2;
inline void ListApiKeysRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListApiKeysRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListApiKeysRequest::page_size() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_size)
  return _internal_page_size();
}
inline void ListApiKeysRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListApiKeysRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_size)
}

// string page_token = 3;
inline void ListApiKeysRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& ListApiKeysRequest::page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
  return _internal_page_token();
}
inline void ListApiKeysRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}
inline std::string* ListApiKeysRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListApiKeysRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListApiKeysRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListApiKeysRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}
inline void ListApiKeysRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}
inline void ListApiKeysRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}
inline std::string* ListApiKeysRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListApiKeysRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListApiKeysRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListApiKeysRequest.page_token)
}

// -------------------------------------------------------------------

// SuspendApiKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void SuspendApiKeyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SuspendApiKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
  return _internal_name();
}
inline void SuspendApiKeyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}
inline std::string* SuspendApiKeyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SuspendApiKeyRequest::_internal_name() const {
  return name_.Get();
}
inline void SuspendApiKeyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SuspendApiKeyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}
inline void SuspendApiKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}
inline void SuspendApiKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}
inline std::string* SuspendApiKeyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SuspendApiKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SuspendApiKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.SuspendApiKeyRequest.name)
}

// -------------------------------------------------------------------

// ActivateApiKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void ActivateApiKeyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ActivateApiKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
  return _internal_name();
}
inline void ActivateApiKeyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}
inline std::string* ActivateApiKeyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ActivateApiKeyRequest::_internal_name() const {
  return name_.Get();
}
inline void ActivateApiKeyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActivateApiKeyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}
inline void ActivateApiKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}
inline void ActivateApiKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}
inline std::string* ActivateApiKeyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActivateApiKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivateApiKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ActivateApiKeyRequest.name)
}

// -------------------------------------------------------------------

// DeleteApiKeyRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void DeleteApiKeyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteApiKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
  return _internal_name();
}
inline void DeleteApiKeyRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}
inline std::string* DeleteApiKeyRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteApiKeyRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteApiKeyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteApiKeyRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}
inline void DeleteApiKeyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}
inline void DeleteApiKeyRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}
inline std::string* DeleteApiKeyRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteApiKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteApiKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.DeleteApiKeyRequest.name)
}

// -------------------------------------------------------------------

// ListApiKeysResponse

// repeated .ai.inworld.studio.v1alpha.ApiKey api_keys = 1;
inline int ListApiKeysResponse::_internal_api_keys_size() const {
  return api_keys_.size();
}
inline int ListApiKeysResponse::api_keys_size() const {
  return _internal_api_keys_size();
}
inline void ListApiKeysResponse::clear_api_keys() {
  api_keys_.Clear();
}
inline ::ai::inworld::studio::v1alpha::ApiKey* ListApiKeysResponse::mutable_api_keys(int index) {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return api_keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey >*
ListApiKeysResponse::mutable_api_keys() {
  // @@protoc_insertion_point(field_mutable_list:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return &api_keys_;
}
inline const ::ai::inworld::studio::v1alpha::ApiKey& ListApiKeysResponse::_internal_api_keys(int index) const {
  return api_keys_.Get(index);
}
inline const ::ai::inworld::studio::v1alpha::ApiKey& ListApiKeysResponse::api_keys(int index) const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return _internal_api_keys(index);
}
inline ::ai::inworld::studio::v1alpha::ApiKey* ListApiKeysResponse::_internal_add_api_keys() {
  return api_keys_.Add();
}
inline ::ai::inworld::studio::v1alpha::ApiKey* ListApiKeysResponse::add_api_keys() {
  // @@protoc_insertion_point(field_add:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return _internal_add_api_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ai::inworld::studio::v1alpha::ApiKey >&
ListApiKeysResponse::api_keys() const {
  // @@protoc_insertion_point(field_list:ai.inworld.studio.v1alpha.ListApiKeysResponse.api_keys)
  return api_keys_;
}

// string next_page_token = 2;
inline void ListApiKeysResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& ListApiKeysResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListApiKeysResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}
inline std::string* ListApiKeysResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListApiKeysResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListApiKeysResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListApiKeysResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}
inline void ListApiKeysResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}
inline void ListApiKeysResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}
inline std::string* ListApiKeysResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListApiKeysResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListApiKeysResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.ListApiKeysResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::ApiKey_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::ApiKey_State>() {
  return ::ai::inworld::studio::v1alpha::ApiKey_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apikeys_2eproto
