// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: users.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_users_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_users_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_users_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_users_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_users_2eproto;
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {
class AcceptTosRequest;
class AcceptTosRequestDefaultTypeInternal;
extern AcceptTosRequestDefaultTypeInternal _AcceptTosRequest_default_instance_;
class GenerateTokenUserRequest;
class GenerateTokenUserRequestDefaultTypeInternal;
extern GenerateTokenUserRequestDefaultTypeInternal _GenerateTokenUserRequest_default_instance_;
class GenerateTokenUserResponse;
class GenerateTokenUserResponseDefaultTypeInternal;
extern GenerateTokenUserResponseDefaultTypeInternal _GenerateTokenUserResponse_default_instance_;
class GetUserRequest;
class GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class LinkAccountRequest;
class LinkAccountRequestDefaultTypeInternal;
extern LinkAccountRequestDefaultTypeInternal _LinkAccountRequest_default_instance_;
class UpdateUserRequest;
class UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai
PROTOBUF_NAMESPACE_OPEN
template<> ::ai::inworld::studio::v1alpha::AcceptTosRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::AcceptTosRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GenerateTokenUserRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GenerateTokenUserRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GenerateTokenUserResponse* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GenerateTokenUserResponse>(Arena*);
template<> ::ai::inworld::studio::v1alpha::GetUserRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::GetUserRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::LinkAccountRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::LinkAccountRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::UpdateUserRequest* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::UpdateUserRequest>(Arena*);
template<> ::ai::inworld::studio::v1alpha::User* Arena::CreateMaybeMessage<::ai::inworld::studio::v1alpha::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

enum MarketingConsent : int {
  MARKETING_CONSENT_UNSPECIFIED = 0,
  MARKETING_CONSENT_DECLINED = 1,
  MARKETING_CONSENT_GRANTED = 2,
  MarketingConsent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MarketingConsent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MarketingConsent_IsValid(int value);
constexpr MarketingConsent MarketingConsent_MIN = MARKETING_CONSENT_UNSPECIFIED;
constexpr MarketingConsent MarketingConsent_MAX = MARKETING_CONSENT_GRANTED;
constexpr int MarketingConsent_ARRAYSIZE = MarketingConsent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketingConsent_descriptor();
template<typename T>
inline const std::string& MarketingConsent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarketingConsent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarketingConsent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarketingConsent_descriptor(), enum_t_value);
}
inline bool MarketingConsent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarketingConsent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketingConsent>(
    MarketingConsent_descriptor(), name, value);
}
enum AuthType : int {
  AUTH_TYPE_UNSPECIFIED = 0,
  AUTH_TYPE_OCULUS_NONCE = 2,
  AUTH_TYPE_FIREBASE = 3,
  AuthType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AuthType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AuthType_IsValid(int value);
constexpr AuthType AuthType_MIN = AUTH_TYPE_UNSPECIFIED;
constexpr AuthType AuthType_MAX = AUTH_TYPE_FIREBASE;
constexpr int AuthType_ARRAYSIZE = AuthType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthType_descriptor();
template<typename T>
inline const std::string& AuthType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthType_descriptor(), enum_t_value);
}
inline bool AuthType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthType>(
    AuthType_descriptor(), name, value);
}
// ===================================================================

class GenerateTokenUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateTokenUserRequest) */ {
 public:
  inline GenerateTokenUserRequest() : GenerateTokenUserRequest(nullptr) {}
  virtual ~GenerateTokenUserRequest();

  GenerateTokenUserRequest(const GenerateTokenUserRequest& from);
  GenerateTokenUserRequest(GenerateTokenUserRequest&& from) noexcept
    : GenerateTokenUserRequest() {
    *this = ::std::move(from);
  }

  inline GenerateTokenUserRequest& operator=(const GenerateTokenUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenUserRequest& operator=(GenerateTokenUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateTokenUserRequest& default_instance();

  static inline const GenerateTokenUserRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenUserRequest*>(
               &_GenerateTokenUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenerateTokenUserRequest& a, GenerateTokenUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateTokenUserRequest* New() const final {
    return CreateMaybeMessage<GenerateTokenUserRequest>(nullptr);
  }

  GenerateTokenUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateTokenUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateTokenUserRequest& from);
  void MergeFrom(const GenerateTokenUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateTokenUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateTokenUserRequest";
  }
  protected:
  explicit GenerateTokenUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_type();
  ::ai::inworld::studio::v1alpha::AuthType type() const;
  void set_type(::ai::inworld::studio::v1alpha::AuthType value);
  private:
  ::ai::inworld::studio::v1alpha::AuthType _internal_type() const;
  void _internal_set_type(::ai::inworld::studio::v1alpha::AuthType value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateTokenUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class GenerateTokenUserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GenerateTokenUserResponse) */ {
 public:
  inline GenerateTokenUserResponse() : GenerateTokenUserResponse(nullptr) {}
  virtual ~GenerateTokenUserResponse();

  GenerateTokenUserResponse(const GenerateTokenUserResponse& from);
  GenerateTokenUserResponse(GenerateTokenUserResponse&& from) noexcept
    : GenerateTokenUserResponse() {
    *this = ::std::move(from);
  }

  inline GenerateTokenUserResponse& operator=(const GenerateTokenUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateTokenUserResponse& operator=(GenerateTokenUserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateTokenUserResponse& default_instance();

  static inline const GenerateTokenUserResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateTokenUserResponse*>(
               &_GenerateTokenUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenerateTokenUserResponse& a, GenerateTokenUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateTokenUserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateTokenUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateTokenUserResponse* New() const final {
    return CreateMaybeMessage<GenerateTokenUserResponse>(nullptr);
  }

  GenerateTokenUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateTokenUserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateTokenUserResponse& from);
  void MergeFrom(const GenerateTokenUserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateTokenUserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GenerateTokenUserResponse";
  }
  protected:
  explicit GenerateTokenUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTypeFieldNumber = 2,
    kExpirationTimeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.protobuf.Timestamp expiration_time = 3;
  bool has_expiration_time() const;
  private:
  bool _internal_has_expiration_time() const;
  public:
  void clear_expiration_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration_time();
  void set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration_time();
  public:
  void unsafe_arena_set_allocated_expiration_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration_time();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GenerateTokenUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class LinkAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.LinkAccountRequest) */ {
 public:
  inline LinkAccountRequest() : LinkAccountRequest(nullptr) {}
  virtual ~LinkAccountRequest();

  LinkAccountRequest(const LinkAccountRequest& from);
  LinkAccountRequest(LinkAccountRequest&& from) noexcept
    : LinkAccountRequest() {
    *this = ::std::move(from);
  }

  inline LinkAccountRequest& operator=(const LinkAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkAccountRequest& operator=(LinkAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkAccountRequest& default_instance();

  static inline const LinkAccountRequest* internal_default_instance() {
    return reinterpret_cast<const LinkAccountRequest*>(
               &_LinkAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LinkAccountRequest& a, LinkAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkAccountRequest* New() const final {
    return CreateMaybeMessage<LinkAccountRequest>(nullptr);
  }

  LinkAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkAccountRequest& from);
  void MergeFrom(const LinkAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.LinkAccountRequest";
  }
  protected:
  explicit LinkAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOculusOauthTokenFieldNumber = 2,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string oculus_oauth_token = 2;
  void clear_oculus_oauth_token();
  const std::string& oculus_oauth_token() const;
  void set_oculus_oauth_token(const std::string& value);
  void set_oculus_oauth_token(std::string&& value);
  void set_oculus_oauth_token(const char* value);
  void set_oculus_oauth_token(const char* value, size_t size);
  std::string* mutable_oculus_oauth_token();
  std::string* release_oculus_oauth_token();
  void set_allocated_oculus_oauth_token(std::string* oculus_oauth_token);
  private:
  const std::string& _internal_oculus_oauth_token() const;
  void _internal_set_oculus_oauth_token(const std::string& value);
  std::string* _internal_mutable_oculus_oauth_token();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.LinkAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oculus_oauth_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  virtual ~GetUserRequest();

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRequest& default_instance();

  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRequest* New() const final {
    return CreateMaybeMessage<GetUserRequest>(nullptr);
  }

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRequest& from);
  void MergeFrom(const GetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class AcceptTosRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.AcceptTosRequest) */ {
 public:
  inline AcceptTosRequest() : AcceptTosRequest(nullptr) {}
  virtual ~AcceptTosRequest();

  AcceptTosRequest(const AcceptTosRequest& from);
  AcceptTosRequest(AcceptTosRequest&& from) noexcept
    : AcceptTosRequest() {
    *this = ::std::move(from);
  }

  inline AcceptTosRequest& operator=(const AcceptTosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptTosRequest& operator=(AcceptTosRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptTosRequest& default_instance();

  static inline const AcceptTosRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptTosRequest*>(
               &_AcceptTosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AcceptTosRequest& a, AcceptTosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptTosRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptTosRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptTosRequest* New() const final {
    return CreateMaybeMessage<AcceptTosRequest>(nullptr);
  }

  AcceptTosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptTosRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptTosRequest& from);
  void MergeFrom(const AcceptTosRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptTosRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.AcceptTosRequest";
  }
  protected:
  explicit AcceptTosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.AcceptTosRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  virtual ~UpdateUserRequest();

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateUserRequest& default_instance();

  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserRequest* New() const final {
    return CreateMaybeMessage<UpdateUserRequest>(nullptr);
  }

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateUserRequest& from);
  void MergeFrom(const UpdateUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::ai::inworld::studio::v1alpha::User& user() const;
  ::ai::inworld::studio::v1alpha::User* release_user();
  ::ai::inworld::studio::v1alpha::User* mutable_user();
  void set_allocated_user(::ai::inworld::studio::v1alpha::User* user);
  private:
  const ::ai::inworld::studio::v1alpha::User& _internal_user() const;
  ::ai::inworld::studio::v1alpha::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::ai::inworld::studio::v1alpha::User* user);
  ::ai::inworld::studio::v1alpha::User* unsafe_arena_release_user();

  // .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ai::inworld::studio::v1alpha::User* user_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ai.inworld.studio.v1alpha.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ai.inworld.studio.v1alpha.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_users_2eproto);
    return ::descriptor_table_users_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGoogleIdFieldNumber = 2,
    kOculusIdFieldNumber = 3,
    kFirebaseIdFieldNumber = 4,
    kTosAcceptanceVersionFieldNumber = 5,
    kMarketingConsentFieldNumber = 6,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string google_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_google_id();
  const std::string& google_id() const;
  void set_google_id(const std::string& value);
  void set_google_id(std::string&& value);
  void set_google_id(const char* value);
  void set_google_id(const char* value, size_t size);
  std::string* mutable_google_id();
  std::string* release_google_id();
  void set_allocated_google_id(std::string* google_id);
  private:
  const std::string& _internal_google_id() const;
  void _internal_set_google_id(const std::string& value);
  std::string* _internal_mutable_google_id();
  public:

  // string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_oculus_id();
  const std::string& oculus_id() const;
  void set_oculus_id(const std::string& value);
  void set_oculus_id(std::string&& value);
  void set_oculus_id(const char* value);
  void set_oculus_id(const char* value, size_t size);
  std::string* mutable_oculus_id();
  std::string* release_oculus_id();
  void set_allocated_oculus_id(std::string* oculus_id);
  private:
  const std::string& _internal_oculus_id() const;
  void _internal_set_oculus_id(const std::string& value);
  std::string* _internal_mutable_oculus_id();
  public:

  // string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_firebase_id();
  const std::string& firebase_id() const;
  void set_firebase_id(const std::string& value);
  void set_firebase_id(std::string&& value);
  void set_firebase_id(const char* value);
  void set_firebase_id(const char* value, size_t size);
  std::string* mutable_firebase_id();
  std::string* release_firebase_id();
  void set_allocated_firebase_id(std::string* firebase_id);
  private:
  const std::string& _internal_firebase_id() const;
  void _internal_set_firebase_id(const std::string& value);
  std::string* _internal_mutable_firebase_id();
  public:

  // int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_tos_acceptance_version();
  ::PROTOBUF_NAMESPACE_ID::int32 tos_acceptance_version() const;
  void set_tos_acceptance_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tos_acceptance_version() const;
  void _internal_set_tos_acceptance_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
  void clear_marketing_consent();
  ::ai::inworld::studio::v1alpha::MarketingConsent marketing_consent() const;
  void set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value);
  private:
  ::ai::inworld::studio::v1alpha::MarketingConsent _internal_marketing_consent() const;
  void _internal_set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value);
  public:

  // @@protoc_insertion_point(class_scope:ai.inworld.studio.v1alpha.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr google_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oculus_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firebase_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tos_acceptance_version_;
  int marketing_consent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_users_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GenerateTokenUserRequest

// .ai.inworld.studio.v1alpha.AuthType type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GenerateTokenUserRequest::clear_type() {
  type_ = 0;
}
inline ::ai::inworld::studio::v1alpha::AuthType GenerateTokenUserRequest::_internal_type() const {
  return static_cast< ::ai::inworld::studio::v1alpha::AuthType >(type_);
}
inline ::ai::inworld::studio::v1alpha::AuthType GenerateTokenUserRequest::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.type)
  return _internal_type();
}
inline void GenerateTokenUserRequest::_internal_set_type(::ai::inworld::studio::v1alpha::AuthType value) {
  
  type_ = value;
}
inline void GenerateTokenUserRequest::set_type(::ai::inworld::studio::v1alpha::AuthType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.type)
}

// string token = 2;
inline void GenerateTokenUserRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GenerateTokenUserRequest::token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
  return _internal_token();
}
inline void GenerateTokenUserRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}
inline std::string* GenerateTokenUserRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
  return _internal_mutable_token();
}
inline const std::string& GenerateTokenUserRequest::_internal_token() const {
  return token_.Get();
}
inline void GenerateTokenUserRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateTokenUserRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}
inline void GenerateTokenUserRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}
inline void GenerateTokenUserRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}
inline std::string* GenerateTokenUserRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateTokenUserRequest::release_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateTokenUserRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserRequest.token)
}

// -------------------------------------------------------------------

// GenerateTokenUserResponse

// string token = 1;
inline void GenerateTokenUserResponse::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GenerateTokenUserResponse::token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
  return _internal_token();
}
inline void GenerateTokenUserResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}
inline std::string* GenerateTokenUserResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
  return _internal_mutable_token();
}
inline const std::string& GenerateTokenUserResponse::_internal_token() const {
  return token_.Get();
}
inline void GenerateTokenUserResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateTokenUserResponse::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}
inline void GenerateTokenUserResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}
inline void GenerateTokenUserResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}
inline std::string* GenerateTokenUserResponse::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateTokenUserResponse::release_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateTokenUserResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.token)
}

// string type = 2;
inline void GenerateTokenUserResponse::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& GenerateTokenUserResponse::type() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
  return _internal_type();
}
inline void GenerateTokenUserResponse::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}
inline std::string* GenerateTokenUserResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
  return _internal_mutable_type();
}
inline const std::string& GenerateTokenUserResponse::_internal_type() const {
  return type_.Get();
}
inline void GenerateTokenUserResponse::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateTokenUserResponse::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}
inline void GenerateTokenUserResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}
inline void GenerateTokenUserResponse::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}
inline std::string* GenerateTokenUserResponse::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateTokenUserResponse::release_type() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateTokenUserResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.type)
}

// .google.protobuf.Timestamp expiration_time = 3;
inline bool GenerateTokenUserResponse::_internal_has_expiration_time() const {
  return this != internal_default_instance() && expiration_time_ != nullptr;
}
inline bool GenerateTokenUserResponse::has_expiration_time() const {
  return _internal_has_expiration_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GenerateTokenUserResponse::_internal_expiration_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GenerateTokenUserResponse::expiration_time() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
  return _internal_expiration_time();
}
inline void GenerateTokenUserResponse::unsafe_arena_set_allocated_expiration_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  expiration_time_ = expiration_time;
  if (expiration_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateTokenUserResponse::release_expiration_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateTokenUserResponse::unsafe_arena_release_expiration_time() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_time_;
  expiration_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateTokenUserResponse::_internal_mutable_expiration_time() {
  
  if (expiration_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expiration_time_ = p;
  }
  return expiration_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GenerateTokenUserResponse::mutable_expiration_time() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
  return _internal_mutable_expiration_time();
}
inline void GenerateTokenUserResponse::set_allocated_expiration_time(PROTOBUF_NAMESPACE_ID::Timestamp* expiration_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time_);
  }
  if (expiration_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_time)->GetArena();
    if (message_arena != submessage_arena) {
      expiration_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration_time, submessage_arena);
    }
    
  } else {
    
  }
  expiration_time_ = expiration_time;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GenerateTokenUserResponse.expiration_time)
}

// -------------------------------------------------------------------

// LinkAccountRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void LinkAccountRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LinkAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
  return _internal_name();
}
inline void LinkAccountRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}
inline std::string* LinkAccountRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LinkAccountRequest::_internal_name() const {
  return name_.Get();
}
inline void LinkAccountRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LinkAccountRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}
inline void LinkAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}
inline void LinkAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}
inline std::string* LinkAccountRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LinkAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkAccountRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.LinkAccountRequest.name)
}

// string oculus_oauth_token = 2;
inline void LinkAccountRequest::clear_oculus_oauth_token() {
  oculus_oauth_token_.ClearToEmpty();
}
inline const std::string& LinkAccountRequest::oculus_oauth_token() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
  return _internal_oculus_oauth_token();
}
inline void LinkAccountRequest::set_oculus_oauth_token(const std::string& value) {
  _internal_set_oculus_oauth_token(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}
inline std::string* LinkAccountRequest::mutable_oculus_oauth_token() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
  return _internal_mutable_oculus_oauth_token();
}
inline const std::string& LinkAccountRequest::_internal_oculus_oauth_token() const {
  return oculus_oauth_token_.Get();
}
inline void LinkAccountRequest::_internal_set_oculus_oauth_token(const std::string& value) {
  
  oculus_oauth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LinkAccountRequest::set_oculus_oauth_token(std::string&& value) {
  
  oculus_oauth_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}
inline void LinkAccountRequest::set_oculus_oauth_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oculus_oauth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}
inline void LinkAccountRequest::set_oculus_oauth_token(const char* value,
    size_t size) {
  
  oculus_oauth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}
inline std::string* LinkAccountRequest::_internal_mutable_oculus_oauth_token() {
  
  return oculus_oauth_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LinkAccountRequest::release_oculus_oauth_token() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
  return oculus_oauth_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinkAccountRequest::set_allocated_oculus_oauth_token(std::string* oculus_oauth_token) {
  if (oculus_oauth_token != nullptr) {
    
  } else {
    
  }
  oculus_oauth_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oculus_oauth_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.LinkAccountRequest.oculus_oauth_token)
}

// -------------------------------------------------------------------

// GetUserRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void GetUserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetUserRequest::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.GetUserRequest.name)
  return _internal_name();
}
inline void GetUserRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.GetUserRequest.name)
}
inline std::string* GetUserRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.GetUserRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetUserRequest::_internal_name() const {
  return name_.Get();
}
inline void GetUserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetUserRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.GetUserRequest.name)
}
inline void GetUserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.GetUserRequest.name)
}
inline void GetUserRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.GetUserRequest.name)
}
inline std::string* GetUserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.GetUserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.GetUserRequest.name)
}

// -------------------------------------------------------------------

// AcceptTosRequest

// string user = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void AcceptTosRequest::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& AcceptTosRequest::user() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
  return _internal_user();
}
inline void AcceptTosRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}
inline std::string* AcceptTosRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
  return _internal_mutable_user();
}
inline const std::string& AcceptTosRequest::_internal_user() const {
  return user_.Get();
}
inline void AcceptTosRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AcceptTosRequest::set_user(std::string&& value) {
  
  user_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}
inline void AcceptTosRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}
inline void AcceptTosRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}
inline std::string* AcceptTosRequest::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AcceptTosRequest::release_user() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcceptTosRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.AcceptTosRequest.user)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// .ai.inworld.studio.v1alpha.User user = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateUserRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UpdateUserRequest::has_user() const {
  return _internal_has_user();
}
inline void UpdateUserRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::ai::inworld::studio::v1alpha::User& UpdateUserRequest::_internal_user() const {
  const ::ai::inworld::studio::v1alpha::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::ai::inworld::studio::v1alpha::User&>(
      ::ai::inworld::studio::v1alpha::_User_default_instance_);
}
inline const ::ai::inworld::studio::v1alpha::User& UpdateUserRequest::user() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
  return _internal_user();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_user(
    ::ai::inworld::studio::v1alpha::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::release_user() {
  
  ::ai::inworld::studio::v1alpha::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
  
  ::ai::inworld::studio::v1alpha::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::ai::inworld::studio::v1alpha::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::ai::inworld::studio::v1alpha::User* UpdateUserRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
  return _internal_mutable_user();
}
inline void UpdateUserRequest::set_allocated_user(::ai::inworld::studio::v1alpha::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.user)
}

// .google.protobuf.FieldMask update_mask = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateUserRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateUserRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateUserRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateUserRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUserRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUserRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUserRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateUserRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateUserRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.UpdateUserRequest.update_mask)
}

// -------------------------------------------------------------------

// User

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.User.name)
}
inline void User::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.name)
}

// string google_id = 2 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_google_id() {
  google_id_.ClearToEmpty();
}
inline const std::string& User::google_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.google_id)
  return _internal_google_id();
}
inline void User::set_google_id(const std::string& value) {
  _internal_set_google_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.google_id)
}
inline std::string* User::mutable_google_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.google_id)
  return _internal_mutable_google_id();
}
inline const std::string& User::_internal_google_id() const {
  return google_id_.Get();
}
inline void User::_internal_set_google_id(const std::string& value) {
  
  google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_google_id(std::string&& value) {
  
  google_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.User.google_id)
}
inline void User::set_google_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.User.google_id)
}
inline void User::set_google_id(const char* value,
    size_t size) {
  
  google_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.User.google_id)
}
inline std::string* User::_internal_mutable_google_id() {
  
  return google_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_google_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.google_id)
  return google_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_google_id(std::string* google_id) {
  if (google_id != nullptr) {
    
  } else {
    
  }
  google_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), google_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.google_id)
}

// string oculus_id = 3 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_oculus_id() {
  oculus_id_.ClearToEmpty();
}
inline const std::string& User::oculus_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.oculus_id)
  return _internal_oculus_id();
}
inline void User::set_oculus_id(const std::string& value) {
  _internal_set_oculus_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.oculus_id)
}
inline std::string* User::mutable_oculus_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.oculus_id)
  return _internal_mutable_oculus_id();
}
inline const std::string& User::_internal_oculus_id() const {
  return oculus_id_.Get();
}
inline void User::_internal_set_oculus_id(const std::string& value) {
  
  oculus_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_oculus_id(std::string&& value) {
  
  oculus_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.User.oculus_id)
}
inline void User::set_oculus_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oculus_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.User.oculus_id)
}
inline void User::set_oculus_id(const char* value,
    size_t size) {
  
  oculus_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.User.oculus_id)
}
inline std::string* User::_internal_mutable_oculus_id() {
  
  return oculus_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_oculus_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.oculus_id)
  return oculus_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_oculus_id(std::string* oculus_id) {
  if (oculus_id != nullptr) {
    
  } else {
    
  }
  oculus_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oculus_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.oculus_id)
}

// string firebase_id = 4 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_firebase_id() {
  firebase_id_.ClearToEmpty();
}
inline const std::string& User::firebase_id() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.firebase_id)
  return _internal_firebase_id();
}
inline void User::set_firebase_id(const std::string& value) {
  _internal_set_firebase_id(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.firebase_id)
}
inline std::string* User::mutable_firebase_id() {
  // @@protoc_insertion_point(field_mutable:ai.inworld.studio.v1alpha.User.firebase_id)
  return _internal_mutable_firebase_id();
}
inline const std::string& User::_internal_firebase_id() const {
  return firebase_id_.Get();
}
inline void User::_internal_set_firebase_id(const std::string& value) {
  
  firebase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_firebase_id(std::string&& value) {
  
  firebase_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ai.inworld.studio.v1alpha.User.firebase_id)
}
inline void User::set_firebase_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firebase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ai.inworld.studio.v1alpha.User.firebase_id)
}
inline void User::set_firebase_id(const char* value,
    size_t size) {
  
  firebase_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ai.inworld.studio.v1alpha.User.firebase_id)
}
inline std::string* User::_internal_mutable_firebase_id() {
  
  return firebase_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_firebase_id() {
  // @@protoc_insertion_point(field_release:ai.inworld.studio.v1alpha.User.firebase_id)
  return firebase_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_firebase_id(std::string* firebase_id) {
  if (firebase_id != nullptr) {
    
  } else {
    
  }
  firebase_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firebase_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ai.inworld.studio.v1alpha.User.firebase_id)
}

// int32 tos_acceptance_version = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void User::clear_tos_acceptance_version() {
  tos_acceptance_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_tos_acceptance_version() const {
  return tos_acceptance_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::tos_acceptance_version() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.tos_acceptance_version)
  return _internal_tos_acceptance_version();
}
inline void User::_internal_set_tos_acceptance_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tos_acceptance_version_ = value;
}
inline void User::set_tos_acceptance_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tos_acceptance_version(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.tos_acceptance_version)
}

// .ai.inworld.studio.v1alpha.MarketingConsent marketing_consent = 6;
inline void User::clear_marketing_consent() {
  marketing_consent_ = 0;
}
inline ::ai::inworld::studio::v1alpha::MarketingConsent User::_internal_marketing_consent() const {
  return static_cast< ::ai::inworld::studio::v1alpha::MarketingConsent >(marketing_consent_);
}
inline ::ai::inworld::studio::v1alpha::MarketingConsent User::marketing_consent() const {
  // @@protoc_insertion_point(field_get:ai.inworld.studio.v1alpha.User.marketing_consent)
  return _internal_marketing_consent();
}
inline void User::_internal_set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value) {
  
  marketing_consent_ = value;
}
inline void User::set_marketing_consent(::ai::inworld::studio::v1alpha::MarketingConsent value) {
  _internal_set_marketing_consent(value);
  // @@protoc_insertion_point(field_set:ai.inworld.studio.v1alpha.User.marketing_consent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha
}  // namespace studio
}  // namespace inworld
}  // namespace ai

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::MarketingConsent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::MarketingConsent>() {
  return ::ai::inworld::studio::v1alpha::MarketingConsent_descriptor();
}
template <> struct is_proto_enum< ::ai::inworld::studio::v1alpha::AuthType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ai::inworld::studio::v1alpha::AuthType>() {
  return ::ai::inworld::studio::v1alpha::AuthType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_users_2eproto
