// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apikeys.proto

#include "ProtoDisableWarning.h"

#include "apikeys.pb.h"
#include "apikeys.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ai {
namespace inworld {
namespace studio {
namespace v1alpha {

static const char* ApiKeys_method_names[] = {
  "/ai.inworld.studio.v1alpha.ApiKeys/ListApiKeys",
  "/ai.inworld.studio.v1alpha.ApiKeys/SuspendApiKey",
  "/ai.inworld.studio.v1alpha.ApiKeys/ActivateApiKey",
  "/ai.inworld.studio.v1alpha.ApiKeys/DeleteApiKey",
  "/ai.inworld.studio.v1alpha.ApiKeys/GenerateApiKey",
};

std::unique_ptr< ApiKeys::Stub> ApiKeys::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ApiKeys::Stub> stub(new ApiKeys::Stub(channel));
  return stub;
}

ApiKeys::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListApiKeys_(ApiKeys_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SuspendApiKey_(ApiKeys_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ActivateApiKey_(ApiKeys_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteApiKey_(ApiKeys_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateApiKey_(ApiKeys_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ApiKeys::Stub::ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListApiKeys_, context, request, response);
}

void ApiKeys::Stub::experimental_async::ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListApiKeys_, context, request, response, std::move(f));
}

void ApiKeys::Stub::experimental_async::ListApiKeys(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListApiKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* ApiKeys::Stub::PrepareAsyncListApiKeysRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ListApiKeysResponse, ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListApiKeys_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ListApiKeysResponse>* ApiKeys::Stub::AsyncListApiKeysRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListApiKeysRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiKeys::Stub::SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SuspendApiKey_, context, request, response);
}

void ApiKeys::Stub::experimental_async::SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuspendApiKey_, context, request, response, std::move(f));
}

void ApiKeys::Stub::experimental_async::SuspendApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuspendApiKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* ApiKeys::Stub::PrepareAsyncSuspendApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ApiKey, ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SuspendApiKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* ApiKeys::Stub::AsyncSuspendApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSuspendApiKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiKeys::Stub::ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ActivateApiKey_, context, request, response);
}

void ApiKeys::Stub::experimental_async::ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateApiKey_, context, request, response, std::move(f));
}

void ApiKeys::Stub::experimental_async::ActivateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ActivateApiKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* ApiKeys::Stub::PrepareAsyncActivateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ApiKey, ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ActivateApiKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* ApiKeys::Stub::AsyncActivateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncActivateApiKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiKeys::Stub::DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteApiKey_, context, request, response);
}

void ApiKeys::Stub::experimental_async::DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteApiKey_, context, request, response, std::move(f));
}

void ApiKeys::Stub::experimental_async::DeleteApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteApiKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiKeys::Stub::PrepareAsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteApiKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ApiKeys::Stub::AsyncDeleteApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteApiKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ApiKeys::Stub::GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::ai::inworld::studio::v1alpha::ApiKey* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GenerateApiKey_, context, request, response);
}

void ApiKeys::Stub::experimental_async::GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateApiKey_, context, request, response, std::move(f));
}

void ApiKeys::Stub::experimental_async::GenerateApiKey(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GenerateApiKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* ApiKeys::Stub::PrepareAsyncGenerateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ai::inworld::studio::v1alpha::ApiKey, ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GenerateApiKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ai::inworld::studio::v1alpha::ApiKey>* ApiKeys::Stub::AsyncGenerateApiKeyRaw(::grpc::ClientContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGenerateApiKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

ApiKeys::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeys_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeys::Service, ::ai::inworld::studio::v1alpha::ListApiKeysRequest, ::ai::inworld::studio::v1alpha::ListApiKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiKeys::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* req,
             ::ai::inworld::studio::v1alpha::ListApiKeysResponse* resp) {
               return service->ListApiKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeys_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeys::Service, ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiKeys::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* req,
             ::ai::inworld::studio::v1alpha::ApiKey* resp) {
               return service->SuspendApiKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeys_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeys::Service, ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiKeys::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* req,
             ::ai::inworld::studio::v1alpha::ApiKey* resp) {
               return service->ActivateApiKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeys_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeys::Service, ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiKeys::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteApiKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ApiKeys_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ApiKeys::Service, ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest, ::ai::inworld::studio::v1alpha::ApiKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ApiKeys::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* req,
             ::ai::inworld::studio::v1alpha::ApiKey* resp) {
               return service->GenerateApiKey(ctx, req, resp);
             }, this)));
}

ApiKeys::Service::~Service() {
}

::grpc::Status ApiKeys::Service::ListApiKeys(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ListApiKeysRequest* request, ::ai::inworld::studio::v1alpha::ListApiKeysResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeys::Service::SuspendApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::SuspendApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeys::Service::ActivateApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::ActivateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeys::Service::DeleteApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::DeleteApiKeyRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ApiKeys::Service::GenerateApiKey(::grpc::ServerContext* context, const ::ai::inworld::studio::v1alpha::GenerateApiKeyRequest* request, ::ai::inworld::studio::v1alpha::ApiKey* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ai
}  // namespace inworld
}  // namespace studio
}  // namespace v1alpha

