// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: world-engine.proto
#ifndef GRPC_world_2dengine_2eproto__INCLUDED
#define GRPC_world_2dengine_2eproto__INCLUDED

#include "world-engine.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ai {
namespace inworld {
namespace engine {

// Service that exposes bidirectional interaction session RPC. Effective runtime
// of the inworld.ai.
class WorldEngine final {
 public:
  static constexpr char const* service_full_name() {
    return "ai.inworld.engine.WorldEngine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Bidirectional events based Session.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>> Session(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>>(SessionRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>> AsyncSession(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>>(AsyncSessionRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>> PrepareAsyncSession(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>>(PrepareAsyncSessionRaw(context, cq));
    }
    // RPC to create world for the interaction session.
    virtual ::grpc::Status CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::ai::inworld::engine::CreateWorldResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::CreateWorldResponse>> AsyncCreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::CreateWorldResponse>>(AsyncCreateWorldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::CreateWorldResponse>> PrepareAsyncCreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::CreateWorldResponse>>(PrepareAsyncCreateWorldRaw(context, request, cq));
    }
    // RPC to load world for the interaction session.
    virtual ::grpc::Status LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::ai::inworld::engine::LoadSceneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::LoadSceneResponse>> AsyncLoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::LoadSceneResponse>>(AsyncLoadSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::LoadSceneResponse>> PrepareAsyncLoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::LoadSceneResponse>>(PrepareAsyncLoadSceneRaw(context, request, cq));
    }
    // RPC to log errors for the interaction session.
    virtual ::grpc::Status LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncLogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncLogErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncLogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncLogErrorRaw(context, request, cq));
    }
    // RPC to get voice preview
    virtual ::grpc::Status VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::ai::inworld::engine::VoicePreviewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::VoicePreviewResponse>> AsyncVoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::VoicePreviewResponse>>(AsyncVoicePreviewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::VoicePreviewResponse>> PrepareAsyncVoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::VoicePreviewResponse>>(PrepareAsyncVoicePreviewRaw(context, request, cq));
    }
    // RPC to load list of base voices.
    virtual ::grpc::Status ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::ai::inworld::engine::ListBaseVoicesResponce* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::ListBaseVoicesResponce>> AsyncListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::ListBaseVoicesResponce>>(AsyncListBaseVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::ListBaseVoicesResponce>> PrepareAsyncListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::ListBaseVoicesResponce>>(PrepareAsyncListBaseVoicesRaw(context, request, cq));
    }
    // Generates a JWT to access the world engine API with a given API key
    // A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
    virtual ::grpc::Status GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::ai::inworld::engine::AccessToken* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::AccessToken>> AsyncGenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::AccessToken>>(AsyncGenerateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::AccessToken>> PrepareAsyncGenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::AccessToken>>(PrepareAsyncGenerateTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Bidirectional events based Session.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Session(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ai::inworld::packets::InworldPacket,::ai::inworld::packets::InworldPacket>* reactor) = 0;
      #else
      virtual void Session(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::ai::inworld::packets::InworldPacket,::ai::inworld::packets::InworldPacket>* reactor) = 0;
      #endif
      // RPC to create world for the interaction session.
      virtual void CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to load world for the interaction session.
      virtual void LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to log errors for the interaction session.
      virtual void LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to get voice preview
      virtual void VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // RPC to load list of base voices.
      virtual void ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Generates a JWT to access the world engine API with a given API key
      // A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
      virtual void GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* SessionRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* AsyncSessionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* PrepareAsyncSessionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::CreateWorldResponse>* AsyncCreateWorldRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::CreateWorldResponse>* PrepareAsyncCreateWorldRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::LoadSceneResponse>* AsyncLoadSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::LoadSceneResponse>* PrepareAsyncLoadSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncLogErrorRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncLogErrorRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::VoicePreviewResponse>* AsyncVoicePreviewRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::VoicePreviewResponse>* PrepareAsyncVoicePreviewRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::ListBaseVoicesResponce>* AsyncListBaseVoicesRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::ListBaseVoicesResponce>* PrepareAsyncListBaseVoicesRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::AccessToken>* AsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ai::inworld::engine::AccessToken>* PrepareAsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>> Session(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>>(SessionRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>> AsyncSession(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>>(AsyncSessionRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>> PrepareAsyncSession(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>>(PrepareAsyncSessionRaw(context, cq));
    }
    ::grpc::Status CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::ai::inworld::engine::CreateWorldResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::CreateWorldResponse>> AsyncCreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::CreateWorldResponse>>(AsyncCreateWorldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::CreateWorldResponse>> PrepareAsyncCreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::CreateWorldResponse>>(PrepareAsyncCreateWorldRaw(context, request, cq));
    }
    ::grpc::Status LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::ai::inworld::engine::LoadSceneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::LoadSceneResponse>> AsyncLoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::LoadSceneResponse>>(AsyncLoadSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::LoadSceneResponse>> PrepareAsyncLoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::LoadSceneResponse>>(PrepareAsyncLoadSceneRaw(context, request, cq));
    }
    ::grpc::Status LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncLogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncLogErrorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncLogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncLogErrorRaw(context, request, cq));
    }
    ::grpc::Status VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::ai::inworld::engine::VoicePreviewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::VoicePreviewResponse>> AsyncVoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::VoicePreviewResponse>>(AsyncVoicePreviewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::VoicePreviewResponse>> PrepareAsyncVoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::VoicePreviewResponse>>(PrepareAsyncVoicePreviewRaw(context, request, cq));
    }
    ::grpc::Status ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::ai::inworld::engine::ListBaseVoicesResponce* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::ListBaseVoicesResponce>> AsyncListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::ListBaseVoicesResponce>>(AsyncListBaseVoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::ListBaseVoicesResponce>> PrepareAsyncListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::ListBaseVoicesResponce>>(PrepareAsyncListBaseVoicesRaw(context, request, cq));
    }
    ::grpc::Status GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::ai::inworld::engine::AccessToken* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::AccessToken>> AsyncGenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::AccessToken>>(AsyncGenerateTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::AccessToken>> PrepareAsyncGenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::AccessToken>>(PrepareAsyncGenerateTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Session(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ai::inworld::packets::InworldPacket,::ai::inworld::packets::InworldPacket>* reactor) override;
      #else
      void Session(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::ai::inworld::packets::InworldPacket,::ai::inworld::packets::InworldPacket>* reactor) override;
      #endif
      void CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateWorld(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LoadScene(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void LogError(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VoicePreview(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListBaseVoices(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GenerateToken(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* SessionRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* AsyncSessionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* PrepareAsyncSessionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::CreateWorldResponse>* AsyncCreateWorldRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::CreateWorldResponse>* PrepareAsyncCreateWorldRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::CreateWorldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::LoadSceneResponse>* AsyncLoadSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::LoadSceneResponse>* PrepareAsyncLoadSceneRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LoadSceneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncLogErrorRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncLogErrorRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::LogErrorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::VoicePreviewResponse>* AsyncVoicePreviewRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::VoicePreviewResponse>* PrepareAsyncVoicePreviewRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::VoicePreviewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::ListBaseVoicesResponce>* AsyncListBaseVoicesRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::ListBaseVoicesResponce>* PrepareAsyncListBaseVoicesRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::AccessToken>* AsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ai::inworld::engine::AccessToken>* PrepareAsyncGenerateTokenRaw(::grpc::ClientContext* context, const ::ai::inworld::engine::GenerateTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Session_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWorld_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadScene_;
    const ::grpc::internal::RpcMethod rpcmethod_LogError_;
    const ::grpc::internal::RpcMethod rpcmethod_VoicePreview_;
    const ::grpc::internal::RpcMethod rpcmethod_ListBaseVoices_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Bidirectional events based Session.
    virtual ::grpc::Status Session(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* stream);
    // RPC to create world for the interaction session.
    virtual ::grpc::Status CreateWorld(::grpc::ServerContext* context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response);
    // RPC to load world for the interaction session.
    virtual ::grpc::Status LoadScene(::grpc::ServerContext* context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response);
    // RPC to log errors for the interaction session.
    virtual ::grpc::Status LogError(::grpc::ServerContext* context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response);
    // RPC to get voice preview
    virtual ::grpc::Status VoicePreview(::grpc::ServerContext* context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response);
    // RPC to load list of base voices.
    virtual ::grpc::Status ListBaseVoices(::grpc::ServerContext* context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response);
    // Generates a JWT to access the world engine API with a given API key
    // A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
    virtual ::grpc::Status GenerateToken(::grpc::ServerContext* context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Session() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Session(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSession(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateWorld() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorld(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorld(::grpc::ServerContext* context, ::ai::inworld::engine::CreateWorldRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::engine::CreateWorldResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadScene() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_LoadScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadScene(::grpc::ServerContext* context, ::ai::inworld::engine::LoadSceneRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::engine::LoadSceneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LogError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LogError() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LogError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogError(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogError(::grpc::ServerContext* context, ::ai::inworld::engine::LogErrorRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VoicePreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VoicePreview() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VoicePreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoicePreview(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoicePreview(::grpc::ServerContext* context, ::ai::inworld::engine::VoicePreviewRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::engine::VoicePreviewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBaseVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListBaseVoices() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListBaseVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBaseVoices(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBaseVoices(::grpc::ServerContext* context, ::ai::inworld::engine::ListBaseVoicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::engine::ListBaseVoicesResponce>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GenerateToken() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateToken(::grpc::ServerContext* context, ::ai::inworld::engine::GenerateTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::ai::inworld::engine::AccessToken>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Session<WithAsyncMethod_CreateWorld<WithAsyncMethod_LoadScene<WithAsyncMethod_LogError<WithAsyncMethod_VoicePreview<WithAsyncMethod_ListBaseVoices<WithAsyncMethod_GenerateToken<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Session() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Session(context); }));
    }
    ~ExperimentalWithCallbackMethod_Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Session(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* Session(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* Session(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateWorld() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::CreateWorldRequest, ::ai::inworld::engine::CreateWorldResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::engine::CreateWorldRequest* request, ::ai::inworld::engine::CreateWorldResponse* response) { return this->CreateWorld(context, request, response); }));}
    void SetMessageAllocatorFor_CreateWorld(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::engine::CreateWorldRequest, ::ai::inworld::engine::CreateWorldResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::CreateWorldRequest, ::ai::inworld::engine::CreateWorldResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorld(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateWorld(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateWorld(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LoadScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LoadScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::LoadSceneRequest, ::ai::inworld::engine::LoadSceneResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::engine::LoadSceneRequest* request, ::ai::inworld::engine::LoadSceneResponse* response) { return this->LoadScene(context, request, response); }));}
    void SetMessageAllocatorFor_LoadScene(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::engine::LoadSceneRequest, ::ai::inworld::engine::LoadSceneResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::LoadSceneRequest, ::ai::inworld::engine::LoadSceneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LoadScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadScene(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LogError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_LogError() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::LogErrorRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::engine::LogErrorRequest* request, ::google::protobuf::Empty* response) { return this->LogError(context, request, response); }));}
    void SetMessageAllocatorFor_LogError(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::engine::LogErrorRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::LogErrorRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_LogError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogError(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LogError(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LogError(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VoicePreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_VoicePreview() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::VoicePreviewRequest, ::ai::inworld::engine::VoicePreviewResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::engine::VoicePreviewRequest* request, ::ai::inworld::engine::VoicePreviewResponse* response) { return this->VoicePreview(context, request, response); }));}
    void SetMessageAllocatorFor_VoicePreview(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::engine::VoicePreviewRequest, ::ai::inworld::engine::VoicePreviewResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::VoicePreviewRequest, ::ai::inworld::engine::VoicePreviewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VoicePreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoicePreview(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VoicePreview(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VoicePreview(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListBaseVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListBaseVoices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::ListBaseVoicesRequest, ::ai::inworld::engine::ListBaseVoicesResponce>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::engine::ListBaseVoicesRequest* request, ::ai::inworld::engine::ListBaseVoicesResponce* response) { return this->ListBaseVoices(context, request, response); }));}
    void SetMessageAllocatorFor_ListBaseVoices(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::engine::ListBaseVoicesRequest, ::ai::inworld::engine::ListBaseVoicesResponce>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::ListBaseVoicesRequest, ::ai::inworld::engine::ListBaseVoicesResponce>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListBaseVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBaseVoices(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListBaseVoices(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListBaseVoices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GenerateToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::GenerateTokenRequest, ::ai::inworld::engine::AccessToken>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ai::inworld::engine::GenerateTokenRequest* request, ::ai::inworld::engine::AccessToken* response) { return this->GenerateToken(context, request, response); }));}
    void SetMessageAllocatorFor_GenerateToken(
        ::grpc::experimental::MessageAllocator< ::ai::inworld::engine::GenerateTokenRequest, ::ai::inworld::engine::AccessToken>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ai::inworld::engine::GenerateTokenRequest, ::ai::inworld::engine::AccessToken>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Session<ExperimentalWithCallbackMethod_CreateWorld<ExperimentalWithCallbackMethod_LoadScene<ExperimentalWithCallbackMethod_LogError<ExperimentalWithCallbackMethod_VoicePreview<ExperimentalWithCallbackMethod_ListBaseVoices<ExperimentalWithCallbackMethod_GenerateToken<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Session<ExperimentalWithCallbackMethod_CreateWorld<ExperimentalWithCallbackMethod_LoadScene<ExperimentalWithCallbackMethod_LogError<ExperimentalWithCallbackMethod_VoicePreview<ExperimentalWithCallbackMethod_ListBaseVoices<ExperimentalWithCallbackMethod_GenerateToken<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Session() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Session(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateWorld() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorld(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadScene() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_LoadScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LogError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LogError() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LogError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogError(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VoicePreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VoicePreview() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VoicePreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoicePreview(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListBaseVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListBaseVoices() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListBaseVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBaseVoices(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GenerateToken() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Session() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Session(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSession(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateWorld() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorld(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWorld(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadScene() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_LoadScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LogError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LogError() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LogError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogError(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogError(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VoicePreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VoicePreview() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_VoicePreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoicePreview(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoicePreview(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListBaseVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListBaseVoices() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListBaseVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBaseVoices(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBaseVoices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GenerateToken() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Session : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Session() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Session(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Session() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Session(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ai::inworld::packets::InworldPacket, ::ai::inworld::packets::InworldPacket>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Session(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Session(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateWorld() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateWorld(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWorld(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateWorld(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateWorld(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LoadScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LoadScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LoadScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LoadScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LoadScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LogError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_LogError() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LogError(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_LogError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LogError(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* LogError(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* LogError(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VoicePreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_VoicePreview() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VoicePreview(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_VoicePreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoicePreview(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VoicePreview(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VoicePreview(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListBaseVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListBaseVoices() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListBaseVoices(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListBaseVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBaseVoices(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListBaseVoices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListBaseVoices(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GenerateToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GenerateToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GenerateToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateWorld() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::engine::CreateWorldRequest, ::ai::inworld::engine::CreateWorldResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::engine::CreateWorldRequest, ::ai::inworld::engine::CreateWorldResponse>* streamer) {
                       return this->StreamedCreateWorld(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWorld(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::CreateWorldRequest* /*request*/, ::ai::inworld::engine::CreateWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWorld(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::engine::CreateWorldRequest,::ai::inworld::engine::CreateWorldResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadScene() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::engine::LoadSceneRequest, ::ai::inworld::engine::LoadSceneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::engine::LoadSceneRequest, ::ai::inworld::engine::LoadSceneResponse>* streamer) {
                       return this->StreamedLoadScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadScene(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LoadSceneRequest* /*request*/, ::ai::inworld::engine::LoadSceneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::engine::LoadSceneRequest,::ai::inworld::engine::LoadSceneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LogError : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LogError() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::engine::LogErrorRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::engine::LogErrorRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedLogError(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LogError() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LogError(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::LogErrorRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogError(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::engine::LogErrorRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoicePreview : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VoicePreview() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::engine::VoicePreviewRequest, ::ai::inworld::engine::VoicePreviewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::engine::VoicePreviewRequest, ::ai::inworld::engine::VoicePreviewResponse>* streamer) {
                       return this->StreamedVoicePreview(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VoicePreview() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoicePreview(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::VoicePreviewRequest* /*request*/, ::ai::inworld::engine::VoicePreviewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoicePreview(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::engine::VoicePreviewRequest,::ai::inworld::engine::VoicePreviewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListBaseVoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListBaseVoices() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::engine::ListBaseVoicesRequest, ::ai::inworld::engine::ListBaseVoicesResponce>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::engine::ListBaseVoicesRequest, ::ai::inworld::engine::ListBaseVoicesResponce>* streamer) {
                       return this->StreamedListBaseVoices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListBaseVoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListBaseVoices(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::ListBaseVoicesRequest* /*request*/, ::ai::inworld::engine::ListBaseVoicesResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListBaseVoices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::engine::ListBaseVoicesRequest,::ai::inworld::engine::ListBaseVoicesResponce>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GenerateToken() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ai::inworld::engine::GenerateTokenRequest, ::ai::inworld::engine::AccessToken>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ai::inworld::engine::GenerateTokenRequest, ::ai::inworld::engine::AccessToken>* streamer) {
                       return this->StreamedGenerateToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GenerateToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateToken(::grpc::ServerContext* /*context*/, const ::ai::inworld::engine::GenerateTokenRequest* /*request*/, ::ai::inworld::engine::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ai::inworld::engine::GenerateTokenRequest,::ai::inworld::engine::AccessToken>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateWorld<WithStreamedUnaryMethod_LoadScene<WithStreamedUnaryMethod_LogError<WithStreamedUnaryMethod_VoicePreview<WithStreamedUnaryMethod_ListBaseVoices<WithStreamedUnaryMethod_GenerateToken<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateWorld<WithStreamedUnaryMethod_LoadScene<WithStreamedUnaryMethod_LogError<WithStreamedUnaryMethod_VoicePreview<WithStreamedUnaryMethod_ListBaseVoices<WithStreamedUnaryMethod_GenerateToken<Service > > > > > > StreamedService;
};

}  // namespace engine
}  // namespace inworld
}  // namespace ai


#endif  // GRPC_world_2dengine_2eproto__INCLUDED
