// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/resource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fresource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fresource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fresource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fresource_2eproto;
namespace google {
namespace api {
class ResourceDescriptor;
class ResourceDescriptorDefaultTypeInternal;
extern ResourceDescriptorDefaultTypeInternal _ResourceDescriptor_default_instance_;
class ResourceReference;
class ResourceReferenceDefaultTypeInternal;
extern ResourceReferenceDefaultTypeInternal _ResourceReference_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::ResourceDescriptor* Arena::CreateMaybeMessage<::google::api::ResourceDescriptor>(Arena*);
template<> ::google::api::ResourceReference* Arena::CreateMaybeMessage<::google::api::ResourceReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

enum ResourceDescriptor_History : int {
  ResourceDescriptor_History_HISTORY_UNSPECIFIED = 0,
  ResourceDescriptor_History_ORIGINALLY_SINGLE_PATTERN = 1,
  ResourceDescriptor_History_FUTURE_MULTI_PATTERN = 2,
  ResourceDescriptor_History_ResourceDescriptor_History_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResourceDescriptor_History_ResourceDescriptor_History_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResourceDescriptor_History_IsValid(int value);
constexpr ResourceDescriptor_History ResourceDescriptor_History_History_MIN = ResourceDescriptor_History_HISTORY_UNSPECIFIED;
constexpr ResourceDescriptor_History ResourceDescriptor_History_History_MAX = ResourceDescriptor_History_FUTURE_MULTI_PATTERN;
constexpr int ResourceDescriptor_History_History_ARRAYSIZE = ResourceDescriptor_History_History_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceDescriptor_History_descriptor();
template<typename T>
inline const std::string& ResourceDescriptor_History_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceDescriptor_History>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceDescriptor_History_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceDescriptor_History_descriptor(), enum_t_value);
}
inline bool ResourceDescriptor_History_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceDescriptor_History* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceDescriptor_History>(
    ResourceDescriptor_History_descriptor(), name, value);
}
// ===================================================================

class ResourceDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.ResourceDescriptor) */ {
 public:
  inline ResourceDescriptor() : ResourceDescriptor(nullptr) {}
  virtual ~ResourceDescriptor();

  ResourceDescriptor(const ResourceDescriptor& from);
  ResourceDescriptor(ResourceDescriptor&& from) noexcept
    : ResourceDescriptor() {
    *this = ::std::move(from);
  }

  inline ResourceDescriptor& operator=(const ResourceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDescriptor& operator=(ResourceDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceDescriptor& default_instance();

  static inline const ResourceDescriptor* internal_default_instance() {
    return reinterpret_cast<const ResourceDescriptor*>(
               &_ResourceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourceDescriptor& a, ResourceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceDescriptor* New() const final {
    return CreateMaybeMessage<ResourceDescriptor>(nullptr);
  }

  ResourceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceDescriptor& from);
  void MergeFrom(const ResourceDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.ResourceDescriptor";
  }
  protected:
  explicit ResourceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fresource_2eproto);
    return ::descriptor_table_google_2fapi_2fresource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResourceDescriptor_History History;
  static constexpr History HISTORY_UNSPECIFIED =
    ResourceDescriptor_History_HISTORY_UNSPECIFIED;
  static constexpr History ORIGINALLY_SINGLE_PATTERN =
    ResourceDescriptor_History_ORIGINALLY_SINGLE_PATTERN;
  static constexpr History FUTURE_MULTI_PATTERN =
    ResourceDescriptor_History_FUTURE_MULTI_PATTERN;
  static inline bool History_IsValid(int value) {
    return ResourceDescriptor_History_IsValid(value);
  }
  static constexpr History History_MIN =
    ResourceDescriptor_History_History_MIN;
  static constexpr History History_MAX =
    ResourceDescriptor_History_History_MAX;
  static constexpr int History_ARRAYSIZE =
    ResourceDescriptor_History_History_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  History_descriptor() {
    return ResourceDescriptor_History_descriptor();
  }
  template<typename T>
  static inline const std::string& History_Name(T enum_t_value) {
    static_assert(::std::is_same<T, History>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function History_Name.");
    return ResourceDescriptor_History_Name(enum_t_value);
  }
  static inline bool History_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      History* value) {
    return ResourceDescriptor_History_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 2,
    kTypeFieldNumber = 1,
    kNameFieldFieldNumber = 3,
    kPluralFieldNumber = 5,
    kSingularFieldNumber = 6,
    kHistoryFieldNumber = 4,
  };
  // repeated string pattern = 2;
  int pattern_size() const;
  private:
  int _internal_pattern_size() const;
  public:
  void clear_pattern();
  const std::string& pattern(int index) const;
  std::string* mutable_pattern(int index);
  void set_pattern(int index, const std::string& value);
  void set_pattern(int index, std::string&& value);
  void set_pattern(int index, const char* value);
  void set_pattern(int index, const char* value, size_t size);
  std::string* add_pattern();
  void add_pattern(const std::string& value);
  void add_pattern(std::string&& value);
  void add_pattern(const char* value);
  void add_pattern(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pattern() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pattern();
  private:
  const std::string& _internal_pattern(int index) const;
  std::string* _internal_add_pattern();
  public:

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name_field = 3;
  void clear_name_field();
  const std::string& name_field() const;
  void set_name_field(const std::string& value);
  void set_name_field(std::string&& value);
  void set_name_field(const char* value);
  void set_name_field(const char* value, size_t size);
  std::string* mutable_name_field();
  std::string* release_name_field();
  void set_allocated_name_field(std::string* name_field);
  private:
  const std::string& _internal_name_field() const;
  void _internal_set_name_field(const std::string& value);
  std::string* _internal_mutable_name_field();
  public:

  // string plural = 5;
  void clear_plural();
  const std::string& plural() const;
  void set_plural(const std::string& value);
  void set_plural(std::string&& value);
  void set_plural(const char* value);
  void set_plural(const char* value, size_t size);
  std::string* mutable_plural();
  std::string* release_plural();
  void set_allocated_plural(std::string* plural);
  private:
  const std::string& _internal_plural() const;
  void _internal_set_plural(const std::string& value);
  std::string* _internal_mutable_plural();
  public:

  // string singular = 6;
  void clear_singular();
  const std::string& singular() const;
  void set_singular(const std::string& value);
  void set_singular(std::string&& value);
  void set_singular(const char* value);
  void set_singular(const char* value, size_t size);
  std::string* mutable_singular();
  std::string* release_singular();
  void set_allocated_singular(std::string* singular);
  private:
  const std::string& _internal_singular() const;
  void _internal_set_singular(const std::string& value);
  std::string* _internal_mutable_singular();
  public:

  // .google.api.ResourceDescriptor.History history = 4;
  void clear_history();
  ::google::api::ResourceDescriptor_History history() const;
  void set_history(::google::api::ResourceDescriptor_History value);
  private:
  ::google::api::ResourceDescriptor_History _internal_history() const;
  void _internal_set_history(::google::api::ResourceDescriptor_History value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.ResourceDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plural_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr singular_;
  int history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fresource_2eproto;
};
// -------------------------------------------------------------------

class ResourceReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.ResourceReference) */ {
 public:
  inline ResourceReference() : ResourceReference(nullptr) {}
  virtual ~ResourceReference();

  ResourceReference(const ResourceReference& from);
  ResourceReference(ResourceReference&& from) noexcept
    : ResourceReference() {
    *this = ::std::move(from);
  }

  inline ResourceReference& operator=(const ResourceReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceReference& operator=(ResourceReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceReference& default_instance();

  static inline const ResourceReference* internal_default_instance() {
    return reinterpret_cast<const ResourceReference*>(
               &_ResourceReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceReference& a, ResourceReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceReference* New() const final {
    return CreateMaybeMessage<ResourceReference>(nullptr);
  }

  ResourceReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceReference& from);
  void MergeFrom(const ResourceReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.ResourceReference";
  }
  protected:
  explicit ResourceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fresource_2eproto);
    return ::descriptor_table_google_2fapi_2fresource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kChildTypeFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string child_type = 2;
  void clear_child_type();
  const std::string& child_type() const;
  void set_child_type(const std::string& value);
  void set_child_type(std::string&& value);
  void set_child_type(const char* value);
  void set_child_type(const char* value, size_t size);
  std::string* mutable_child_type();
  std::string* release_child_type();
  void set_allocated_child_type(std::string* child_type);
  private:
  const std::string& _internal_child_type() const;
  void _internal_set_child_type(const std::string& value);
  std::string* _internal_mutable_child_type();
  public:

  // @@protoc_insertion_point(class_scope:google.api.ResourceReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fresource_2eproto;
};
// ===================================================================

static const int kResourceReferenceFieldNumber = 1055;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::google::api::ResourceReference >, 11, false >
  resource_reference;
static const int kResourceDefinitionFieldNumber = 1053;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::google::api::ResourceDescriptor >, 11, false >
  resource_definition;
static const int kResourceFieldNumber = 1053;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::google::api::ResourceDescriptor >, 11, false >
  resource;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourceDescriptor

// string type = 1;
inline void ResourceDescriptor::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.type)
  return _internal_type();
}
inline void ResourceDescriptor::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.type)
}
inline std::string* ResourceDescriptor::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.type)
  return _internal_mutable_type();
}
inline const std::string& ResourceDescriptor::_internal_type() const {
  return type_.Get();
}
inline void ResourceDescriptor::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceDescriptor::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.ResourceDescriptor.type)
}
inline void ResourceDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.ResourceDescriptor.type)
}
inline void ResourceDescriptor::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceDescriptor.type)
}
inline std::string* ResourceDescriptor::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.type)
}

// repeated string pattern = 2;
inline int ResourceDescriptor::_internal_pattern_size() const {
  return pattern_.size();
}
inline int ResourceDescriptor::pattern_size() const {
  return _internal_pattern_size();
}
inline void ResourceDescriptor::clear_pattern() {
  pattern_.Clear();
}
inline std::string* ResourceDescriptor::add_pattern() {
  // @@protoc_insertion_point(field_add_mutable:google.api.ResourceDescriptor.pattern)
  return _internal_add_pattern();
}
inline const std::string& ResourceDescriptor::_internal_pattern(int index) const {
  return pattern_.Get(index);
}
inline const std::string& ResourceDescriptor::pattern(int index) const {
  // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.pattern)
  return _internal_pattern(index);
}
inline std::string* ResourceDescriptor::mutable_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.pattern)
  return pattern_.Mutable(index);
}
inline void ResourceDescriptor::set_pattern(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.pattern)
  pattern_.Mutable(index)->assign(value);
}
inline void ResourceDescriptor::set_pattern(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.pattern)
  pattern_.Mutable(index)->assign(std::move(value));
}
inline void ResourceDescriptor::set_pattern(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pattern_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.ResourceDescriptor.pattern)
}
inline void ResourceDescriptor::set_pattern(int index, const char* value, size_t size) {
  pattern_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceDescriptor.pattern)
}
inline std::string* ResourceDescriptor::_internal_add_pattern() {
  return pattern_.Add();
}
inline void ResourceDescriptor::add_pattern(const std::string& value) {
  pattern_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.ResourceDescriptor.pattern)
}
inline void ResourceDescriptor::add_pattern(std::string&& value) {
  pattern_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.ResourceDescriptor.pattern)
}
inline void ResourceDescriptor::add_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pattern_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.ResourceDescriptor.pattern)
}
inline void ResourceDescriptor::add_pattern(const char* value, size_t size) {
  pattern_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.ResourceDescriptor.pattern)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResourceDescriptor::pattern() const {
  // @@protoc_insertion_point(field_list:google.api.ResourceDescriptor.pattern)
  return pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResourceDescriptor::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable_list:google.api.ResourceDescriptor.pattern)
  return &pattern_;
}

// string name_field = 3;
inline void ResourceDescriptor::clear_name_field() {
  name_field_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::name_field() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.name_field)
  return _internal_name_field();
}
inline void ResourceDescriptor::set_name_field(const std::string& value) {
  _internal_set_name_field(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.name_field)
}
inline std::string* ResourceDescriptor::mutable_name_field() {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.name_field)
  return _internal_mutable_name_field();
}
inline const std::string& ResourceDescriptor::_internal_name_field() const {
  return name_field_.Get();
}
inline void ResourceDescriptor::_internal_set_name_field(const std::string& value) {
  
  name_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceDescriptor::set_name_field(std::string&& value) {
  
  name_field_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.ResourceDescriptor.name_field)
}
inline void ResourceDescriptor::set_name_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.ResourceDescriptor.name_field)
}
inline void ResourceDescriptor::set_name_field(const char* value,
    size_t size) {
  
  name_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceDescriptor.name_field)
}
inline std::string* ResourceDescriptor::_internal_mutable_name_field() {
  
  return name_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceDescriptor::release_name_field() {
  // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.name_field)
  return name_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceDescriptor::set_allocated_name_field(std::string* name_field) {
  if (name_field != nullptr) {
    
  } else {
    
  }
  name_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.name_field)
}

// .google.api.ResourceDescriptor.History history = 4;
inline void ResourceDescriptor::clear_history() {
  history_ = 0;
}
inline ::google::api::ResourceDescriptor_History ResourceDescriptor::_internal_history() const {
  return static_cast< ::google::api::ResourceDescriptor_History >(history_);
}
inline ::google::api::ResourceDescriptor_History ResourceDescriptor::history() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.history)
  return _internal_history();
}
inline void ResourceDescriptor::_internal_set_history(::google::api::ResourceDescriptor_History value) {
  
  history_ = value;
}
inline void ResourceDescriptor::set_history(::google::api::ResourceDescriptor_History value) {
  _internal_set_history(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.history)
}

// string plural = 5;
inline void ResourceDescriptor::clear_plural() {
  plural_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::plural() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.plural)
  return _internal_plural();
}
inline void ResourceDescriptor::set_plural(const std::string& value) {
  _internal_set_plural(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.plural)
}
inline std::string* ResourceDescriptor::mutable_plural() {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.plural)
  return _internal_mutable_plural();
}
inline const std::string& ResourceDescriptor::_internal_plural() const {
  return plural_.Get();
}
inline void ResourceDescriptor::_internal_set_plural(const std::string& value) {
  
  plural_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceDescriptor::set_plural(std::string&& value) {
  
  plural_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.ResourceDescriptor.plural)
}
inline void ResourceDescriptor::set_plural(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plural_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.ResourceDescriptor.plural)
}
inline void ResourceDescriptor::set_plural(const char* value,
    size_t size) {
  
  plural_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceDescriptor.plural)
}
inline std::string* ResourceDescriptor::_internal_mutable_plural() {
  
  return plural_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceDescriptor::release_plural() {
  // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.plural)
  return plural_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceDescriptor::set_allocated_plural(std::string* plural) {
  if (plural != nullptr) {
    
  } else {
    
  }
  plural_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plural,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.plural)
}

// string singular = 6;
inline void ResourceDescriptor::clear_singular() {
  singular_.ClearToEmpty();
}
inline const std::string& ResourceDescriptor::singular() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceDescriptor.singular)
  return _internal_singular();
}
inline void ResourceDescriptor::set_singular(const std::string& value) {
  _internal_set_singular(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceDescriptor.singular)
}
inline std::string* ResourceDescriptor::mutable_singular() {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceDescriptor.singular)
  return _internal_mutable_singular();
}
inline const std::string& ResourceDescriptor::_internal_singular() const {
  return singular_.Get();
}
inline void ResourceDescriptor::_internal_set_singular(const std::string& value) {
  
  singular_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceDescriptor::set_singular(std::string&& value) {
  
  singular_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.ResourceDescriptor.singular)
}
inline void ResourceDescriptor::set_singular(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  singular_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.ResourceDescriptor.singular)
}
inline void ResourceDescriptor::set_singular(const char* value,
    size_t size) {
  
  singular_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceDescriptor.singular)
}
inline std::string* ResourceDescriptor::_internal_mutable_singular() {
  
  return singular_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceDescriptor::release_singular() {
  // @@protoc_insertion_point(field_release:google.api.ResourceDescriptor.singular)
  return singular_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceDescriptor::set_allocated_singular(std::string* singular) {
  if (singular != nullptr) {
    
  } else {
    
  }
  singular_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), singular,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.ResourceDescriptor.singular)
}

// -------------------------------------------------------------------

// ResourceReference

// string type = 1;
inline void ResourceReference::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ResourceReference::type() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceReference.type)
  return _internal_type();
}
inline void ResourceReference::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceReference.type)
}
inline std::string* ResourceReference::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceReference.type)
  return _internal_mutable_type();
}
inline const std::string& ResourceReference::_internal_type() const {
  return type_.Get();
}
inline void ResourceReference::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceReference::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.ResourceReference.type)
}
inline void ResourceReference::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.ResourceReference.type)
}
inline void ResourceReference::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceReference.type)
}
inline std::string* ResourceReference::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceReference::release_type() {
  // @@protoc_insertion_point(field_release:google.api.ResourceReference.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceReference::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.ResourceReference.type)
}

// string child_type = 2;
inline void ResourceReference::clear_child_type() {
  child_type_.ClearToEmpty();
}
inline const std::string& ResourceReference::child_type() const {
  // @@protoc_insertion_point(field_get:google.api.ResourceReference.child_type)
  return _internal_child_type();
}
inline void ResourceReference::set_child_type(const std::string& value) {
  _internal_set_child_type(value);
  // @@protoc_insertion_point(field_set:google.api.ResourceReference.child_type)
}
inline std::string* ResourceReference::mutable_child_type() {
  // @@protoc_insertion_point(field_mutable:google.api.ResourceReference.child_type)
  return _internal_mutable_child_type();
}
inline const std::string& ResourceReference::_internal_child_type() const {
  return child_type_.Get();
}
inline void ResourceReference::_internal_set_child_type(const std::string& value) {
  
  child_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceReference::set_child_type(std::string&& value) {
  
  child_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.api.ResourceReference.child_type)
}
inline void ResourceReference::set_child_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.api.ResourceReference.child_type)
}
inline void ResourceReference::set_child_type(const char* value,
    size_t size) {
  
  child_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.api.ResourceReference.child_type)
}
inline std::string* ResourceReference::_internal_mutable_child_type() {
  
  return child_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceReference::release_child_type() {
  // @@protoc_insertion_point(field_release:google.api.ResourceReference.child_type)
  return child_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceReference::set_allocated_child_type(std::string* child_type) {
  if (child_type != nullptr) {
    
  } else {
    
  }
  child_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.api.ResourceReference.child_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::ResourceDescriptor_History> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::ResourceDescriptor_History>() {
  return ::google::api::ResourceDescriptor_History_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fresource_2eproto
